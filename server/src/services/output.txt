Занурення в
ПАТЕРНИПРОЕКТУВАННЯ
v-
Книга придбана Юрий Кучма
krabatua@gmailc om (#)Замість к опірайт у
Привіт! Мене звуть О лександр Швець, я
автор книги Занурення в Патерни, а так ож
онлайн-курс уЗанурення в Р ефакторинг
Ця книга призначена д ля вашог о особис того
корис тування Бу дь ласка, не пере давайт е її
третім ос обам, за винятк ом членів своєї сім'ї Якщо ви х очете поді-
литися книг ою з др узями чи к олегами — придбайт е і по даруйте їм
легальну к опію книги Т акож ви мо жете придбати к орпоративну
ліцензію д ля всієї вашої к оманди або організації 
Всі гроші, о тримані з про дажу моїх книг і курсів, ідуть на розвит ок
Refact oringGuru  Це один з небагать ох ресурсів програміс тської
тематики, дос тупних українськ ою мовою  Кожна придбана к опія
продовжу є жит тя проекту й наб лижає момент вих оду новог о курс у
чикниги 
Олександр Швець, R efact oringGuru, 
suppor t@refact oringguru
Іллюс трації: Дмитро Жар т
Перек лад українськ ою: Віталій Г альцев, О лександр Швець
Редактор: Ельвіра Мамонт ова
Занурення в Патерни :
https:refact oringguruukdesign-pat ternsbook
Занурення в Р ефакторинг :
https:refact oringguruukrefact oringc ourse
Прис вячую цю книгу с воїй др ужині Марії,
без як ої я б не довів діло до кінця ще
років тридцять 
Зміст
Зміст  
Як читати цю книг у 
ВСТУП Д О ООП  
Згаду ємо ООП  
Наріжні камені ООП  
Зв'язки між об 'єктами  
ОСНОВИ ПА ТЕРНІВ  
Що так е пат ерн?  
Навіщо знати пат ерни?  
ПРИНЦИПИ ПР ОЕКТУВАННЯ  
Якості хорошої ар хітектури  
Базові принципи проект ування  
§Інкапс улюйт е те, що змінюєть ся 
§Програмуйт е на рівні інт ерфейс у 
§Віддавайт е перевагу к омпозиції пере д спадкува-
нням  
Принципи SOLID  
§S: Принцип єдиног о обов' язку 
§O: Принцип відкрит остізакрит ості 
§L: Принцип підс тановки Ліск ов 
§I: Принцип по ділу інт ерфейс у 
§D: Принцип інверсії зале жнос тей  Зміст
#
krabatua@gmail com (#)КАТАЛОГ ПА ТЕРНІВ  
Породж увальні пат ерни  
§Фабричний мет од Factory Me thod 
§Абстрактна фабрика  Abstract Factory  
§Будівельник  Builder  
§Прототип  Protot ype 
§Одинак  Single ton 
Структурні пат ерни  
§Адаптер Adapter  
§Міст Bridge  
§Компонувальник  Composite  
§Декоратор Decorator  
§Фасад  Facade 
§Легковаговик  Flyweight  
§Замісник  Proxy 
Пове дінк ові пат ерни  
§Ланцю жок обов' язків  Chain of R esponsibilit y 
§Команда  Command  
§Ітератор Iterator  
§Посередник  Mediator  
§Знімок  Memento  
§Спос терігач  Observ er 
§Стан  State  
§Стратегія  Strategy  
§Шаблонний мет од Template Me thod 
§Відвідувач  Visitor  
Заключення   Зміст
#
krabatua@gmail com (#)Як читати цю книг у?
Ця книга ск ладаєть ся з опис у - х класичних пат ернів прое-
ктування, вперше відкритих «Бандою Чо тирьох» (“ Gang o f
Four” або прос то GoF) у  році
Кожен розділ книги присвячений тільки о дному пат ерну
Саме т ому книгу мо жна читати як пос лідовно , від краю до
краю , так і в довільному порядку , вибираючи тільки ті пат е-
рни, які вас цікавлять на даний момент 
Більшіс ть пат ернів пов ’язані між с обою , тому ви змо жете
з легкіс тю с трибати по пов ’язаних т емах, вик орис товуючи
величезну кількіс ть гіперпосилань, якими всіяні всі розді-
ли книги В кінці к ожног о розділу наве дені відносини по то-
чного пат ерна з іншими Якщо ви бачит е там назву пат ерна,
до як ого ще не дійшли, про довжуйт е читати далі, цей пункт
буде повт орено в іншому розділі 
Патерни проектування універсальні Т ому всі прик лади к оду
у цій книзі наве дено на пс евдок оді, без прив ’язки до к онкре-
тної мови програмування
Пере д вивченням пат ернів ви мо жете освіжити пам ’ять, про-
йшовшись основними т ермінами об ’єктног о програмування 
Парале льно я розповім про UML -діаграми, яких у цій книзі
приве дено вдос таль Якщо ви вс е це вж е знаєт е, сміливо
прис тупайт е до вивчення пат ернів  Як читати цю книгу?
#
krabatua@gmail com (#)ВСТУП Д О
ООП
#
krabatua@gmail com (#)Згаду ємо ООП
Об’єктно- орієнтоване програму вання — це мет одологія про-
грамування, в якій у сі важ ливі речі пре дставлені об’єктами ,
кожен з яких є екземпляром т ого чи іншог окласу, а класи
утворюю тьієрар хіюуспадкування 
Об’єкти, к ласи
Ви любит е кошенят? Спо діваюсь, що любит е, тому я спроб ую
пояснити у сі ці речі на прик ладах з котами 
Це UML-діаграма к ласу У книзі б уде багато таких діаграм  ВСТУП Д О ООП  Згаду ємо ООП
#
krabatua@gmail com (#)Отже, у вас є кіт Пу хнастик Він є об’єктом класуКітУсі
коти маю ть однак овий набір влас тивос тей: ім ’я, стать, вік,
вагу, колір, улюблену їжу та інше Ц е—полякласу
Крім т ого, всі к оти пово дяться с хожим чином: бігаю ть,
дихаю ть, сплять, їдять і мурк очуть Вс е це —методи класу
Узагальнено , поля і мет оди іно ді називаю тьчленами класу
Значення по лів певног о об ’єкта зазвичай називаю ть
йогостаном , а сукупніс ть мет одів—поведінк ою
Об’єкти — це екземпляри класів 
Мурка, кішка вашої по други, т еж є екземпляром к ласуКіт
Вона має такі самі влас тивос ті та пове дінку , що й Пу хнастик, ВСТУП Д О ООП  Згаду ємо ООП
#
krabatua@gmail com (#)а відрізняєть ся від нь ого лише значеннями цих влас тиво-
стей— вона іншої с таті, має інший к олір, вагу т ощо Отж е,
клас— це своєрідне «кре слення», на підс таві як ого будую-
тьсяоб’єкти — екземпляри ць огокласу
Ієрар хії класів
Ідемо далі У вашог о сусіда є с обака Жучка Як відомо , і
собаки, і к оти маю ть багат о спільног о: ім ’я, стать, вік, к олір
є не тільки в к отів, але й у с обак Крім т ого, бігати, дихати,
спати та їс ти мо жуть не тільки к оти Вих одить так, що ці вла-
стивос ті та пове дінка притаманні у сьому к ласуТварини 
UML-діаграма ієрар хії класів У сі класи на цій діаграмі є частиною
ієрар хіїТварин ВСТУП Д О ООП  Згаду ємо ООП
#
krabatua@gmail com (#)Такий батьківський к лас прийнят о називати суперк ласом, а
його нащадків —підкласами  Підк ласи у спадк овую ть вла-
стивос ті й пове дінку свог о батька, т ому в них міс титься лише
те, чог о немає у с уперк ласі Наприк лад, тільки к оти мо жуть
мурк отіти, а с обаки —гавкати 
Ми мо жемо піти далі та виділити ще більш загальний к лас
живих Організмів ,який б уде батьківським і д ляТварин,і
дляРибТаку «піраміду» к ласів зазвичай називаю тьієра-
рхією  Клас Котівуспадку є вс е, як з Тварин,так і з
Організмів 
Класи на UML-діаграмі мо жна спрощу вати, якщо важ ливіше пок азати
зв’язки між ними 
Варто згадати, що підк ласи мо жуть перевизначати пове ді-
нку мет одів, які їм діс талися від с уперк ласів При ць ому
вони мо жуть, як повніс тю замінити пове дінку мет оду, так і
прос то додати щось до резу льтату вик онання батьківськ ого
методу ВСТУП Д О ООП  Згаду ємо ООП
#
krabatua@gmail com (#)Наріжні камені ООП
ООП має чо тири г оловні к онцепції, які відрізняю ть йог о від
інших мет одологій програмування
Абстракція
Коли ви пишет е програму , вик орис товуючи ООП, ви по даєте
її час тини через об ’єкти реальног о світу  Але об ’єкти у про-
грамі не повт орюю ть точно своїх реальних аналогів, та це й
не завж ди по трібно  Заміс ть ць ого об’єкти програми всь ого
лише моде люють властивос ті й пове дінку реальних об ’єктів,
важливих у к онкретному к онтексті, а інші —ігнор ують
Так, наприк лад, к ласЛітакбуде актуальним, як д ля програ-
ми-тренаж ера піло тів, так і д ля програми бронювання авіа-
квитків, але в першому випадку б удуть важ ливими деталі
пілотування літака, а в др угому — лише розташування та
наявніс ть вільних місць у середині літака  ВСТУП Д О ООП  Наріжні камені ООП
#
krabatua@gmail com (#)Різні моде лі одного й того с амого реального об’єкта
Абстракція — це мо дель деяк ого об’єкта або явища реально-
го світу , яка відкидає незначні деталі, що не граю ть істотної
ролі в даному контексті
Інкапс уляція
Коли ви заво дите авт омобіль, дос татнь о повернути к люч
запалювання або натиснути відповідну кнопку  Вам не по трі-
бно вр учну з ’єднувати дро ти під капо том, повер тати к олінча-
стий вал та поршні, запу скаючи такт двигуна Всі ці деталі
прих овані під капо том авт омобіля Вам дос тупний лише
прос тий інт ерфейс: к люч запалювання, к ермо та пе далі
Таким чином, ми о триму ємо визначення інтерфейс у—публі-
чної (public)частини об ’єкта, що дос тупна іншим об ’єктам ВСТУП Д О ООП  Наріжні камені ООП
#
krabatua@gmail com (#)Інкапсуляція — це здатніс ть об ’єктів прих овувати час тину
свого стану й пове дінки від інших об ’єктів, надаючи зовні-
шньому світ ові тільки визначений інт ерфейс взаємо дії
зсобою 
Наприк лад, ви мо жетеінкапсулювати щось вс ередині к ласу,
зробивши йог оприватним (private )та прих овавши дос туп
до ць ого по ля чи мет оду д ля об ’єктів інших к ласів Т рохи
більш вільний, захищений (protected )режим видимос ті зро-
бить це по ле чи мет од дос тупним у підкласах 
На ідеях абс тракції та інкапс уляції поб удовано ме ханізми
інтерфейсів і абс трактних к ласівмет одів більшос ті
об’єктних мов програмування
Багать ох вво дить в оману т е, що с ловом «інт ерфейс»
називаю ть і пуб лічну час тину об ’єкта, і к онструкцію
interface більшос ті мов програмування
В об’єктних мовах програмування за допомог ою ме ханізму
інтерфейсів , які зазвичай ог олошую ть через к лючове с лово
interface ,можна явно опис увати «к онтракти» взаємо дії
об’єктів
Наприк лад, ви с творили інт ерфейс ЛітаючийТранспорт з
методом летіти(звідки, куди, пасажири) ,а по тім описали
методи к ласуАеропорт так, щоб вони приймали б удь-які
об’єкти з цим інт ерфейс ом Т епер ви мо жете бути впевнені ВСТУП Д О ООП  Наріжні камені ООП
#
krabatua@gmail com (#)в тому, що б удь-який об ’єкт, який реалізу є інт ерфейс чи т о
Літак,Вертоліт чиДресированийГрифон ,зможе працювати з
Аеропортом 
UML-діаграма реалізації та вик ористання інтерфейс у
Ви мо жете як завг одно змінювати к од класів, що реалізую-
ть інт ерфейс, не турб уючись про т е, що Аеропорт втратить
сумісніс тьзними 
Спадк ування
Спадкування — це мо жливіс ть створення нових к ласів на
основі існуючих Г оловна к орис ть від спадкування — повт о- ВСТУП Д О ООП  Наріжні камені ООП
#
krabatua@gmail com (#)рне вик орис тання існуючог о коду Розплата за спадкування
виражаєть ся в т ому, що підк ласи завж ди до тримую ться інт е-
рфейс у батьківськ ого класу Ви не мо жете вик лючити з під-
класу мет од, оголошений йог опредком
UML-діаграма одиничного спадк ування проти реалізації
безлічі інтерфейсів 
У більшос ті об’єктних мов програмування підк лас мо же мати
тільки о дного «батька» А ле, з іншог о боку , клас мо же реалі-
зовувати декілька інт ерфейсів одночасно  ВСТУП Д О ООП  Наріжні камені ООП
#
krabatua@gmail com (#)Поліморфізм
Повернемося до прик ладів з тваринами Практично всі
Тварини вмію ть видавати звуки, т ому ми мо жемо ог оло-
сити їхній спільний мет од видавання звуків абстрактним 
Усі підк ласи повинні б удуть перевизначити та реалізувати
такий мет од по-своєму 
Тепер уявіть, що ми спочатку поміс тили декільк ох собак і
котів у здоровезний мішок, а по тім із закритими очима б уде-
мо витягувати їх з мішка о дне за о дним Витягнувши тва-
ринку , ми не знаємо дос теменно її к ласу Але, якщо її ВСТУП Д О ООП  Наріжні камені ООП
#
krabatua@gmail com (#)погладити, тваринка видас ть звук зале жно від її к онкретно-
гокласу
Тут програмі невідомий к онкретний к лас об ’єкта змінної а,
але завдяки спеціальному ме ханізмові, що називаєть сяполі-
морфізм , буде запущено т ой мет од видавання звуків, який
відповідає реальному к ласу об’єкта
Поліморфізм — це здатніс ть програми вибирати різні реалі-
зації під час вик лику операцій з о днією і тією ж назвою 
Для кращог о розуміння поліморфізм можна розг лядати як
здатніс ть об ’єктів «прикидатися» чимось іншим У вищенаве-
деному прик ладі с обаки й к оти прикидалися абс трактними
тваринами bag=[newnewCat(),newnewDog()]; 

foreachforeach (Animala:bag) 
amakeSound () 

Meow!
Bark! ВСТУП Д О ООП  Наріжні камені ООП
#
krabatua@gmail com (#)Зв'язки між об 'єктами
Окрім спадк ування тареалізації існує ще декілька видів
зв’язків між об ’єктами, про які ми ще не говорили 
Зале жність
Залежність в UML-діаграмах Профес ор залежить від
навчального курсу
Залежність це базовий зв ’язок між к ласами, який показу є,
що о дин к лас швидше за вс е дове деться міняти при зміні
назви або сигнатури мет одів др угого Зале жність з’являє-
ться там, де ви вказу єте конкретні назви к ласів — у вик ли-
ках к онструкторів, під час опис у типів параметрів і значень
методів т ощо Ступінь зале жнос ті мо жна пос лабити, якщо
заміс ть конкретних к ласів посилатися на абс трактні к ласи
чиінтерфейси 
Зазвичай UML -діаграма не показу є всі зале жнос ті— їх зана-
дто багат о в б удь-як ому реальному к оді Заміс ть забр удне-
ння діаграми зале жнос тями, ви повинні б ути дуж е
прискіпливими і показувати лише ті зале жнос ті, що важ ливі
для зміс ту, який ви х очетедоне сти ВСТУП Д О ООП  Зв' язки між об 'єктами
#
krabatua@gmail com (#)Асоціація
Асоціація в UML-діаграмах Профес ор взаємодіє зі студентом 
Асоціація — це к оли один об ’єкт взаємо діє з іншим В UML
асоціація позначаєть ся звичайною с трілк ою, що спрямова-
на в с торону взаємо дії Двос тороння ас оціація між об ’єктами
теж цілк ом прийнятна А соціацію мо жна розг лядати як більш
суворий варіант зале жнос ті, в як ому о дин об ’єкт завж ди має
доступ до об ’єкта, з яким він взаємо діє Во дночас, під час
прос тої зале жнос ті зв ’язок мо же бути не пос тійним та не
таким явним 
Наприк лад, якщо о дин к лас має по ле-посилання на інший
клас, ви мо жете відобразити цей зв ’язок ас оціацією  Цей
зв’язок пос тійний, бо о дин об ’єкт завж ди мо же дос тукатися
до іншог о через це по ле Причому , роль по ля мо же відігра-
вати і мет од, який повер тає об ’єкти певног окласу
Щоб ос таточно зрозуміти різницю між ас оціацією та зале-
жністю, давайт е подивимося на к омбінований прик лад У яві-
ть, що в нас є к ласПрофесор : ВСТУП Д О ООП  Зв' язки між об 'єктами
#
krabatua@gmail com (#)Зверніть увагу на мет однавчити ,що приймає аргумент
класуКурс,який далі вик орис товується в тілі мет оду Якщо
методотриматиЗнання класуКурсзмінить назву , чи в нь ому
з’являть ся якісь обов ’язкові параметри, чи ще щось — наш
код зламаєть ся Ц е—залежність
Тепер по дивіть ся на по лестудент та на т е, як це по ле вик о-
ристовується в мет одінавчити Ми мо жемо т очно сказа-
ти, що к лас Студент для профе сора так ож є зале жністю,
бо якщо мет одзапам'ятати змінить назву , то код профе-
сора т еж зламаєть ся А ле завдяки т ому, що значення по ля
студент доступне д ля профе сора завж ди, з б удь-як ого мет о-
ду, клас Студент — це не прос то зале жність, але ще й а
асоціація 
Агрегація
Агрегація в UML-діаграмах К афедра містить профес орівclassclassProfessorProfessor isis 
fieldfieldStudent student 
 
methodmethodteach(Coursec)isis 
 
thisthisstudentremember (cgetKnowledge ())  ВСТУП Д О ООП  Зв' язки між об 'єктами
#
krabatua@gmail com (#)Агрегація — це спеціалізований різновид ас оціації, що опи-
сує зв’язки один-до-багатьо х,багато-до-багатьо х,частина-
ціле між декільк ома об ’єктами
Зазвичай під час агрегації о дин об ’єктмістить інші, т обто
виступає к онтейнером або к олекцією  Тут контейнер не
керує жит тєвим цик лом к омпонентів і к омпоненти цілк ом
можуть існувати окремо від контейнера 
В UML агрегація позначаєть ся лінією зі с трілк ою на о дному
кінці та поро жнім ромбом на іншому  Ромб спрямований в
бік к онтейнера, а с трілка — в с торону компонента 
Пам’ятайт е, що х оча ми г оворимо про зв ’язки між об ’єкта-
ми, б локи на UML -діаграмі зображаю ть зв ’язки між класами
Об’єкт університ ету мо же складатися з декільк ох від ділів,
але ви побачит е лише о дин б лок від ділу на діаграмі UML
дозво ляє вказувати кількіс ть об ’єктів по обидві с торони
зв’язків, але їх мо жна опу стити, якщо кількіс ть і так зрозумі-
ла із контексту
Композиція
Композиція в UML-діаграмах У ніверситет ск ладаєтьс я зкафедр  ВСТУП Д О ООП  Зв' язки між об 'єктами
#
krabatua@gmail com (#)Композиція — це більш с уворий варіант агрегації, к оли один
об’єктскладаєтьс я зінших Ос обливіс ть ць ого зв’язку по ля-
гає в т ому, що к омпонент мо же існувати лише як час тина
контейнера В UML к омпозиція зображу ється так само як і
агрегація, але з зафарбованим ромбом 
Зверніть увагу , у звичайному спілкуванні дуж е час то під
терміном «к омпозиція» мо же матися на увазі як сама к омпо-
зиція, так і більш с лабка агрегація Справа в т ому, що анг лі-
йська фраза «obje ct c omposition» означає б уквально
складений з об ’єктів  Ось чому звичайну к олекцію об ’єктів
часто-густо мо жуть називати побудованою на принципах
композиції 
Загальна кар тина
Тепер , коли ми знаємо про всі типи зв ’язків, мо жна пог ляну-
ти як вони пов ’язані між с обою  Це позбавить вас від плута-
нини та питань на кшталт «чим агрегація відрізняєть ся від
композиції» або «чи є спадкування залежністю»
•Зале жніс ть:Клас А мо жуть т оркнутися зміни в класіB
•Асоціація: Об’єкт А знає про об ’єкт B Клас А зале жить відB
•Агрегація: Об’єкт А знає про об ’єкт B і ск ладаєть ся з нь ого
Клас А зале жить відB
•Композиція: Об’єкт А знає про об ’єкт B, ск ладаєть ся з нь ого і
керує йог о жит тєвим цик лом Клас А зале жить відB ВСТУП Д О ООП  Зв' язки між об 'єктами
#
krabatua@gmail com (#)•Реалізація: Клас А визначає мет оди ог олошені інт ерфейс ом
B Об ’єкти А мо жна розг лядати через інт ерфейс B Клас А
залежить відB
•Спадк ування: Клас А у спадк овує інт ерфейс та реалізацію
класу B, але мо же перевизначити її Об ’єкти А мо жна розг ля-
дати через інт ерфейс к ласу B Клас А зале жить відB
Зв’язки між об ’єктами та к ласами— від найслабших до найсильніших  ВСТУП Д О ООП  Зв' язки між об 'єктами
#
krabatua@gmail com (#)ОСНОВИ
ПАТЕРНІВ
#
krabatua@gmail com (#)Що так е пат ерн?
Патерн проект ування — це типовий спосіб вирішення певної
проб леми, що час то зустрічаєть ся при проектуванні ар хіте-
ктури програм 
На відміну від г отових ф ункцій чи біб ліотек, пат ерн не
можна прос то взяти й ск опіювати в програму  Пат ерн являє
собою не якийсь к онкретний к од, а загальний принцип вирі-
шення певної проб леми, який майж е завж ди треба під ла-
штовувати д ля по треб тієї чи іншої програми 
Патерни час то плутаю ть з алг оритмами, адж е обидва поня-
ття опис ують типові рішення відомих проб лем А ле якщо
алгоритм — це чіткий набір дій, т о пат ерн— це вис окорівне-
вий опис рішення, реалізація як ого може відрізнятися у дво х
різних програмах 
Якщо прове сти аналогії, т о алг оритм — це ку лінарний реце-
пт з чіткими кроками, а пат ерн — інж енерне кре слення,
на як ому намаль овано рішення без к онкретних кроків йог о
отримання 
З чог о складаєтьс я пат ерн?
Описи пат ернів зазвичай дуж е формальні й найчас тіше
складаю ться з таких пунктів : ОСНОВИ ПА ТЕРНІВ  Щ о так е пат ерн?
#
krabatua@gmail com (#)•проб лема, яку вирішу є пат ерн;
•мотивація що до вирішення проб леми спос обом, який про-
пону є пат ерн;
•структура к ласів, ск ладових рішення;
•прик лад о днією з мов програмування;
•особливос ті реалізації в різних к онтекстах;
•зв’язки з іншими патернами 
Такий формалізм опис у дозво лив зібрати ве ликий каталог
патернів, до датково перевіривши к ожен пат ерн на дієвіс ть
Класифікація пат ернів
Патерни відрізняю ться за рівнем ск ладнос ті, деталізації та
охоплення проект ованої сис теми Прово дячи аналогію з
будівництвом, ви мо жете підвищити безпеку на пере хре-
сті, вс тановивши світ лофор , а мо жете замінити пере хрестя
цілою авт омобільною розв ’язкою з підземними пере ходами 
Найбільш низьк орівневі та прос ті пат ерни —ідіоми  Вони не
дуже універсальні, позаяк маю ть сенс лише в рамках о днієї
мови програмування
Найбільш універсальні —архітектурні патерни , які мо жна
реалізувати практично б удь-як ою мовою  Вони по трібні д ля
проектування всієї програми, а не окремих її елементів  ОСНОВИ ПА ТЕРНІВ  Щ о так е пат ерн?
#
krabatua@gmail com (#)Крім ць ого, патерни відрізняю ться і за призначенням У цій
книзі б уде розг лянут о три основні гр упипатернів :
•Породж уючі пат ерни піклуються про гнучк е створення
об’єктів без вне сення в програму зайвих залежнос тей
•Структурні пат ерни показую ть різні спос оби поб удови
зв’язків між об ’єктами
•Пове дінкові пат ерни піклуються про е фективну к омунікацію
між об ’єктами
Хто вигадав пат ерни?
За визначенням, пат ерни не вигадую ть, а радше «відкри-
вають» Ц е не якісь с упер-оригінальні рішення, а, навпаки,
типові спос оби вирішення о днієї і тієї ж проб леми, що час то
повторюю ться з неве ликими варіаціями 
Концепцію пат ернів вперше описав Кріс тофер А лександер у
книзі Мова шаб лонів Міста Бу дівлі Бу дівництво У книзі
описано «мову» д ля проектування навк олишнь ого середо-
вища, о диниці як ого— шаб лони (або патерни , що б лижче
до оригінальног о терміна patterns )— відповідаю ть на ар хі-
тектурні запитання: як ої вис оти по трібно зробити вікна, скі-
льки повер хів має б ути в б удівлі, яку площу в мікрорайоні
відве сти для дерев та газонів 
A Pattern L anguage: T owns, Buildings, C onstruction :
https:refact oringguruukpat tern-language-book ОСНОВИ ПА ТЕРНІВ  Щ о так е пат ерн?
#
krabatua@gmail com (#)Ідея видалася приваб ливою четвірці авт орів: Еріх у Гаммі,
Річар ду Хелму, Ральфу Дж онсону, Джону Вліс сідесу У 
році вони написали книгу Патерни проекту вання: повторно
використову вані е лементи ар хітектури об ’єктно-орієнто-
ваного програмного забезпе чення, до як ої увійшли  пат е-
рни, що вирішую ть різні проб леми об ’єктно-орієнт ованог о
дизайну  Назва книги б ула занадт о довг ою, щоб хт ось зміг її
запам ’ятати Т ому незабаром у сі стали називати її “book b y
the gang o f four”, тобто «книга від банди чо тирьох», а по тім і
зовсім “ GoFbook ”
З того час у було знайдено де сятки інших об ’єктних пат ернів
«Пат ерновий» підхід с тав попу лярним і в інших галузях про-
грамування, т ому зараз мо жна зу стріти різноманітні пат ерни
також за ме жами об ’єктног опроектування 
Design P atterns: Elements of R eusable Object-Oriented Sof tware:
https:refact oringguruukgo f-book ОСНОВИ ПА ТЕРНІВ  Щ о так е пат ерн?
#
krabatua@gmail com (#)Навіщо знати пат ерни?
Ви мо жете цілк ом у спішно працювати, не знаючи ж одного
патерна Більше т ого, ви мог ли вж е не раз реалізувати який-
небудь з пат ернів, навіть не підозрюючи проце
Але якраз свідоме во лодіння інс трумент ом відрізняє про-
фесіонала від амат ора Ви мо жете забити цвях мо лотком, а
можете й дрилем, якщо дуж е сильно пос тараєт есь Але про-
фесіонал знає, що г оловна фішка дриля зовсім не в ць ому
Отже, навіщо ж знати пат ерни?
•Перевірені рішення Ви витрачаєт е менше час у, вик орис то-
вуючи г отові рішення, заміс ть повт орног о винах оду ве лоси-
педа Д о деяких рішень ви мог ли б дійти й само тужки, але
багат о які з них с тануть д ля вас відкрит тям
•Стандар тизація к одуВи робит е менше прорах унків при
проектуванні, вик орис товуючи типові уніфік овані рішення,
оскільки всі прих овані в них проб леми вж е давно знайдено 
•Загальний с ловник програміс тівВи вимовляєт е назву пат е-
рна, заміс ть того, щоб г одину пояснювати іншим програмі-
стам, який кр утий дизайн ви придумали і які к ласи д ля ць ого
потрібні  ОСНОВИ ПА ТЕРНІВ  Навіщо знати пат ерни?
#
krabatua@gmail com (#)ПРИНЦИПИ
ПРОЕКТУВАННЯ
#
krabatua@gmail com (#)Якості х орошої ар хітектури
Перш ніж перейти до вивчення к онкретних пат ернів, пог о-
ворімо про сам проце с проектування, про т е, до чог о треба
прагнути і чог о потрібно уникати 
Повт орне вик ористання к оду
Не секрет , що вар тість і час розробки — це найбільш важ ли-
ві метрики при розробці б удь-яких програмних про дуктів
Чим менші обидва ці показники, тим більш к онкурентним
продукт б уде на ринку і тим більше приб утку о тримає
розробник 
Повт орне вик орис тання програмної ар хітектури та к оду—
це о дин з найбільш поширених спос обів зниж ення вар то-
сті розробки Логіка прос та: заміс ть того, щоб розроб ляти
щось повт орно , чому б не вик орис тати мину лі напрацюва-
ння у новому проекті?
Ідея виг лядає чу дово на папері, але, на жаль, не ве сь код
можна прис тосувати до робо ти в нових умовах Занадт о
тісні зв ’язки між к омпонентами, зале жність коду від к онкре-
тних к ласів, а не абс трактних інт ерфейсів, вшиті в к од опе-
рації, які немо жливо розширити, — все це зменшу є гнучкіс ть
вашої ар хітектури та перешк оджає її повт орному
викорис танню  ПРИНЦИПИ ПР ОЕКТУВАННЯ  Як ості хорошої ар хітектури
#
krabatua@gmail com (#)На допомогу прих одять пат ерни проектування, які ціною
ускладнення к оду програми підвищую ть гнучкіс ть її час тин,
що по легшу є подальше повт орне вик орис тання коду
Наве ду цитату Еріха Г амми, одного з першовідкривачів
патернів, про повт орне вик орис тання к оду та ро лі пат ернів
уньому
Існує три рівні повт орног о вик орис тання к оду На самому
нижнь ому рівні знах одяться класи: к орисні біб ліотеки к ласів,
контейнери, а так ож «команди» к ласів типу к онтейнерівіт е-
раторів
Фреймворки с тоять на найвищому рівні В них важ ливою
є тільки ар хітектура Вони визначаю ть ключові абс тракції
для вирішення деяких бізне с-завдань, пре дставлені у виг ля-
ді класів і відносин між ними Візьміть JUnit , це дуж е мале-
нький фреймворк Він міс тить у сього декілька пов ’язаних між
собою к ласів: Test,TestCase таTestSuite Зазвичай
фреймворк має набагат о більший обсяг , ніж о дин к лас Ви
вклинюєт есь у фреймворк, розширяючи дек отрі йог о класи
Все працює за так званим г олліву дським принципом: «не
телефонуйт е нам, ми самі вам зат елефону ємо» Фреймворк
дозво ляє вам задати яку сь свою пове дінку , а по тім, к оли при-
ходить черга щось робити, сам вик ликає її Т е ж саме від-
буваєть ся і в JUnit  Він звер таєть ся до вашог о класу, коли“
Erich Gamma on Fle xibility and R euse: https:refact oringguru
gamma-int ervie w ПРИНЦИПИ ПР ОЕКТУВАННЯ  Повт орне вик орис тання к оду
#
krabatua@gmail com (#)Розширюваність
Зміни часто називаю ть головним ворог омпрограміс та
•Ви придумали ідеальну ар хітектур у інт ернет -магазину , але
через місяць дове лося до дати інт ерфейс д ля замовлень
телефоном 
•Ви випу стили віде огру під Windo ws, але по тім знадобилася
підтримка macOS 
•Ви зробили інт ерфейсний фреймворк з квадратними кно-
пками, але к лієнти почали просити кругліпотрібно вик онати т ест, але вс е інше відб уваєть ся вс ередині
фреймворка 
Є ще с ередній рівень Ц е те, де я бачу пат ерни Пат ерни
проектування менші за об ’ємом та більш абс трактні, ніж фре-
ймворки Вони, насправді, є прос то опис ом того, як парочка
класів відносить ся і взаємо діє о дин з о дним Рівень повт о-
рного вик орис тання підвищу ється, к оли ви р ухаєтеся в
напрямку від к онкретних к ласів до пат ернів, а по тім до
фреймворків 
Ще одною приваб ливою рис ою ць ого середнього рівня є
те, що пат ерни — це менш ризик ований спосіб повт орног о
викорис тання, ніж фреймворки Р озробка фреймворку — це
вкрай ризик ована й дорога інве стиція У т ой ж е час пат е-
рни дозво ляють повт орно вик орис товувати ідеї та к онцепції
у відриві від к онкретног окоду
„ ПРИНЦИПИ ПР ОЕКТУВАННЯ  Р озширюваніс ть
#
krabatua@gmail com (#)У кожног о програміс та кільканадцять по дібних іс торій Є
кілька причин, чому так відбуваєть ся
По-перше, всі ми починаємо розуміти проб лему краще в
проце сі її вирішення Нерідк о до кінця робо ти над першою
версією програми ми вж е готові повніс тю її переписати,
оскільки с тали краще розуміти деякі аспекти, які не б ули
настільки нам зрозумілими спочатку  Зробивши др угу
версію , ви починаєт е розуміти проб лему ще краще, вноси-
те ще зміни і так далі — проце с не зупиняєть ся нік оли, адж е
не тільки ваше розуміння, але ще й та сама проб лема мо же
змінитися зчасом
По-др уге, зміни мо жуть прийти ззовні У вас є ідеальний
клієнт , який з першог о разу с форму лював т е, що йому по трі-
бно, а ви вс е це зробили Чу дово! Аж ось вих одить нова
версія операційної сис теми, в якій ваша програма пере-
стає працювати Бідкаючись, ви лізет е в к од, щоб вне сти
деякі зміни 
Проте, на це вс е мо жна дивитися оптиміс тично: якщо
хтось просить вас щось змінити в програмі, о тже, вона
комусь вс е ж таки ще потрібна 
Ось чому вж е навіть тро хи досвідчений програміс т проекту є
архітектур у й пише к од з урах уванням майб утніх змін ПРИНЦИПИ ПР ОЕКТУВАННЯ  Р озширюваніс ть
#
krabatua@gmail com (#)Базові принципи
проект ування
Що так е хороший дизайн? За якими крит еріями йог о оціню-
вати, і яких правил до тримуватися при розробці? Як забе-
зпечити дос татній рівень гнучк ості, зв ’язанос ті, керованос ті,
стабільнос ті та зрозумілос ті коду?
Все це правильні запитання, але д ля кожної програми від-
повідь б уде тро хи відрізнятися Давайт е розг лянемо уніве-
рсальні принципи проектування, які допомо жуть вам
форму лювати відповіді на ці запитання самос тійно 
До речі, більшіс ть пат ернів, наве дених у цій книзі, базу ється
саме на перерах ованих нижче принципах  Базові принципи
#
krabatua@gmail com (#)Інкапс улюйт е те, що змінюєтьс я
Визначт е аспекти програми, к ласу або мет оду, які змі-
нюються найчас тіше, і відокремт е їх від т ого, що зали-
шаєть сяпостійним 
Цей принцип має на меті зменшити нас лідки, вик ликані змі-
нами У явіть, що ваша програма — це к орабе ль, а зміни — то
підступні міни на йог о шлях у Натикаючись на міну , корабе-
ль заповнюєть ся во дою татоне
Знаючи це, ви мо жете розділити трюм к ораб ля на незале-
жні с екції, про ходи між якими наг лухо зачиняти Т епер піс ля
зіткнення з міною к орабе ль залишить ся на плаву  Вода зат о-
пить лише о дну с екцію , залишивши решту без змін
Ізолюючи мінливі час тини програми в окремих мо дулях,
класах або мет одах, ви зменшу єте кількіс ть коду, якого
торкнуть ся нас тупні зміни Отж е, вам по трібно б уде витра-
тити менше зу силь на т е, щоб приве сти програму до робо-
чого стану, налаг одити та про тестувати к од, що змінився
Де менше робо ти, там менша вар тість розробки А там, де
менша вар тість, там і перевага пере дконкурентами 
Прик лад інкапс уляції на рівні мет оду
Припу стімо, що ви розроб ляєте інт ернет -магазин Д есь вс е-
редині вашог о коду знах одиться мет одgetOrderTotal ,що Базові принципи  Інкапс улюйт е те, що змінюєть ся
#
krabatua@gmail com (#)розрах овує фінальну с уму замовлення з урах уванням розмі-
руподатку 
Ми мо жемо припу стити, що к од обчис лення по датків, імові-
рно, буде час то змінюватися По-перше, логіка нарах ування
податку зале жить від країни, штату й навіть міс та, в як ому
знаходиться покупець Д о того ж, розмір по датку не с талий і
може змінюватися зчасом
Через ці зміни вам дове деться пос тійно т оркатися мет о-
дуgetOrderTotal ,який, насправді, не ос обливо цікавить ся
деталями обчис лення податків 
ДО: правила об числення податків змішані з основним к одом метод у
Ви мо жете перене сти логіку обчис лення по датків в окремий
метод, прих овавши деталі від оригінальног ометодуmethodmethodgetOrderTotal (order)isis 
total= 
foreachforeach iteminorderlineItems 
total+=itemprice*itemquantity 

ifif(ordercountry =="US") 
total+=total*USsalestax 
elseelseifif(ordercountry =="EU"): 
total+=total*European VAT 

returnreturntotal  Базові принципи  Інкапс улюйт е те, що змінюєть ся
#
krabatua@gmail com (#)ПІСЛЯ: розмір податк у можна отримати, вик ликавши один метод 
Тепер зміни по датків б удуть ізо льовані в рамках о дного
методу Більш т ого, якщо логіка обчис лення по датків ще
більш у складнить ся, вам б уде легше о тримати цей мет од до
власног окласу
Прик лад інкапс уляції на рівні к ласу
Видоб ути логіку по датків до власног о класу? Якщо логіка
податків с тала занадт о складною , то чому б і ні?methodmethodgetOrderTotal (order)isis 
total= 
foreachforeach iteminorderlineItems 
total+=itemprice*itemquantity 

total+=total*getTaxAmount (ordercountry) 

returnreturntotal 

methodmethodgetTaxAmount (country)isis 
ifif(country =="US") 
returnreturnUSsalestax 
elseelseifif(country =="EU") 
returnreturnEuropean VAT 
elseelse
returnreturn  Базові принципи  Інкапс улюйт е те, що змінюєть ся
#
krabatua@gmail com (#)ДО: об числення податків у к ласізамовлень 
Об’єкти замовлень де легуватимуть обчис лення по датків
окремому об ’єкту-кальку ляторуподатків 
ПІСЛЯ: об числення податків прих овано в к ласізамовлень  Базові принципи  Інкапс улюйт е те, що змінюєть ся
#
krabatua@gmail com (#)Програмуйт е на рівні інт ерфейс у
Програмуйт е на рівні інт ерфейс у, а не на рівні реалі-
зації К од повинен зале жати від абс тракцій, а не від
конкретних класів 
Гнучкіс ть ар хітектури поб удованої на к ласах виражаєть ся в
тому, що їх мо жна легк о розширювати, не ламаючи існуючий
код Для прик ладу повернемося до к ласу котів Клас Кіт,
який їс ть тільки сар дельки, б уде менш гнучким, ніж т ой, який
може їсти будь-яку їжу  При ць ому ос таннь ого мо жна б уде
годувати й сар дельками т еж, адж е вони єїжею
Коли вам по трібно налаг одити взаємо дію між двома об ’єкта-
ми різних к ласів, т о прос тіше всього зробити о дин к лас
прямо зале жним від іншог о Що й казати, якщо , зазвичай, я
й сам з ць ого починаю  Але є й інший, більш гнучкий спосіб 
Визначт е, що саме по трібно о дному об ’єкту від іншог о, які
методи він викликає 
Потім опишіть ці мет оди в окремому інтерфейсі 
Зробіть так, щоб к лас-зале жність до тримувався ць ого інт е-
рфейс у Скоріше за вс е, по трібно б уде лише до дати цей інт е-
рфейс до опис укласу
Тепер ви мо жете зробити інший к лас зале жним від інт ерфе-
йсу, а не к онкретног окласу Базові принципи  Програмуйт е на рівні інт ерфейс у
#
krabatua@gmail com (#)До та після вилучення інтерфейс у
Код правор уч більш гнучкий, але й більш ск ладний від того к оду,
щолівор уч
Виконавши вс е це ви, імовірніше за вс е, не о тримаєт е мит тє-
вої виг оди Про те в майб утньому ви змо жете вик орис товува-
ти аль тернативні реалізації к ласів, не змінюючи к од, що їх
викорис товує
Прик лад
Розгляньмо ще о дин прик лад, де робо та на рівні інт ерфе-
йсу виявляєть ся кращою , ніж прив ’язка до к онкретних к ла- Базові принципи  Програмуйт е на рівні інт ерфейс у
#
krabatua@gmail com (#)сів У явіть, що ви робит е симу лятор софтверної к омпанії У
вас є різні к ласи працівників, які вик оную ть ту чи іншу робо-
ту вс ередині компанії 
ДО: класи ж орстк опов’язані
Спочатку к лас к омпанії ж орстко прив ’язаний до к онкретних
класів працівників Попри т е, що к ожен тип працівників
виконує різну робо ту, ми мо жемо зве сти їхні мет оди робо-
ти до о дного виду , виділивши д ля всіх к ласів загальний
інтерфейс  Базові принципи  Програмуйт е на рівні інт ерфейс у
#
krabatua@gmail com (#)Зробивши це, ми змо жемо зас тосувати по ліморфізм у к ласі
компанії, трактуючи всіх працівників о днак ово через інт е-
рфейс Employee 
КРАЩЕ: по ліморфізм допоміг спростити к од, але основний к од
компанії вс е ще залежить від к онкретних к ласів співробітників
Тим не менше, к лас к омпанії вс е ще залишаєть ся жорстко
прив ’язаним до к онкретних к ласів працівників Ц е не дуж е
добре, ос обливо , якщо припу стити, що нам знадобить ся реа-
лізувати кілька видів к омпаній У сі ці к омпанії відрізнятиму-
ться конкретними працівниками, які їм потрібні 
Ми мо жемо зробити мет од отримання працівників у базово-
му класі к омпанії абстрактним  Конкретні к омпанії повинні
самі по дбати про с творення об ’єктів співробітників Отж е,
кожен тип к омпаній змо же мати власний набір співробітни-
ків Базові принципи  Програмуйт е на рівні інт ерфейс у
#
krabatua@gmail com (#)ПІСЛЯ: основний к од класу компанії став незалежним від к ласів
співробітників К онкретних співробітників створюють к онкретні
класи компаній 
Після цієї зміни к од класу компанії с тав ос таточно неза-
лежним від к онкретних к ласів Т епер ми мо жемо до давати
до програми нові види працівників і к омпаній, не вносячи
зміни до основног о коду базовог о класукомпаній 
До речі, ви тільки що побачили прик лад о дного з пат ернів,
а саме —Фабричного метод у Надалі ми ще повернемося
донього Базові принципи  Програмуйт е на рівні інт ерфейс у
#
krabatua@gmail com (#)Віддавайт е переваг у композиції пере д
спадк уванням
Спадкування — це найпрос тіший та найшвидший спосіб
повторног о вик орис тання к оду між к ласами У вас є два
класи з к одом, який дуб люєть ся Створіть д ля них загальний
базовий к лас та перене сіть до нь ого спільну пове дінку  Що
може бути прос тішим?
Але у спадкування є і проб леми, які с тають очевидними
лише т оді, коли програма оброс ла класами, і змінити ситуа-
цію вж е досить важк о Ось деякі з мо жливих проб лем зі
спадкуванням 
•Підкласне мо же відмовитис я від інт ерфейс у або реалізації
свого батька Ви повинні б удете реалізувати всі абс трактні
методи батька, навіть якщо вони не по трібні д ля конкретно-
гопідкласу
•Перевизначаючи мет оди батька, ви повинні піклуватис я про
те, щоб не зламати базову пове дінкусуперк ласу Це важ ли-
во, адж е підк лас мо же бути вик орис таний у б удь-як ому к оді,
що працює з суперк ласом
•Спадкування порушує інкапс уляцію с уперк ласу, оскільки
підкласам дос тупні деталі батька С уперк ласи мо жуть самі
стати зале жними від підк ласів, наприк лад, якщо програміс т
вине се до с уперк ласу які-неб удь загальні деталі підк ласів,
щоб по легшити по дальше спадкування  Базові принципи  Від давайт е перевагу к омпозиції пере д спадкуванням
#
krabatua@gmail com (#)•Підкласи дуже тісно пов ’язані з батьківським к ласом Бу дь-
яка зміна в батьк ові мо же зламати пове дінку в підкласах 
•Повт орне вик орис тання к оду через нас лідування мо же при-
звести до розрос тання ієрар хії класів 
У нас лідування є аль тернатива, яка називаєть сякомпози-
цією Якщо спадкування мо жна виразити с ловом «є» (авт о-
мобіль єтранспор том), т о композицію — словом «міс тить»
(автомобіль містить двигун )
Цей принцип поширюєть ся і на агрегацію — більш вільний
вид к омпозиції, к оли два об ’єкти є рівноправними, і ж оден
з них не к ерує жит тєвим цик лом іншог о Оцініть різницю:
автомобіль містить і водія, але т ой мо же вийти й пере сісти
до іншог о авт омобіля або взагалі піти пішки самостійно 
Прик лад
Припу стімо, вам по трібно змо делювати мо дельний ряд авт о-
виробника У вас є легк ові авт омобілі та вантажівки Причо-
му вони б уваю ть з е лектричним двигуном та з двигуном на
бензині Д о того ж вони відрізняю ться ре жимами навігації —
є моделі з р учним к еруванням та автопіло том Базові принципи  Від давайт е перевагу к омпозиції пере д спадкуванням
#
krabatua@gmail com (#)СПАДКУВАННЯ: розвиток к ласів у кільк ох площинах (тип вантаж у ×
тип двигуна × тип навігації) призводить до к омбінаторного вибуху
Як бачит е, кожен такий параметр призво дить до збільшення
кільк ості класів Крім т ого, виникає проб лема дуб лювання
коду, тому що підк ласи не мо жуть у спадк овувати декільк ох
батьків одночасно 
Вирішити проб лему мо жна за допомог ою к омпозиції Замі-
сть того, щоб об ’єкти самі реалізовували ту чи іншу пове ді-
нку, вони мо жуть де легувати її іншим об ’єктам
Композиція дає вам ще й іншу перевагу  Тепер , наприк лад,
ви мо жете замінити тип двигуна авт омобіля безпос ередньо
під час вик онання програми, підс тавивши в об ’єкт транспо-
рту інший об ’єктдвигуна  Базові принципи  Від давайт е перевагу к омпозиції пере д спадкуванням
#
krabatua@gmail com (#)КОМПОЗИЦІЯ: різні види ф ункціональності виділені у власні
ієрар хіїкласів 
Така с труктура влас тива пат ерну Стратегія , про який ми т еж
поговоримо у цій книзі  Базові принципи  Від давайт е перевагу к омпозиції пере д спадкуванням
#
krabatua@gmail com (#)Принципи SOLID
Розглянемо ще п ’ять принципів проектування, які відомі як
SOLID  Вперше ці принципи б ули описані Р обер том Мар ті-
ном у книзі Agile Sof tware Dev elopment, Principles, P atterns,
and Practic es
Досягти так ої лак онічнос ті у назві вдалося шлях ом вик о-
ристання неве личких хитрощів Справа в т ому, що т ермін
SOLID — це абревіатура, за к ожною б уквою як ої стоїть окре-
мий принцип проектування 
Головна мета цих принципів — підвищити гнучкіс ть вашої
архітектури, зменшити пов ’язаніс ть між її к омпонентами та
полегшити повт орне вик орис тання коду
Але, як і вс е в ць ому жит ті, до тримання цих принципів має
свою ціну  Тут це, зазвичай, виражаєть ся ускладненням к оду
програми У реальному жит ті немає, маб уть, так ого коду,
в як ому до тримувалися б у сі ці принципи відразу  Тому
пам’ятайт е про баланс і не сприймайт е вс е вик ладене
якдогму 
Agile Sof tware Dev elopment, Principles, P atterns, and Practic es:
https:refact oringguruukprinciples-book Принципи SOLID
#
krabatua@gmail com (#)SПринцип єдиног о обов' язку
ingle R esponsibilit y Principle
Клас має мати лише о дин мо тив д лязміни 
Намагайт есь досяг ти того, щоб к ожен клас відповідав тільки
за одну час тину ф ункціональнос ті програми, причому вона
повинна б ути повніс тю інкапс ульована в цей к лас (читай,
прихована вс ередині к ласу)
Принцип єдиног о обов ’язку призначений д ля боро тьби зі
складніс тю Коли у вашій програмі всь ого  рядків, т о
дизайн, як такий, взагалі не по трібен Д остатнь о охайно
написати - мет одів, і вс е буде добре Проб леми виникаю-
ть тоді, коли сис тема рос те та збільшу ється в масштабах
Коли к лас розрос таєть ся, він прос то пере стає вміщувати-
ся в г олові Навігація у складнюєть ся, на очі по трапляю ть
непо трібні деталі, пов ’язані з іншим аспект ом, в резу льтаті
кількіс ть понять починає перевищувати мозк овий с тек, і ви
втрачаєт е контро ль над кодом
Якщо к лас робить занадт о багат о речей о дразу , вам дово ди-
ться змінювати йог о щоразу , коли одна з цих речей змінює-
ться При ць ому є ризик пошк одження інших час тин к ласу,
яких ви навіть не планували торкатися 
Добре мати мо жливіс ть зос ередитися на ск ладних аспектах
системи окремо  Але, якщо вам ск ладно це робити, зас тосо- Принципи SOLID  S: Принцип єдиног о обов' язку
#
krabatua@gmail com (#)вуйте принцип єдиног о обов ’язку, розділяючи ваші к ласи на
частини 
Прик лад
Клас Employee має відразу кілька причин д ля зміни Перша
пов’язана з г оловним завданням к ласу— керуванням дани-
ми співробітника А ле є й інша: зміни, пов ’язані з формату-
ванням звіту д ля др уку, зачіпатимуть к лас співробітників
ДО: клас співробітник а містить різнорідні поведінки 
Проб лему мо жна вирішити, виділивши операцію др уку в
окремий клас
ПІСЛЯ: зайва поведінк а переїх ала до власного класу Принципи SOLID  S: Принцип єдиног о обов' язку
#
krabatua@gmail com (#)OПринцип відкрит остізакрит ості
penClosed P rinciple
Розширюйт е класи, але не змінюйт е їхній початк о-
вийкод
Прагніть досяг ти того, щоб к ласи б ули відкритими д ля роз-
ширення, але закритими д ля зміни Г оловна ідея ць ого
принципу в т ому, щоб не ламати існуючий к од при вне сенні
змін до програми 
Клас мо жна назвати відкритим, якщо він дос тупний д ля роз-
ширення Наприк лад, у вас є мо жливіс ть розширити набір
операцій або до дати до нь ого нові по ля, створивши власний
підклас
У той ж е час, к лас мо жна назвати закритим (а краще ска-
зати закінченим ), якщо він г отовий до вик орис тання іншими
класами — йог о інтерфейс вж е остаточно визначено , і він не
змінюватиметь ся вмайб утньому
Якщо к лас уж е був написаний, с хвалений, про тестований,
можливо , вне сений до біб ліотеки і вк лючений до проекту ,
не бажано намагатися мо дифікувати йог о вміс т після ць ого
Заміс ть ць ого ви мо жете створити підк лас і розширити в
ньому базову пове дінку , не змінюючи к од батьківськ ого
класу безпос ередньо Принципи SOLID  O: Принцип відкрит остізакрит ості
#
krabatua@gmail com (#)Але не вар то дотримуватись ць ого принципу б уквально д ля
кожної зміни Якщо вам по трібно виправити помилку в поча-
тковому к ласі, прос то візьміть і зробіть це Немає с енсу вирі-
шувати проб лему батька в дочірнь омукласі
Прик лад
Клас замовлень має мет од розрах унку вар тості дос тавки,
причому спос оби дос тавки «зашиті» безпос ередньо в сам
метод Якщо вам по трібно б уде до дати новий спосіб дос та-
вки— дове деться зачіпати ве сь класOrder
ДО: код класу замовлення потрібно б уде змінювати при додаванні
нового спос обудоставки 
Проб лему мо жна вирішити, якщо зас тосувати пат ернСтра-
тегія  Для ць ого потрібно виділити спос оби дос тавки у вла-
сні к ласи з загальним інтерфейс ом Принципи SOLID  O: Принцип відкрит остізакрит ості
#
krabatua@gmail com (#)ПІСЛЯ: нові спос оби доставки мо жна додати, не зачіпаю чи
класзамовлень 
Тепер при до даванні новог о спос обу дос тавки по трібно б уде
реалізувати новий к лас інт ерфейс у дос тавки, не зачіпаючи
класу замовлень Об ’єкт спос обу дос тавки до к ласу замовле-
ння б уде по давати к лієнт ський к од, який раніше вс тановлю-
вав спосіб дос тавки прос тимрядк ом
Бону с цього рішення в т ому, що розрах унок час у та дати
доставки т еж мо жна поміс тити до нових к ласів, підк оряючи-
сь принципу єдиног о обов ’язку Принципи SOLID  O: Принцип відкрит остізакрит ості
#
krabatua@gmail com (#)LПринцип підстановки Ліск ов
iskov Substitution P rinciple
Підкласи повинні доповнювати, а не підміняти пове ді-
нку базовог окласу
Намагайт есь створювати підк ласи таким чином, щоб їхні
об’єкти мо жна б уло б підс тавляти заміс ть базовог о класу, не
ламаючи при ць ому ф ункціональніс ть клієнт ськогокоду
Принцип підс тановки — це ряд перевірок, які допомагаю-
ть пере дбачити, чи залишить ся підк лас с умісним з іншим
кодом програми, який у спішно працював до ць ого, вик о-
ристовуючи об ’єкти базовог о класу Особливо це важ ливо
під час розробки біб ліотек та фреймворків, к оли ваші к ласи
викорис товую ться іншими лю дьми, а ви не змо жете вплива-
ти на чужий к лієнт ський к од, навіть якщо б захотіли
На відміну від інших принципів, які визначено дуж е вільно ,
і вони маю ть безліч трактувань, принцип підс тановки має
певні формальні вимоги до підк ласів, а т очніше, до мет одів,
перевизначених вних
Принцип названо на че сть Барбари Ліск ов, к отра вперше
сформу лювала йог о у  році у робо тіData abstraction and hierarchy :
https:refact oringgurulisk ovdah Принципи SOLID  L: Принцип підс тановки Ліск ов
#
krabatua@gmail com (#)•Типи параметрів мет оду підк ласу повинні збігатис яабо
бутибільш абстрактними , ніж типи параметрів базовог о
методуЗвучить заплутано? Р озглянемо , все на прик ладі
◦Базовий к лас має мет одfeed(Cat c) ,який вміє г одувати
хатніх к отів Клієнт ський к од це знає і завж ди пере дає до
методукота
◦Добре: Ви створили підк лас і перевизначили мет од году-
вання так, щоб наг одувати б удь-яку тварину:
feed(Animal c) Якщо підс тавити цей к лас у к лієнт ський
код— нічог о поганог о не с танеть ся Клієнт ський к од
подасть до мет оду кота, але мет од вміє г одувати всіх тва-
рин, т ому наг одуєікота
◦Погано: Ви створили інший підк лас, в як ому є мет од, що
вміє г одувати вик лючно бенгаль ську поро ду котів (під-
клас к отів): feed(BengalCat c) Що буде з к лієнт ським
кодом? Він так само по дасть до мет оду звичайног о кота,
проте мет од вміє г одувати тільки бенгалів, т ому не змо же
відпрацювати, " зламавши" к лієнт ський код
•Тип значення мет оду підк ласу, що повер таєть ся, повинен
збігатис яабо б утипідтипом значення базовог о мет оду, що
повер таєть сяТут вс е те саме, що і в попере дньому пункті,
аленавпаки 
◦Базовий мет од:buyCat(): Cat Клієнт ський к од очіку є на
виході будь-як ого хатнь огокота Принципи SOLID  L: Принцип підс тановки Ліск ов
#
krabatua@gmail com (#)◦Добре: Метод підк ласу: buyCat(): BengalCat Кліє-
нтський к од отримає бенгаль ського кота, який є хатнім
котом, т ому вс е будедобре 
◦Погано: Метод підк ласу:buyCat(): Animal Клієнт ський
код "зламаєть ся", оскільки незрозуміла тварина (мо жливо ,
крок одил) не поміс титься у ящику д ля перене сення котів
Ще один анти-прик лад зі світу мов з динамічною типіза-
цією: базовий мет од повер тає рядок, а перевизначений
метод—число
•Метод не повинен викидати вик лючення, які не влас тиві
базовому мет одуТипи вик лючень у перевизначеному мет о-
ді повинні збігатися або б ути підтипами вик лючень, які
викидаю ть базовий мет од Блоки try-catch у клієнт сько-
му коді спрямовані на к онкретні типи вик лючень, що вики-
даються базовим мет одом Т ому не сподіване вик лючення,
викинут е підк ласом, мо же проск очити скрізь обробника
клієнт ського коду та призве сти до збою в програмі 
У більшос ті сучасних мов програмування, ос обливо
строго типізованих (Java, C# та інші), перерах овані
обме ження вб удовано безпос ередньо у к омпілят ор
Тому при їхнь ому пор ушенні ви не змо жете зібрати
програму  Принципи SOLID  L: Принцип підс тановки Ліск ов
#
krabatua@gmail com (#)•Метод не повинен посилювати перед -умови Наприк лад,
базовий мет од працює з параметром типу intЯкщо під-
клас вимагає, щоб значення ць ого параметра б уло більшим
за ну ль, то це посилює вимоги пере думови Клієнт ський к од,
який до ць ого відмінно працював, по даючи до мет оду нега-
тивні чис ла, тепер зламаєть ся при робо ті з об ’єктомпідкласу
•Метод не повинен пос лаблювати пост -умови Наприк лад,
базовий мет од вимагає, щоб піс ля завершення мет оду всі
підключення до бази даних б уло закрит о, а підк лас зали-
шає ці підк лючення відкритими, щоб по тім вик орис товува-
ти повт орно  Про те клієнт ський к од базовог о класу нічог о
про це не знає Він мо же завершити програму відразу піс ля
виклику мет оду, залишивши в сис темі запущені проце си-
привиди
•Інваріанти к ласу повинні залишитис я без змін Інваріант —
це набір умов, за яких об ’єкт має с енс Наприк лад, інваріант
кота— це наявніс ть чо тирьох лап, хвос та, здатніс ть мурк о-
тіти та інше Інваріант мо же бути описано не тільки явно ,
контракт ом або перевірками в мет одах к ласу, але й побічно ,
наприк лад, юніт -тестами або к лієнт ським кодом
Цей пункт легше за вс е пор ушити при спадкуванні, оскільки
ви мо жете прос то не підозрювати про існування як оїсь з
умов інваріанта ск ладног о класу Ідеальним б ув би підк лас,
який тільки вво дить нові мет оди й по ля, не т оркаючись по лів
базовог окласу Принципи SOLID  L: Принцип підс тановки Ліск ов
#
krabatua@gmail com (#)•Підк лас не повинен змінювати значення приватних полів
базовог о класу Цей пункт мо же звучати дивно , але в деяких
мовах програмування дос туп до приватних по лів мо жна
отримати через ме ханізм ре флексії В інших мовах, на кшта-
лт Python та JavaScript , зовсім немає ж орсткого захис ту при-
ватних полів
Прик лад
Щоб закрити т ему принципу підс тановки, давайт е розг ляне-
мо прик лад невдалої ієрар хії класів документів 
ДО: підк лас «обну ляє» роботу базового метод у
Метод збере ження в підк ласі ReadOnlyDocuments викине
винят ок, якщо хт ось намагатиметь ся вик ликати йог о мет од Принципи SOLID  L: Принцип підс тановки Ліск ов
#
krabatua@gmail com (#)збере ження Базовий мет од не має так ого обме ження Т ому
клієнт ський к од змушений перевіряти тип документа під час
збере ження всіх документів 
При ць ому пор ушується ще й принцип відкрит остізакрит о-
сті, оскільки к лієнт ський к од починає зале жати від к онкре-
тного класу, який не мо жна замінити на інший, не вносячи
змін до к лієнт ськогокоду
ПІСЛЯ: підк лас розширює базовий к лас новою поведінк ою
Проб лему мо жна вирішити, якщо перепроектувати ієрар хію
класів Базовий к лас змо же тільки відкривати документи,
але не матиме змоги зберігати їх Підк лас, який т епер нази-
ватиметь сяWritableDocument ,розширить пове дінку батькі-
вського класу, дозво ливши зберег тидокумент  Принципи SOLID  L: Принцип підс тановки Ліск ов
#
krabatua@gmail com (#)IПринцип поділу інт ерфейс у
nterfac e Segregation P rinciple
Клієнти не повинні зале жати від мет одів, які вони не
викорис товую ть
Прагніть досяг ти того, щоб інт ерфейси б ули досить вузьки-
ми, а к ласам не дово дилося б реалізовувати надмірну
пове дінку 
Принцип по ділу інт ерфейсів каж е про т е, що занадт о
«товсті» інт ерфейси не обхідно розділяти на більш маленькі
й специфічні, щоб к лієнти маленьких інт ерфейсів знали
тільки про мет оди, не обхідні їм д ля робо ти В резу льтаті при
зміні мет оду інт ерфейс у не повинні змінюватися к лієнти, які
цей мет од не вик орис товую ть
Успадкування дозво ляє к ласу мати тільки о дин с уперк лас,
але не обме жує кількіс ть інт ерфейсів, які він мо же реалі-
зувати Більшіс ть об ’єктних мов програмування дозво ляю-
ть класам реалізовувати відразу кілька інт ерфейсів, т ому
немає по треби зашт овхувати у ваш інт ерфейс більше пове-
дінок, ніж він т ого по требує Ви завж ди мо жете присвоїти
класу відразу кілька менших інтерфейсів  Принципи SOLID  I: Принцип по ділу інт ерфейс у
#
krabatua@gmail com (#)Прик лад
Уявіть біб ліотеку д ля робо ти з хмарним провайдерами У
першій версії вона підтримувала тільки Amaz on, який має
повний набір хмарних пос луг На підс таві ць ого й проекту-
вався інт ерфейс майб утніх класів 
Але пізніше с тало зрозуміло , що такий інт ерфейс хмарног о
провайдера занадт о широкий, оскільки є інші провайдери,
які реалізую ть тільки час тину з у сіх дос тупних сервісів 
ДО: не всі к лієнти мо жуть реалізу вати операції інтерфейс у
Щоб не пло дити к ласи з поро жньою реалізацією , роздутий
інтерфейс мо жна розбити на час тини Класи, які б ули здатні Принципи SOLID  I: Принцип по ділу інт ерфейс у
#
krabatua@gmail com (#)реалізувати всі операції с тарог о інтерфейс у, можуть реалізу-
вати відразу кілька нових час ткових інтерфейсів 
ПІСЛЯ: розд утий інтерфейс розбитий на частини  Принципи SOLID  I: Принцип по ділу інт ерфейс у
#
krabatua@gmail com (#)DПринцип інверсії зале жност ей
ependenc y Inv ersion P rinciple
Класи вер хніх рівнів не повинні зале жати від к ласів
нижніх рівнів Обидва повинні зале жати від абс тра-
кцій Абс тракції не повинні зале жати від деталей
Деталі повинні зале жати від абстракцій 
Зазвичай під час проектування програм мо жна виділити два
рівні класів 
•Класи нижнь ого рівня реалізую ть базові операції на зразок
робо ти з диск ом, пере дачі даних мере жею, підк лючення до
бази даних таінше 
•Класи вис окого рівня містять ск ладну бізне с-логіку програ-
ми, що спираєть ся на к ласи низьк ого рівня д ля здійснення
більш прос тихоперацій 
Здебільшог о ви спочатку проекту єте класи нижнь ого рівня, а
потім берет есь за вер хній рівень При так ому підх оді класи
бізне с-логіки с тають зале жними від більш примітивних
низьк орівневих к ласів К ожна зміна в низьк орівневому
класі мо же зачепити к ласи бізне с-логіки, які йог о вик ори-
стовую ть
Принцип інверсії зале жнос тей пропону є змінити напрямок,
в якому відб уваєть сяпроектування  Принципи SOLID  D: Принцип інверсії зале жнос тей
#
krabatua@gmail com (#)Для початку вам по трібно описати інт ерфейс низьк орівне-
вих операцій, які по трібні к ласу бізне с-логіки
Це дозво лить вам прибрати зале жність класу бізне с-логі-
ки від к онкретног о низьк орівневог о класу, замінивши її
«м’якою» зале жністю від інтерфейс у
Низьк орівневий к лас, у свою чергу , стане зале жним від інт е-
рфейс у, визначеног о бізне с-логік ою
Принцип інверсії зале жнос тей час то йде в ногу з принципом
відкрит остізакрит ості: ви змо жете розширювати низьк орі-
вневі к ласи і вик орис товувати їх разом з к ласами бізне с-
логіки, не змінюючи к одостанніх 
Прик лад
У цьому прик ладі вис окорівневий к лас формування бю дже-
тних звітів прямо вик орис товує клас бази даних д ля зава-
нтаж ення і збере ження своєї інформації 
ДО: вис окорівневий к лас залежить від низьк орівневого  Принципи SOLID  D: Принцип інверсії зале жнос тей
#
krabatua@gmail com (#)Ви мо жете виправити проб лему , створивши вис окорівневий
інтерфейс д ля завантаж еннязбере ження даних і прив ’язати
до нь ого клас звітів Низьк орівневі к ласи повинні реалізува-
ти цей інт ерфейс, щоб їх об ’єкти мо жна б уло вик орис товува-
ти вс ередині об ’єкта звітів 
ПІСЛЯ: низьк орівневі к ласи залеж ать від вис окорівневої абстракції 
Таким чином, змінюєть ся напрямок зале жнос ті Якщо рані-
ше вис окий рівень зале жав від низьк ого, то зараз вс е навпа-
ки: низьк орівневі к ласи зале жать від вис окорівневог о
інтерфейс у Принципи SOLID  D: Принцип інверсії зале жнос тей
#
krabatua@gmail com (#)КАТАЛОГ
ПАТЕРНІВ
#
krabatua@gmail com (#)Породж увальні пат ерни
проект ування
Спис ок поро джувальних пат ернів проектування, які відпо-
відаю ть за зр учне та безпечне с творення нових об 'єктів або
навіть цілих сімейс тв об 'єктів
Фабричний мет од
Factory Method
Визначає загальний інт ерфейс д ля створення об 'єктів у с упе-
ркласі, дозво ляючи підк ласам змінювати тип с творюваних об '-
єктів
Абстрактна фабрика
Abstract Fact ory
Дає змогу с творювати сімейс тва пов ’язаних об ’єктів, не
прив ’язуючись до к онкретних к ласів с творюваних об ’єктів Поро джувальні пат ерни проектування
#
krabatua@gmail com (#)Будіве льник
Builder
Дає змогу с творювати ск ладні об 'єкти крок за крок ом Бу діве-
льник дає мо жливіс ть вик орис товувати о дин і т ой самий к од
будівництва д ля отримання різних відображ ень об 'єктів
Прототип
Prototype
Дає змогу к опіювати об 'єкти, не вдаючись у по дробиці
їхньоїреалізації
Одинак
Singlet on
Гаранту є, що к лас має лише о дин екземпляр , та надає г лоба-
льну т очку дос тупу до нь ого Поро джувальні пат ерни проектування
#
krabatua@gmail com (#)ФАБРИЧНИЙ
МЕТОДТакож відомий як: Вірту альний к онстр уктор ,Factory Me thod
Фабричний мет од — це поро джувальний пат ерн
проектування, який визначає загальний інт ерфейс д ля
створення об ’єктів у с уперк ласі, дозво ляючи підк ласам
змінювати тип с творюваних об’єктів Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Проблема
Уявіть, що ви с творюєт е програму к ерування вантажними
перевезеннями Спочатку ви плану єте перевезення т оварів
тільки вантажними авт омобілями Т ому ве сь ваш к од працює
з об’єктами к ласуВантажівка 
Згодом ваша програма с тає нас тільки відомою , що морські
перевізники шикую ться в чергу і б лагаю ть до дати до програ-
ми підтримку морськ оїлогіс тики
Додати новий к лас не так просто , якщо весь к од вж е залежить від
конкретних класів 
Чудові новини, чи не так?! А ле як що до коду? Ве лика час ти-
на існуючог о коду жорстко прив ’язана до к ласів Вантажівок 
Щоб до дати до програми к ласи морських Суден,знадоби-
ться пере лопачувати ве сь код Якщо ж ви вирішит е додати
до програми ще о дин вид транспор ту, тоді всю цю робо ту
дове детьсяповторити  Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)У підс умку ви о тримаєт е жах ливий к од, переповнений умо-
вними операт орами, що вик оную ть ту чи іншу дію в зале-
жнос ті від вибраног о класутранспор ту
Рішення
Патерн Фабричний мет од пропону є відмовитись від безпо-
середнього створення об ’єктів за допомог ою операт ора new,
замінивши йог о вик ликом ос обливог офабричного методу
Не лякайт еся, об ’єкти вс е одно б удуть с творюватися за допо-
могоюnew,але робити це б уде фабричний метод
Підкласи мо жуть змінювати к лас створюваних об’єктів
На перший пог ляд це мо же здатись безг луздим — ми прос то
переміс тили вик лик к онструктора з о дного кінця програми
в інший Про те тепер ви змо жете перевизначити фабричний
метод у підк ласі, щоб змінити тип с творюваног опродукту 
Щоб ця сис тема запрацювала, всі об ’єкти, що повер таються,
повинні мати спільний інт ерфейс Підк ласи змо жуть виг о- Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)товляти об ’єкти різних к ласів, що відповідаю ть одному і т ому
самому інтерфейс у
Всі об ’єкти-прод укти повинні мати спільний інтерфейс 
Наприк лад, к ласи Вантажівка іСуднореалізую ть інт ерфейс
Транспорт з мет одом доставити Кожен з цих к ласів реалі-
зує мет од по-своєму: вантажівки перевозять вантажі с ушею ,
а с удна — морем Фабричний мет од к ласу
ДорожноїЛогістики поверне об ’єкт-вантажівку , а к ласу
МорськоїЛогістики — об ’єкт-судно Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Допоки всі прод укти реалізують спільний інтерфейс, їхні об ’єкти
можна змінювати один на інший у к лієнтськ омукоді
Клієнт фабричног о мет оду не відчу є різниці між цими
об’єктами, адж е він трактуватиме їх як якийсь абс трактний
Транспорт 
Для нь ого буде важ ливим, щоб об ’єкт мав мет оддоставити ,
а не т е, як к онкретно він працює  Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Структура
Продукт визначає загальний інт ерфейс об ’єктів, які мо же
створювати творець та йог опідкласи
Конкретні продукти містять к од різних про дуктів Про ду-
кти відрізнятимуть ся реалізацією , але інт ерфейс у них б уде
спільним 
Творець оголошу є фабричний мет од, який має повер тати
нові об ’єкти про дуктів Важ ливо , щоб тип резу льтату ць ого
методу співпадав із загальним інт ерфейс омпродуктів 
Зазвичай, фабричний мет од оголошую ть абс трактним, щоб
змусити всі підк ласи реалізувати йог о по-своєму  Однак він
може так ож повер тати про дукт за замовчуванням Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Незважаючи на назву , важ ливо розуміти, що с творення про-
дуктів не є єдиною і г оловною ф ункцією творця Зазвичай
він міс тить ще й інший к орисний к од для робо ти з про-
дуктом Аналогія: у ве ликій с офтверній к омпанії мо же бути
центр підг отовки програміс тів, але вс е ж таки основним зав-
данням к омпанії залишаєть ся написання к оду, а не навчання
програміс тів
Конкретні творці по-своєму реалізую ть фабричний мет од,
вироб ляючи ті чи інші к онкретні продукти 
Фабричний мет од не зобов ’язаний с творювати нові об ’єкти
увесь час Йог о можна переписати так, аби повер тати з як о-
гось с ховища або к ешу вж е існуючі об ’єкти
Псевдок од
У цьому прик ладі Фабричний мет оддопомагає с творюва-
ти крос -плат формові е лементи інт ерфейс у, не прив ’язуючи
основний к од програми до к онкретних к ласів к ожног о
елементу 
Фабричний мет од оголошений у к ласі діалогів Йог о підк ла-
си нале жать до різних операційних сис тем Завдяки фабри-
чному мет оду, вам не по трібно перепис увати логіку діалогів
під к ожну сис тему Підк ласи мо жуть у спадкувати майж е
увесь код базовог о діалогу , змінюючи типи кнопок та інших
елементів, з яких базовий к од будує вікна графічног о кори-
стуваць огоінтерфейс у Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Прик лад крос -платформового діалогу 
Базовий к лас діалогів працює з кнопками через їхній зага-
льний програмний інт ерфейс Незале жно від т ого, яку варіа-
цію кнопок повернув фабричний мет од, діалог залишить ся
робочим Базовий к лас не зале жить від к онкретних к ласів
кнопок, залишаючи підк ласам прийнят тя рішення про тип
кнопок, які не обхідно створити 
Такий підхід мо жна зас тосувати і д ля створення інших е ле-
ментів інт ерфейс у Хоча к ожен новий тип е лементів наб ли-
жатиме вас до Абстрактної фабрики 
ПатернФабричний методмаєсенслишетоді,коливпрограмі є 
ієрархія класівпродуктів 
interfaceinterface ButtonButtonisis 
methodmethodrender()  Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)methodmethodonClick(f) 

classclassWindowsButtonWindowsButton implementsimplements Buttonisis 
methodmethodrender(a,b)isis 
Відобразити кнопкувстиліWindows 
methodmethodonClick(f)isis 
Навісити накнопкуобробник подійWindows 

classclassHTMLButtonHTMLButton implementsimplements Buttonisis 
methodmethodrender(a,b)isis 
Повернути HTML-код кнопки 
methodmethodonClick(f)isis 
Навісити накнопкуобробник подіїбраузера 


Базовий класфабрики Зауважте, що"фабрика" —цевсьоголише 
додаткова рольдляцьогокласуСкоріше завсе,вінвжемає 
якусьбізнес-логіку, якапотребує створення продуктів 
classclassDialogDialogisis 
methodmethodrender()isis 
Щобвикористати фабричний метод,вимаєте 
пересвідчитися, щоцябізнес-логіка незалежить від 
конкретних класівпродуктів Button—цезагальний 
інтейрфейс кнопок, томувсегаразд 
ButtonokButton =createButton() 
okButton onClick(closeDialog ) 
okButton render() 

Мивиносимо веськодстворення продуктів доособливого 
методу, якийназивають "фабричним" 
abstractabstract methodmethodcreateButton ():Button 
 Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)
Конкретні фабрики перевизначають фабричний методіповертають 
зньоговласніпродукти 
classclassWindowsDialogWindowsDialog extendsextends Dialogisis 
methodmethodcreateButton ():Buttonisis 
returnreturnnewnewWindowsButton () 

classclassWebDialogWebDialog extendsextends Dialogisis 
methodmethodcreateButton ():Buttonisis 
returnreturnnewnewHTMLButton () 


classclassApplicationApplication isis 
fieldfielddialog:Dialog 

Програма створює певнуфабрику взалежності від 
конфігурації абооточення 
methodmethodinitialize ()isis 
config=readApplicationConfigFile () 

ifif(configOS=="Windows" )thenthen 
dialog=newnewWindowsDialog () 
elseelseifif(configOS=="Web")thenthen 
dialog=newnewWebDialog () 
elseelse 
throwthrownewnewException ("Error! Unknown operating system" ) 

Якщовесьіншийклієнтський кодпрацюєзфабриками та 
продуктами тількичереззагальний інтерфейс, тодлянього 
байдуже, якоготипуфабрику булостворено напочатку 
methodmethodmain()isis 
thisthisinitialize ()  Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Застосування
Коли типи і зале жнос ті об ’єктів, з якими повинен працювати
ваш к од, невідомі заздалегідь 
Фабричний мет од відокремлює к од виробництва про дуктів
від решти к оду, який вик орис товує ціпродукти 
Завдяки ць ому к од виробництва мо жна розширювати, не
зачіпаючи основний к од Щоб до дати підтримку новог о про-
дукту , вам по трібно с творити новий підк лас та визначити
в нь ому фабричний мет од, повер таючи звідти екземпляр
новог опродукту 
Коли ви х очет е надати к орис тувачам мо жливіс ть розширю-
вати час тини вашог о фреймворк у чи бібліо теки
Корис тувачі мо жуть розширювати к ласи вашог о фреймво-
рку через у спадкування А ле як ж е зробити так, аби фре-
ймворк с творював об ’єкти цих к ласів, а не с тандар тних?
Рішення по лягає у т ому, щоб надати к орис тувачам мо жливі-
сть розширювати не лише бажані к омпоненти, але й к ласи,
які їх с творюю ть Тому ці к ласи повинні мати к онкретні с тво-
рюючі мет оди, які мо жна б уде перевизначитиdialogrender() 




 Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Наприк лад, ви вик орис товуєте готовий UI-фреймворк д ля
свого додатку  Але— от халепа — вам не обхідно мати кр у-
глі кнопки, а не с тандар тні прямокутні Ви с творюєт е клас
RoundButton Але як сказати г оловному к ласу фреймворку
UIFramework ,щоб він почав т епер с творювати кр углі кнопки
заміс ть стандар тних прямокутних?
Для ць ого з базовог о класу фреймворку ви с творюєт е під-
клас UIWithRoundButtons ,перевизначаєт е в нь ому мет од
створення кнопки (а-ля, createButton )і впис уєте туди ство-
рення свог о к ласу кнопок По тім вик орис товуєте
UIWithRoundButtons заміс ть стандар тногоUIFramework 
Коли ви х очет е зек ономити сис темні ре сурси, повт орно
викорис товуючи вж е створені об ’єкти, заміс ть породж е-
ннянових 
Така проб лема зазвичай виникає під час робо ти з «важки-
ми», вимог ливими до ре сурсів об ’єктами, такими, як підк лю-
чення до бази даних, файлової сис теми й подібними 
Уявіть, скільки дій вам по трібно зробити, аби повт орно вик о-
ристовувати вж е існуючі об ’єкти:
Спочатку с лід с творити загальне с ховище, щоб зберігати в
ньому всі с творювані об ’єкти
При запиті новог о об’єкта по трібно б уде по дивитись у с хови-
ще та перевірити, чи є там невик орис таний об ’єкт
 Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Потім повернути йог о клієнт ськомукоду
Але якщо ж вільних об ’єктів немає, с творити новий, не заб у-
вши до дати йог о до сховища 
Увесь цей к од потрібно де сь розміс тити, щоб не засмічувати
клієнт ський код
Найзр учнішим місцем б ув би к онструктор об ’єкта, адж е всі
ці перевірки по трібні тільки під час с творення об ’єктів, але,
на жаль, к онструктор завж ди створює нові об’єкти, т ому він
не мо же повернути існуючий екземпляр 
Отже, має б ути інший мет од, який би від давав як існуючі, так
і нові об ’єкти Ним і с тане фабричний метод
Кроки реалізації
Приве діть у сі с творювані про дукти до загальног о
інтерфейс у
Створіть поро жній фабричний мет од у к ласі, який вироб ляє
продукти В як ості типу , що повер таєть ся, вкажіть загальний
інтерфейс продукту 
Пройдіть ся по к оду класу й знайдіть у сі ділянки, що с тво-
рюють про дукти По черзі замініть ці ділянки вик ликами
фабричног о мет оду, переносячи в нь ого код створення
різних продуктів  Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)Можливо , дове деться до дати до фабричног о мет оду декі-
лька параметрів, що к онтро люють, який з про дуктів по трі-
бностворити 
Імовірніше за вс е, фабричний мет од виг лядатиме гнітюче
на ць ому етапі В нь ому житиме ве ликий умовний операт ор,
який вибирає к лас с творюваног о про дукту  Але не хвилю-
йтеся, ми ось-ось вс е це виправимо 
Для кожног о типу про дуктів заве діть підк лас і перевизначт е
в ньому фабричний мет од З с уперк ласу переміс тіть ту ди код
створення відповідног опродукту 
Якщо с творюваних про дуктів занадт о багат о для існуючих
підкласів творця, ви мо жете подумати про вве дення пара-
метрів до фабричног о мет оду, аби повер тати різні про дукти
в межах о дногопідкласу
Наприк лад, у вас є к лас Поштаз підк ласами АвіаПошта і
НаземнаПошта ,а так ож класи про дуктів Літак,Вантажівка й
ПотягАвіавідповідає Літакам ,але д ляНаземноїПошти є
відразу два про дукти Ви мог ли б с творити новий підк лас
пошти й д ля по тягів, але проб лему мо жна вирішити по-іншо-
му Клієнт ський к од мо же пере давати до фабричног о мет о-
дуНаземноїПошти аргумент , що к онтро лює, який з про дуктів
будестворено 
Якщо піс ля цих всіх переміщень фабричний мет од став
поро жнім, мо жете зробити йог о абс трактним Якщо ж у Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)ньому щось залишилося — не с трашно , це б уде йог о типо-
вою реалізацією (за замовчуванням)
Переваги та не доліки
Позбавляє к лас від прив ’язки до к онкретних к ласів
продуктів 
Виділяє к од виробництва про дуктів в о дне місце, спрощую-
чи підтримку коду
Спрощу є додавання нових про дуктів до програми 
Реалізу єпринцип відкритостізакритості 
Може призве сти до с творення ве ликих парале льних ієра-
рхій к ласів , адж е для кожног о класу про дукту по трібно с тво-
рити власний підк ластворця 
Відносини з іншими пат ернами
•Багат о архітектур починаю ться із зас тосування Фабрично-
го мет оду (прос тішог о та більш розширюваног о за допомо-
гою підк ласів) та ево люціоную ть у бік Абстрактної фабрики ,
Прототипу абоБудівельника (гнучкіших, але й складніших )
•Класи Абстрактної фабрики найчас тіше реалізую ться за
допомог оюФабричног о мет оду, хоча вони мо жуть б ути
побудовані і на основі Прототипу 





 Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)•Фабричний мет одможна вик орис товувати разом з Ітерат о-
ром, щоб підк ласи к олекцій мог ли створювати не обхідні їм
ітератори
•Прототипне спираєть ся на спадкування, але йому по трібна
складна операція ініціалізації Фабричний мет од, навпаки,
побудований на спадкуванні, але не вимагає ск ладної іні-
ціалізації
•Фабричний мет одможна розг лядати як окремий випадок
Шаблонног о мет оду Крім т ого,Фабричний метод нерідк о
буває час тиною ве ликого класу зШаблонними методами  Поро джувальні пат ерни проектування  Фабричний мет од
#
krabatua@gmail com (#)АБСТРАКТНА
ФАБРИК АТакож відомий як: Abstract Factory
Абстрактна фабрика — це поро джувальний пат ерн
проектування, що дає змогу с творювати сімейс тва
пов’язаних об ’єктів, не прив ’язуючись до к онкретних к ласів
створюваних об’єктів Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Проблема
Уявіть, що ви пишет е симу лятор меб левог о магазину  Ваш
кодмістить:
Сімейс тво зале жних про дуктів Скажімо ,Крісло+Диван+
Столик
Кілька варіацій ць ого сімейс тва Наприк лад, про дукти
Крісло,ДивантаСтоликпредставлені в трь ох різних с ти-
лях: Ар-деко ,Вікторіанському іМодерн
Сімейства прод уктів та їхніх варіацій 
Вам по трібно с творювати об ’єкти про дуктів у такий спосіб ,
щоб вони завж ди пас ували до інших про дуктів т ого само- Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)го сімейс тва Ц е дуж е важ ливо , адж е клієнти засмучую ться,
коли отримую ть меб лі, що не мо жна поєднати між собою 
Клієнти засмучуютьс я, якщо отримують прод укти, що
непоєднуютьс я
Крім т ого, ви не х очете вносити зміни в існуючий к од під час
додавання в програму нових про дуктів або сімейс тв Пос та-
чальники час то оновлюю ть свої каталоги, але ви б не х отіли
змінювати вж е написаний к од кожен раз при надх одженні
нових мо делеймеблів
Рішення
Для початку , пат ерн Абс трактна фабрика пропону є виділи-
ти загальні інт ерфейси д ля окремих про дуктів, що ск ладаю-
ть одне сімейс тво, і описати в них спільну д ля цих про дуктів
пове дінку  Так, наприк лад, у сі варіації кріс ел отримаю ть спі-
льний інт ерфейс Крісло,усі дивани реалізую ть інт ерфейс
Дивантощо Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Всі варіації одного й того с амого об ’єкта мають жити в одній
ієрар хіїкласів 
Далі ви с творюєт еабстрактну фабрик у— загальний інт е-
рфейс, який міс тить мет оди створення всіх про дуктів сіме-
йства (наприк лад, створитиКрісло ,створитиДиван і
створитиСтолик ) Ці операції повинні повер тати абстрактні
типи про дуктів, пре дставлені інт ерфейсами, які ми виділили
раніше —Крісла,ДиваниіСтолики 
Як що до варіацій про дуктів? Д ля кожної варіації сімейс тва
продуктів ми повинні с творити свою власну фабрику , реа-
лізувавши абс трактний інт ерфейс Фабрики с творюю ть про-
дукти о днієї варіації Наприк лад, ФабрикаМодерн буде
повер тати тільки КріслаМодерн ,ДиваниМодерн і
СтоликиМодерн  Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Конкретні фабрики відповідають певній варіації
сімейства прод уктів 
Клієнт ський к од повинен працювати як із фабриками, так і з
продуктами тільки через їхні загальні інт ерфейси Ц е дозво-
лить по давати у ваші к ласи б удь-які типи фабрик і вироб ля-
ти будь-які типи про дуктів, без не обхіднос ті вносити зміни в
існуючий код
Для к лієнтськ ого к оду повинно б ути не важ ливо, з як ою
фабрик оюпрацювати  Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Наприк лад, к лієнт ський к од просить фабрику зробити с тіле-
ць Він не знає, як ому типу відповідає ця фабрика Він не
знає, о тримає вікт оріанський або мо дерновий с тілець Д ля
нього важ ливо , щоб на ць ому с тільці мо жна б уло сидіти та
щоб цей с тілець відмінно виг лядав пор уч із диваном тієї ж
фабрики 
Залишилося прояснити ос танній момент: хт о ж с творює
об’єкти к онкретних фабрик, якщо к лієнт ський к од працює
лише із загальними інт ерфейсами? Зазвичай програма с тво-
рює к онкретний об ’єкт фабрики під час запу ску, причому тип
фабрики вибираєть ся на підс таві параметрів о точення або
конфігурації 
Структура
  Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Абстрактні продукти оголошую ть інт ерфейси про дуктів, що
пов’язані о дин з о дним за зміс том, але вик оную ть різні
функції 
Конкретні продукти — ве ликий набір к ласів, що нале жать
до різних абс трактних про дуктів (кріс лостолик), але маю ть
одні й ті самі варіації (Вікт оріанськийМо дерн)
Абстрактна фабрика оголошу є мет оди с творення різних
абстрактних про дуктів (кріс лостолик)
Конкретні фабрики кожна нале жить до своєї варіації про-
дуктів (Вікт оріанськийМо дерн) і реалізу є мет оди абс тра-
ктної фабрики, даючи змогу с творювати всі про дукти певної
варіації 
Незважаючи на т е, що к онкретні фабрики поро джую ть
конкретні про дукти, сигнатури їхніх мет одів му сять пове-
ртати відповідні абс трактні про дукти Ц е дозво лить к ліє-
нтського коду, що вик орис товує фабрику , не прив ’язуватися
до к онкретних к ласів про дуктів Клієнт змо же працювати
з будь-якими варіаціями про дуктів через абс трактні
інтерфейси 
Псевдок од
У ць ому прик ладі Абстрактна фабрика створює крос -пла-
тформові е лементи інт ерфейс у і стежить за тим, щоб вони
відповідали обраній операційній системі Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Прик лад крос -платформового графічного інтерфейс укористу вача
Крос -плат формова програма мо же відображати о дні й ті
самі е лементи інт ерфейс у по-різному , в зале жнос ті від обра-
ної операційної сис теми Важ ливо , щоб у такій програмі всі
створювані е лементи завж ди відповідали по точній опера-
ційній сис темі Ви ж не х отіли б , аби програма, запущена
на Windo ws, рапт ом почала показувати чек -бокси в с тилі
macOS?
Абстрактна фабрика ог олошу є спис ок створюючих мет одів,
які к лієнт ський к од мо же вик орис товувати д ля отримання
тих чи інших різновидів е лементів інт ерфейс у Конкретні
фабрики відносять ся до різних операційних сис тем і с тво-
рюють елементи, с умісні з цією системою  Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Програма на самому початку визначає фабрику , що відпо-
відає по точній операційній сис темі По тім с творює цю
фабрику та від дає її к лієнт ському к оду У по дальшому , щоб
виключити не сумісніс ть про дуктів, що повер таються, к лієнт
працюватиме тільки з цією фабрик ою
Клієнт ський к од не зале жить від к онкретних к ласів фабрик
чи елементів інт ерфейс у Він спілку ється з ними через зага-
льні інт ерфейси, не зале жачи від к онкретних к ласів фабрик
чи елементів к орис тувацьк огоінтерфейс у
Таким чином, щоб до дати до програми нову варіацію е ле-
ментів інт ерфейс у (наприк лад, д ля підтримки Linux), вам не
потрібно змінювати к лієнт ський к од Достатнь о створити ще
одну фабрику , що виг отовляє ці елементи 
Цейпатернпередбачає, щовимаєтекількасімейств продуктів, 
якізнаходяться вокремих ієрархіях класів(ButtonCheckbox) 
Продукти одногосімейства повинні матиспільний інтерфейс 
interfaceinterface ButtonButtonisis 
methodmethodpaint() 

Cімейства продуктів маютьоднакові варіації (macOSWindows) 
classclassWinButtonWinButton implementsimplements Buttonisis 
methodmethodpaint()isis 
Відобразити кнопкувстиліWindows 

classclassMacButtonMacButton implementsimplements Buttonisis 
methodmethodpaint()isis 
Відобразити кнопкувстиліmacOS  Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)interfaceinterface CheckboxCheckbox isis 
methodmethodpaint() 

classclassWinCheckboxWinCheckbox implementsimplements Checkbox isis 
methodmethodpaint()isis 
Відобразити чекбокс встиліWindows 

classclassMacCheckboxMacCheckbox implementsimplements Checkbox isis 
methodmethodpaint()isis 
Відобразити чекбокс встиліmacOS 


Абстрактна фабрика знаєпровсіабстрактні типипродуктів 
interfaceinterface GUIFactoryGUIFactory isis 
methodmethodcreateButton ():Button 
methodmethodcreateCheckbox ():Checkbox 

Кожнаконкретна фабрика знаєлишепропродукти своєїваріації 
істворює лишеїх 
classclassWinFactoryWinFactory implementsimplements GUIFactory isis 
methodmethodcreateButton ():Buttonisis 
returnreturnnewnewWinButton () 
methodmethodcreateCheckbox ():Checkbox isis 
returnreturnnewnewWinCheckbox () 

Незважаючи нате,щофабрики оперують конкретними класами, 
їхніметодиповертають абстрактні типипродуктів Завдяки 
цьомуфабрики можназаміняти однунаіншу,незмінюючи 
клієнтського коду 
classclassMacFactoryMacFactory implementsimplements GUIFactory isis 
methodmethodcreateButton ():Buttonisis 
returnreturnnewnewMacButton ()  Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)methodmethodcreateCheckbox ():Checkbox isis 
returnreturnnewnewMacCheckbox () 


Длякоду,якийвикористовує фабрику, неважливо, зякою 
конкретно фабрикою вінпрацює Всіотримувачі продуктів 
працюють знимичереззагальні інтерфейси 
classclassApplicationApplication isis 
privateprivate fieldfieldfactory:GUIFactory 
privateprivate fieldfieldbutton:Button 
constructorconstructor Application (factory:GUIFactory )isis 
thisthisfactory =factory 
methodmethodcreateUI () 
thisthisbutton=factorycreateButton () 
methodmethodpaint() 
buttonpaint() 


Програма вибирає типконкретної фабрики йстворює її 
динамічно, виходячи зконфігурації абооточення 
classclassApplicationConfiguratorApplicationConfigurator isis 
methodmethodmain()isis 
config=readApplicationConfigFile () 

ifif(configOS=="Windows" )thenthen 
factory =newnewWinFactory () 
elseelseifif(configOS=="Mac")thenthen 
factory =newnewMacFactory () 
elseelse 
throwthrownewnewException ("Error! Unknown operating system" ) 

Application app=newApplication(factory)  Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Застосування
Коли бізне с-логіка програми повинна працювати з різними
видами пов ’язаних один з одним продуктів, незале жно від
конкретних к ласів продуктів 
Абстрактна фабрика прих овує від к лієнт ського коду по дро-
биці т ого, як і які к онкретно об ’єкти б удуть с творені Внас лі-
док ць ого, клієнт ський к од мо же працювати з у сіма типами
створюваних про дуктів, так як їхній загальний інт ерфейс б ув
визначений заздалегідь 
Коли в програмі вж е вик орис товуєтьсяФабричний мет од,
але черг ові зміни пере дбачаю ть вве дення нових типів
продуктів 
У будь-якій добро тній програмі к оженклас має відповідати
лише за одну річ  Якщо к лас має занадт о багат о фабричних
методів, вони здатні затуманити йог о основну ф ункцію  Тому
є сенс у т ому, щоб вине сти усю логіку с творення про дуктів в
окрему ієрар хію к ласів, зас тосувавши абс трактну фабрику 
Кроки реалізації
Створіть таб лицю співвідношень типів про дуктів до варіацій
сімейс твпродуктів 
Зведіть у сі варіації про дуктів до загальних інтерфейсів 




 Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Визначт е інтерфейс абс трактної фабрики Він повинен мати
фабричні мет оди для створення к ожног о типу продуктів 
Створіть к ласи к онкретних фабрик, реалізувавши інт ерфейс
абстрактної фабрики Цих к ласів має б ути с тільки ж, скільки
й варіацій сімейс твпродуктів 
Змініть к од ініціалізації програми так, щоб вона с творювала
певну фабрику й пере давала її до к лієнт ськогокоду
Замініть у к лієнт ському к оді ділянки с творення про дуктів
через к онструктор на вик лики відповідних мет одівфабрики 
Переваги та не доліки
Гаранту є поєднання с творюваних продуктів 
Звільняє к лієнт ський к од від прив ’язки до к онкретних к ласів
продукту 
Виділяє к од виробництва про дуктів в о дне місце, спрощуючи
підтримку коду
Спрощу є додавання нових про дуктів до програми 
Реалізу єпринцип відкритостізакритості 
Ускладнює к од програми внас лідок вве дення ве ликої кільк ості
додаткових класів 
Вимагає наявнос ті всіх типів про дукту в к ожній варіації 






 Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)Відносини з іншими пат ернами
•Багат о архітектур починаю ться із зас тосування Фабрично-
го мет оду (прос тішог о та більш розширюваног о за допомо-
гою підк ласів) та ево люціоную ть у бік Абстрактної фабрики ,
Прототипу абоБудівельника (гнучкіших, але й складніших )
•Будівельник концентр ується на б удівництві ск ладних
об’єктів крок за крок омАбстрактна фабрика спеціалізу є-
ться на с творенні сімейс тв пов ’язаних про дуктів Будівельник
повер тає про дукт тільки піс ля вик онання всіх кроків, а
Абстрактна фабрик аповер тає про дукт одразу 
•Класи Абстрактної фабрики найчас тіше реалізую ться за
допомог оюФабричног о мет оду, хоча вони мо жуть б ути
побудовані і на основі Прототипу 
•Абстрактна фабрика може бути вик орис тана заміс тьФасаду
для того, щоб прих овати плат формо-зале жнікласи
•Абстрактна фабрика може працювати спільно з Мостом Це
особливо к орисно , якщо у вас є абс тракції, які мо жуть пра-
цювати тільки з деякими реалізаціями В ць ому випадку
фабрика визначатиме типи с творюваних абс тракцій та
реалізацій 
•Абстрактна фабрика ,Будівельник таПрототипможуть реа-
лізовуватися за допомог оюОдинака  Поро джувальні пат ерни проектування  Абс трактна фабрика
#
krabatua@gmail com (#)БУДІВЕЛЬНИКТакож відомий як: Builder
Будівельник — це поро джувальний пат ерн проектування,
що дає змогу с творювати ск ладні об ’єкти крок за крок ом
Будівельник дає мо жливіс ть вик орис товувати о дин і т ой
самий к од б удівництва д ля о тримання різних
відображ еньоб’єктів Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Проблема
Уявіть ск ладний об ’єкт, що вимагає кропітк ої покрок ової іні-
ціалізації безлічі по лів і вк ладених об ’єктів К од ініціалізації
таких об ’єктів зазвичай зах ований вс ередині монс тропо ді-
бного конструктора з де сятком параметрів Або ще гірше —
розпорошений по всь ому к лієнт ськомукоду
Створивши к упу підк ласів д ля всіх к онфігурацій об ’єктів, ви мо жете
надмір у ускладнити програму 
Наприк лад, по думаймо про т е, як с творити об ’єктБудинок 
Щоб поб удувати с тандар тний б удинок, по трібно: зве сти 
стіни, вс тановити двері, вс тавити пар у вік он та пос телити
дах А ле що робити, якщо ви х очете більший та світ ліший
будинок, що має бас ейн, сад та інше добро?
Найпрос тіше рішення — розширити к лас Будинок ,створи-
вши підк ласи д ля всіх к омбінацій параметрів б удинку  Про- Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)блема так ого підх оду— ве личезна кількіс ть класів, які вам
дове деться створити К ожен новий параметр , на кшталт
кольору шпалер чи мат еріалу покрівлі, зму сить вас с тво-
рювати вс е більше й більше к ласів д ля перерах ування у сіх
можливих варіантів 
Аби не пло дити підк ласи, мо жна підійти до вирішення пита-
ння з іншог о боку  Ви мо жете створити гігант ський к онстру-
кторБудинку ,що приймає безліч параметрів д ля контро лю
над с творюваним про дуктом Т ак, це позбавить вас від під-
класів, але призве де до появи іншої проб леми 
Констр уктор з безліччю параметрів має с вій недо лік: не всі
параметри потрібні протягом більшої частини часу
Більшіс ть цих параметрів б уде прос тоювати, а вик лики к он-
структора б удуть виг лядати монс тропо дібно через довгий
спис ок параметрів  Наприк лад, бас ейн є далек о не в к ожно- Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)му будинку , тому параметри, пов ’язані з бас ейнами, даремно
прос тоюватимуть у % випадків 
Рішення
Патерн Бу дівельник пропону є вине сти к онструювання
об’єкта за ме жі йог о власног о класу, дор учивши цю справу
окремим об ’єктам, які називаю тьсябудівельник ами
Будівельник дозво ляє створювати ск ладні об ’єкти покрок ово
Проміжний резу льтат захищений від стороннього втручання 
Патерн пропону є розбити проце с конструювання об ’єкта на
окремі кроки (наприк лад, побудуватиСтіни ,встановитиДвері
і т д) Щ об створити об ’єкт, вам по трібно по черзі вик лика-
ти мет оди б удівельника Д о того ж не по трібно вик ликати
всі кроки, а лише ті, що не обхідні д ля виробництва об ’єкта
певної конфігурації  Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Зазвичай о дин і т ой самий крок б удівництва мо же відрізня-
тися д ля різних варіацій виг отовлених об ’єктів Наприк лад,
дерев ’яний б удинок по требує будівництва с тін з дерева, а
кам’яний — зкаменю 
У ць ому випадку ви мо жете створити кілька к ласів б уді-
вельників, які по-різному вик онуватимуть ті ж самі кроки
Викорис товуючи цих б удівельників в о дному й т ому само-
му будівельному проце сі, ви змо жете отримувати на вих оді
різні об ’єкти
Різні б удівельники вик онають одне і те с аме завдання по-різному 
Наприк лад, о дин б удівельник робить с тіни з дерева і ск ла,
інший — з каменю і заліза, третій — із зо лота та діамантів
Викликавши о дні й ті самі кроки б удівництва, у першому
випадку ви о тримаєт е звичайний жит ловий б удинок, у др у-
гому— маленьку фор тецю, а в треть ому— розкішне жит ло
Зауважу , що к од, який вик ликає кроки б удівництва, пови- Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)нен працювати з б удівельниками через загальний інт ерфе-
йс, щоб їх мо жна б уло вільно замінювати о дин на інший 
Директ ор
Ви мо жете піти далі та виділити вик лики мет одів б удіве-
льника в окремий к лас, що називаєть ся «Директ ором » У
цьому випадку директ ор задаватиме порядок кроків б уді-
вництва, а б удівельник — вик онуватиме їх
Директор знає, які кроки повинен вик онати об ’єкт-б удівельник, щоб
виготовити прод укт
Окремий к лас директора не є с уворо обов ’язковим Ви
можете вик ликати мет оди б удівельника і безпос ередньо з
клієнт ського коду Тим не менш, директ ор корисний, якщо
у вас є кілька спос обів к онструювання про дуктів, що відрі-
зняю ться порядк ом і наявними кроками к онструювання У
цьому випадку ви змо жете об’єднати всю цю логіку в о дно-
мукласі Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Така с труктура к ласів повніс тю прих оває від к лієнт ського
коду проце с конструювання об ’єктів Клієнту залишить ся
лише прив ’язати бажаног о будівельника до директ ора, а
потім о тримати від б удівельника г отовий результат
Структура
  Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Інтерфейс б удівельника оголошу є кроки к онструювання
продуктів, спільні д ля всіх видів б удівельників
Конкретні б удівельники реалізую ть кроки б удівництва,
кожен по-своєму  Конкретні б удівельники мо жуть виг отовля-
ти різнорідні об ’єкти, що не маю ть спільног оінтерфейс у
Продукт — об ’єкт, що с творюєть ся Про дукти, зроб лені різни-
ми будівельниками, не зобов ’язані мати спільний інтерфейс 
Директ орвизначає порядок вик лику кроків б удівельників,
необхідних д ля виробництва про дуктів тієї чи іншої
конфігурації 
Зазвичай Клієнт подає до к онструктора директ ора вж е гото-
вий об ’єкт-будівельник, а директ ор надалі вик орис товує
тільки йог о Але мо жливим є так ож інший варіант , коли кліє-
нт пере дає б удівельника через параметр б удівельног о мет о-
ду директ ора У так ому випадку мо жна щоразу
викорис товувати різних б удівельників д ля виробництва
різноманітних відображ ень об ’єктів
Псевдок од
У цьому прик ладі Будівельник викорис товується для покро-
кового конструювання авт омобілів та т ехнічних посібників
доних Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Прик лад покрок ового к онстр уювання автомобілів та інстр укцій
доних
Автомобіль — це ск ладний об ’єкт, який мо жна налаштува-
ти сотнею різних спос обів Заміс ть того, щоб налашт овувати
автомобіль через к онструктор, ми вине семо йог о збирання
в окремий к лас-будівельник, пере дбачивши мет оди д ля
конфігурації всіх час тинавтомобіля  Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Клієнт мо же збирати авт омобілі, працюючи з б удівельник ом
безпос ередньо З іншог о боку , він мо же дор учити цю спра-
ву директ ору Це об’єкт, який знає, які кроки б удівельника
потрібно вик ликати, щоб о тримати кілька найпопу лярніших
конфігурацій автомобілів 
Проте, до к ожног о авт омобіля ще по трібен посібник к ори-
стувача, що відповідає йог о конфігурації Д ля ць ого ми с тво-
римо ще о дин к лас б удівельника, який заміс ть
конструювання авт омобіля др укуватиме с торінки посібника
до тієї деталі, яку ми вб удову ємо в про дукт Тепер , пропу сти-
вши через о дні й ті самі кроки обидва типи б удівельників,
ми о тримаємо авт омобіль та відповідний до нь ого посібник
корис тувача 
Очевидно , що паперовий посібник і металевий авт омобі-
ль— це дві абс олютно різні речі З цієї причини ми повинні
отримувати резу льтат безпос ередньо від б удівельників, а не
від директ ора Інакше нам дове лося б ж орстко прив ’язати
директ ора до к онкретних к ласів авт омобілів і посібників 
Будівельник можестворювати різніпродукти, використовуючи 
одинітойсамийпроцесбудівництва 
classclassCarCarisis 
Автомобілі можутьвідрізнятися комплектацією: типом 
двигуна, кількістю сидінь, можутьматиабонематиGPSі 
систему навігації тощоКрімтого,автомобілі можутьбути 
міськими, спортивними абопозашляховиками 
 Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)classclassManualManualisis 
Посібник користувача дляданоїконфігурації автомобіля 


Інтерфейс будівельників оголошує всіможливі етапитакроки 
конфігурації продукту 
interfaceinterface BuilderBuilder isis 
methodmethodreset() 
methodmethodsetSeats () 
methodmethodsetEngine () 
methodmethodsetTripComputer () 
methodmethodsetGPS() 

Усіконкретні будівельники реалізують загальний інтерфейс по- 
своєму 
classclassCarBuilderCarBuilder implementsimplements Builder isis 
privateprivate fieldfieldcar:Car 
methodmethodreset() 
Помістити новийоб'єктCarвполі"car" 
methodmethodsetSeats ()isis 
Встановити вказану кількість сидінь 
methodmethodsetEngine ()isis 
Встановити наданий двигун 
methodmethodsetTripComputer ()isis 
Встановити наданусистему навігації 
methodmethodsetGPS()isis 
Встановити абознятиGPS 
methodmethodgetResult ():Carisis 
Повернути поточний об'єктавтомобіля 

Навідміну відіншихпороджувальних патернів, депродукти 
маютьбутичастиною однієієрархії класівабослідувати  Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)загальному інтерфейсу, будівельники можутьстворювати 
абсолютно різніпродукти, якінемаютьспільного предка 
classclassCarManualBuilderCarManualBuilder implementsimplements Builder isis 
privateprivate fieldfieldmanual:Manual 
methodmethodreset() 
Помістити новийоб'єктManualуполі"manual" 
methodmethodsetSeats ()isis 
Описати кількість місцьвавтівці 
methodmethodsetEngine ()isis 
Додатидопосібника описдвигуна 
methodmethodsetTripComputer ()isis 
Додатидопосібника описсистеми навігації 
methodmethodsetGPS()isis 
Додатидопосібника інструкцію дляGPS 
methodmethodgetResult ():Manualisis 
Повернути поточний об'єктпосібника 


Директор знає,вякійпослідовності потрібно змушувати 
працювати будівельника, щоботримати тучиіншуверсію 
продукту Зауважте, щодиректор працюєзбудівельником через 
загальний інтерфейс, завдяки чомувіннезнаєтиппродукту, 
якийвиготовляє будівельник 
classclassDirectorDirector isis 
methodmethodconstructSportsCar (builder:Builder)isis 
builderreset() 
buildersetSeats () 
buildersetEngine (newnewSportEngine ()) 
buildersetTripComputer (truetrue) 
buildersetGPS(truetrue) 

 Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Застосування
Коли ви х очет е позб утися від «т елескопічног о
конструктора»
Припу стімо, у вас є о дин к онструктор з де сятьма опціона-
льними параметрами Йог о незр учно вик ликати, т ому ви
створили ще де сять к онструкторів з меншою кількіс тю пара-
метрів Вс е, що вони роб лять, — це переадре совую ть вик лик
до базовог о конструктора, по даючи якісь типові значення в
параметри, які відс утні в них самих Директор отримує об'єктконкретного будівельника відклієнта 
(програми) Програма самазнає,якогобудівельника 
використати, абиотримати потрібний продукт 
classclassApplicationApplication isis 
methodmethodmakeCar()isis 
director =newnewDirector () 

CarBuilder builder =newCarBuilder() 
director constructSportsCar (builder) 
Carcar=buildergetResult() 

CarManualBuilder builder =newCarManualBuilder() 
director constructSportsCar (builder) 

Готовий продукт повертає будівельник, оскільки 
директор частіше завсенезнаєінезалежить від 
конкретних класівбудівельників тапродуктів 
Manualmanual=buildergetResult() 


 Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Такого монстра мо жна створити тільки в мовах, що мають
механізм перевантаж ення методів, наприк лад, C# або Java
Патерн Бу дівельник дозво ляє збирати об ’єкти покрок ово,
викликаючи тільки ті кроки, які вам по трібні Отж е, більше
не по трібно намагатися «запхати» до к онструктора всі
можливі опції продукту 
Коли ваш к од повинен с творювати різні у явлення як огось
об’єкта Наприк лад, дерев ’яні та залізобет онні будинки 
Будівельник мо жна зас тосувати, якщо с творення кільк ох від-
ображ ень об ’єкта ск ладаєть ся з о днак ових етапів, які відрі-
зняю тьсядеталями 
Інтерфейс б удівельників визначить всі мо жливі етапи
конструювання К ожному відображ енню відповідатиме вла-
сний к лас-будівельник Порядок етапів б удівництва визна-
чатиме к лас-директ ор
Коли вам по трібно збирати ск ладні об ’єкти, наприк лад,
дерева Компонувальника classclassPizzaPizza{ 
Pizza(int size){} 
Pizza(int size,boolean cheese) {} 
Pizza(int size,boolean cheese, boolean pepperoni) {} 
 


 Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Будівельник к онструює об ’єкти покрок ово, а не за о дин про-
хід Більш т ого, кроки б удівництва мо жна вик онувати реку-
рсивно  А без ць ого не поб удувати деревопо дібну с труктур у
на зразок Компонувальника 
Зауважт е, що Бу дівельник не дозво ляє с тороннім об ’єктам
отримувати дос туп до об ’єкта, що к онструюєть ся, доки т ой
не буде повніс тю готовий Ц е захищає к лієнт ський к од від
отримання незавершених «битих» об ’єктів
Кроки реалізації
Перек онайт еся в т ому, що с творення різних відображ ень
об’єкта мо жна зве сти до загальних кроків 
Опишіть ці кроки в загальному інт ерфейсі б удівельників
Для к ожног о з відображ ень об ’єкта-про дукту с творіть по
одному к ласу-будівельнику й реалізуйт е їхні мет оди
будівництва 
Не заб удьте про мет од отримання резу льтату Зазвичай
конкретні б удівельники визначаю ть власні мет оди отрима-
ння резу льтату б удівництва Ви не мо жете описати ці мет оди
в інтерфейсі б удівельників, оскільки про дукти не обов ’язко-
во повинні мати загальний базовий к лас або інт ерфейс А ле
ви завж ди мо жете до дати мет од отримання резу льтату до
загальног о інтерфейс у, якщо ваші б удівельники виг отовляю-
ть однорідні про дукти, які маю ть спільног опредка
 Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Подумайт е про с творення к ласу директ ора Йог о мет оди
створюватимуть різні к онфігурації про дуктів, вик ликаючи
різні кроки о дного і того самог обудівельника 
Клієнт ський к од повинен б уде створювати й об ’єкти б уді-
вельників, й об ’єкт директ ора Пере д початк ом б удівництва
клієнт повинен зв ’язати певног о будівельника з директ ором
Це мо жна зробити або через к онструктор, або через с етер,
або по давши б удівельника безпос ередньо до б удівельног о
методудирект ора
Результат б удівництва мо жна повернути з директ ора, але
тільки якщо мет од повернення про дукту вдалося розміс тити
в загальному інт ерфейсі б удівельників Інакше ви ж орстко
прив ’яжете директ ора до к онкретних к ласів б удівельників
Переваги та не доліки
Дозво ляє с творювати про дукти покрок ово
Дозво ляє вик орис товувати о дин і т ой самий к од для створе-
ння різноманітних продуктів 
Ізолює ск ладний к од конструювання про дукту від йог о голо-
вної бізне с-логіки
Ускладнює к од програми за рах унок до даткових класів 
Клієнт б уде прив ’язаний до к онкретних к ласів б удівельни-
ків, т ому що в інт ерфейсі б удівельника мо же не б ути мет оду
отримання результату




 Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)Відносини з іншими пат ернами
•Багат о архітектур починаю ться із зас тосування Фабрично-
го мет оду (прос тішог о та більш розширюваног о за допомо-
гою підк ласів) та ево люціоную ть у бік Абстрактної фабрики ,
Прототипу абоБудівельника (гнучкіших, але й складніших )
•Будівельник концентр ується на б удівництві ск ладних
об’єктів крок за крок омАбстрактна фабрика спеціалізу є-
ться на с творенні сімейс тв пов ’язаних про дуктів Будівельник
повер тає про дукт тільки піс ля вик онання всіх кроків, а
Абстрактна фабрик аповер тає про дукт одразу 
•Будівельник дозво ляє покрок ово к онструювати дерево
Компонувальника 
•Патерн Будівельник може бути поб удований у виг ляді
Мосту:директор гратиме ро ль абс тракції, а будівельники —
реалізації 
•Абстрактна фабрика ,Будівельник таПрототипможуть реа-
лізовуватися за допомог оюОдинака  Поро джувальні пат ерни проектування  Бу дівельник
#
krabatua@gmail com (#)ПРОТОТИПТакож відомий як: Клон, Protot ype
Прототип — це поро джувальний пат ерн проектування, що
дає змогу к опіювати об ’єкти, не вдаючись у по дробиці
їхньоїреалізації  Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Проблема
У вас є об ’єкт, який по трібно ск опіювати Як це зробити?
Потрібно с творити поро жній об ’єкт того самог о класу, а по тім
по черзі к опіювати значення всіх по лів зі с тарог о об’єкта до
новог о
Чудово! Про те є нюанс Не к ожен об ’єкт вдас ться ск опіюва-
ти у такий спосіб , адж е час тина йог о стану мо же бути прива-
тною , а значить — не доступною д ля решти к одупрограми 
Копіювання «ззовні» не завж диможливе на практиці 
Є й інша проб лема К од, що к опіює, с тане зале жним від к ла-
сів об ’єктів, які він к опіює А дже, щоб перебрати усіполя
об’єкта, по трібно прив ’язатися до йог о класу Тому ви не змо-
жете копіювати об ’єкти, знаючи тільки їхні інт ерфейси, але
не їхні к онкретні класи Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Рішення
Патерн Про тотип дор учає проце с копіювання самим
об’єктам, які треба ск опіювати Він вво дить загальний інт е-
рфейс д ля всіх об ’єктів, що підтримую ть клонування Ц е
дозво ляє к опіювати об ’єкти, не прив ’язуючись до їхніх
конкретних к ласів Зазвичай такий інт ерфейс має всь ого
один мет од—clone
Реалізація ць ого мет оду в різних к ласах дуж е схожа Мет од
створює новий об ’єкт по точног о класу й к опіює в нь ого зна-
чення всіх по лів власног о об’єкта Т аким чином мо жна ск о-
піювати навіть приватні по ля, оскільки більшіс ть мов
програмування дозво ляє о тримати дос туп до приватних
полів б удь-як ого об’єкта по точног окласу
Попередньо заготовлені прототипи мо жуть стати
заміною підкласів  Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Об’єкт, який к опіюю ть, називаєть сяпрототипом (звідси і
назва пат ерна) К оли об ’єкти програми міс тять с отні по лів і
тисячі мо жливих к онфігурацій, про тотипи мо жуть с лугувати
своєрідною аль тернативою с творенню підкласів 
У цьому випадку всі мо жливі про тотипи г отуються і налашт о-
вуються на етапі ініціалізації програми По тім, к оли програмі
буде по трібний новий об ’єкт, вона с творить к опію з попере-
дньо заг отовленог опрототипа
Аналогія з жит тя
У промис ловому виробництві про тотипи с творюю ться пере д
виготовленням основної пар тії про дуктів д ля прове дення
різноманітних випроб увань При ць ому про тотип не бере
участі в по дальшому виробництві, відіграючи пасивну роль
Прик лад поділу клітини  Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Виробничий про тотип не с творює к опію самог о себе, т ому
більш наб лижений до пат ерна прик лад— це по діл к літин
Після міт озног о по ділу к літин утворюю ться дві абс олютно
ідентичні к літини Мат еринська к літина відіграє ро ль про то-
типу, бер учи активну учас ть у с творенні новог о об’єкта
Структура
Базова реалізація
Інтерфейс про тотипів опис ує операції к лонування Д ля
більшос ті випадків — це єдиний мет одclone Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Конкретний про тотипреалізу є операцію к лонування само-
го себе Крім звичайног о копіювання значень у сіх по лів, тут
можуть б ути прих овані різноманітні ск ладнощі, про які к ліє-
нту не по трібно знати Наприк лад, к лонування пов ’язаних
об’єктів, розплутування рекурсивних зале жнос тейтаінше 
Клієнт створює к опію об ’єкта, звер таючись до нь ого через
загальний інт ерфейс прототипів 
Реалізація зі спільним с ховищем про тотипів
 Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Сховище про тотипів полегшу є дос туп до час то вик орис тову-
ваних про тотипів, зберігаючи попере дньо створений набір
еталонних, г отових до к опіювання об ’єктів Найпрос тіше
сховище мо же бути поб удовано за допомог ою х еш-таб лиці
виду ім'я-прототипу →прототип Для по легшення пошуку
прототипи мо жна маркувати ще й за іншими крит еріями, а
не тільки за умовним іменем 
Псевдок од
У ць ому прик ладі Прототип дозво ляє робити т очні к опії
об’єктів г еометричних фігур без прив ’язки до їхніх класів 
Прик лад к лонування ієрар хії геометричних фігур 
Кожна фігура реалізу є інтерфейс к лонування і надає мет од
для відтворення самої с ебе Підк ласи вик орис товую ть Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)батьківський мет од клонування, а по тім к опіюю ть власні
поля до с твореног о об’єкта
Базовий прототип 
abstractabstract classclassShapeShapeisis 
fieldfieldX:int 
fieldfieldY:int 
fieldfieldcolor:string 

Звичайний конструктор 
constructorconstructor Shape()isis 
 

Конструктор прототипа 
constructorconstructor Shape(source:Shape)isis 
thisthis() 
thisthisX=sourceX 
thisthisY=sourceY 
thisthiscolor=sourcecolor 

Результатом операції клонування завждибудеоб'єктз 
ієрархії класівShape 
abstractabstract methodmethodclone():Shape 


Конкретний прототип Методклонування створює новийоб'єкт 
поточного класу,передаючи доконструктора посилання на 
власний об'єкт Завдяки цьому,клонування виходить 
атомарним —докиневиконається конструктор, новогооб'єкта 
щенеіснуєАлеяктількиконструктор завершено, ми 
отримаємо завершений об'єкт-клон, анепорожній об'єкт, який  Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)потрібно щезаповнити 
classclassRectangleRectangle extendsextends Shapeisis 
fieldfieldwidth:int 
fieldfieldheight:int 

constructorconstructor Rectangle (source:Rectangle )isis 
Викликбатьківського конструктора потрібен, щоб 
скопіювати потенційні приватні поля,оголошені в 
батьківському класі 
supersuper(source) 
thisthiswidth=sourcewidth 
thisthisheight=sourceheight 

methodmethodclone():Shapeisis 
returnreturnnewnewRectangle (thisthis) 


classclassCircleCircleextendsextends Shapeisis 
fieldfieldradius:int 

constructorconstructor Circle(source:Circle)isis 
supersuper(source) 
thisthisradius=sourceradius 

methodmethodclone():Shapeisis 
returnreturnnewnewCircle(thisthis) 


Десьуклієнтському програмному коді 
classclassApplicationApplication isis 
fieldfieldshapes:arrayofShape 
 Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)constructorconstructor Application ()isis 
Circlecircle=newCircle() 
circleX= 
circleY= 
circleradius= 
shapesadd(circle) 

CircleanotherCircle =circleclone() 
shapesadd(anotherCircle ) 
anotherCircle будемістити точнукопіюcircle 

Rectangle rectangle =newRectangle() 
rectangle width= 
rectangle height= 
shapesadd(rectangle ) 

methodmethodbusinessLogic ()isis 
Неочевидний плюсПрототипу втому,щовиможете 
клонувати набіроб'єктів, незнаючиїхніхконкретних 
класів 
ArrayshapesCopy =newArrayofShapes 

Наприклад, минезнаємо, якіконкретно об'єкти 
знаходяться всередині масивуshapesтакякйого 
оголошено зтипомShapeАлезавдяки поліморфізму, ми 
можемоклонувати усіоб'єкти «наосліп» Будевиконано 
методcloneтогокласу,якимєцейоб'єкт 
foreachforeach (sinshapes)do 
shapesCopy add(sclone()) 

ЗміннаshapesCopy будемістити точнікопіїелементів 
масивуshapes  Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Застосування
Коли ваш к од не повинен зале жати від к ласів об ’єктів, при-
значених д лякопіювання 
Таке час то буває, якщо ваш к од працює з об ’єктами, по да-
ними ззовні через який-неб удь загальний інт ерфейс Ви не
зможете прив ’язатися до їхніх к ласів, навіть якби зах отіли,
тому що к онкретні к ласи об ’єктів невідомі 
Патерн Про тотип надає к лієнту загальний інт ерфейс д ля
робо ти з у сіма про тотипами Клієнту не по трібно зале жа-
ти від у сіх к ласів об ’єктів, призначених д ля копіювання, а
тільки від інт ерфейс уклонування 
Коли ви маєт е безліч підк ласів, які відрізняю ться початк о-
вими значеннями полів Х тось міг с творити у сі ці к ласи д ля
того, щоб мати легкий спосіб породж увати об ’єкти певної
конфіг урації 
Патерн Про тотип пропону є вик орис товувати набір про то-
типів заміс ть створення підк ласів д ля опис у попу лярних
конфігурацій об ’єктів
Таким чином, заміс ть поро дження об ’єктів з підк ласів ви
копіюватимет е існуючі об ’єкти-про тотипи, внутрішній с тан
яких вж е налашт овано  Це дозво лить уникнути виб ухопо-
дібног о зрос тання кільк ості класів програми й зменшити її
складніс ть



 Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Кроки реалізації
Створіть інт ерфейс про тотипів з єдиним мет одом clone
Якщо у вас вж е є ієрар хія про дуктів, мет од клонування
можна ог олосити в к ожному з її класів 
Додайте до к ласів майб утніх про тотипів аль тернативний
конструктор, що приймає в як ості аргументу об ’єкт по то-
чного класу Спочатку цей к онструктор повинен ск опіювати
значення всіх по лів по даног о об’єкта, ог олошених в рамках
поточног о класу Потім— пере дати вик онання батьківськ о-
му конструктору, щоб т ой по турбувався про по ля, ог олошені
всуперк ласі
Якщо мова програмування, яку ви вик орис товуєте, не під-
триму є перевантаж ення мет одів, т оді вам не вдас ться ство-
рити декілька версій к онструктора В ць ому випадку
копіювання значень мо жна прово дити в іншому мет оді, спе-
ціально с твореному д ля цих цілей К онструктор є зр учнішим,
тому що дозво ляє к лонувати об ’єкт за о динвиклик
Зазвичай мет од клонування ск ладаєть ся з о дного рядка, а
саме вик лику операт ора newз конструктором про тотипу Усі
класи, що підтримую ть клонування, повинні явно визначи-
ти мет одcloneдля того, щоб вказати власний к лас з опе-
ратором newІнакше резу льтатом к лонування с тане об ’єкт
батьківськ огокласу Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)На до дачу мо жете створити центральне с ховище про тотипів
У ньому зр учно зберігати варіації об ’єктів, мо жливо , навіть
одного класу, але по-різному налашт ованих 
Ви мо жете розміс тити це с ховище або у новому фабричному
класі, або у фабричному мет оді базовог о класу про тотипів
Такий фабричний мет од, керуючись вхідними аргументами,
повинен шукати відповідний екземпляр у с ховищі про тоти-
пів, а по тім вик ликати йог о мет од клонування і повер тати
отриманий об ’єкт
Нарешті, по трібно позб утися прямих вик ликів к онструкторів
об’єктів, замінивши їх вик ликами фабричног о мет оду схови-
щапрототипів 
Переваги та не доліки
Дозво ляє к лонувати об ’єкти без прив ’язки до їхніх к онкре-
тних класів 
Менша кількіс ть повт орювань к оду ініціалізації об ’єктів
Приск орює с творення об ’єктів
Альтернатива с творенню підк ласів під час к онструювання
складних об ’єктів
Складно к лонувати ск ладові об ’єкти, що маю ть посилання на
інші об ’єкти




 Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)Відносини з іншими пат ернами
•Багат о архітектур починаю ться із зас тосування Фабрично-
го мет оду (прос тішог о та більш розширюваног о за допомо-
гою підк ласів) та ево люціоную ть у бік Абстрактної фабрики ,
Прототипу абоБудівельника (гнучкіших, але й складніших )
•Класи Абстрактної фабрики найчас тіше реалізую ться за
допомог оюФабричног о мет оду, хоча вони мо жуть б ути
побудовані і на основі Прототипу 
•Якщо Команду потрібно к опіювати пере д вставкою в іс торію
виконаних к оманд, вам мо же допомог тиПрототип
•Архітектура, поб удована на Компонувальниках таДекора-
торах , час то мо же по ліпшуватися за рах унок впровадж е-
ння Прототипу  Він дозво ляє к лонувати ск ладні с труктури
об’єктів, а не збирати їх заново 
•Прототипне спираєть ся на спадкування, але йому по трібна
складна операція ініціалізації Фабричний мет од, навпаки,
побудований на спадкуванні, але не вимагає ск ладної іні-
ціалізації
•Знімок іноді мо жна замінити Прототипом , якщо об ’єкт, чий
стан по трібно зберігати в іс торії, досить прос тий, не має
посилань на зовнішні ре сурси або їх мо жна легк овідновити 
•Абстрактна фабрика ,Будівельник таПрототипможуть реа-
лізовуватися за допомог оюОдинака  Поро джувальні пат ерни проектування  Про тотип
#
krabatua@gmail com (#)ОДИНАКТакож відомий як: Single ton
Одинак — це поро джувальний пат ерн проектування, який
гаранту є, що к лас має лише о дин екземпляр , та надає
глобальну т очку дос тупу до нього Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)Проблема
Одинак вирішу є відразу дві проб леми (пор ушуючи принцип
єдиного обов ’язкукласу):
Гарант ує наявніс ть єдиног о екземпляра к ласу Найчас тіше
за вс е це к орисно д ля дос тупу до як огось спільног о ресурсу,
наприк лад, бази даних 
Уявіть с обі, що ви с творили об ’єкт, а через деякий час нама-
гаєтесь створити ще о дин У ць ому випадку х отілося б о три-
мати с тарий об ’єкт заміс ть створення новог о
Таку пове дінку немо жливо реалізувати за допомог ою зви-
чайног о конструктора, оскільки к онструктор к ласузавж ди
повер тає новий об ’єкт
Клієнти мо жуть не підозрювати, що працюють з одним і тим
самим об’єктом Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)Надає г лобальну т очку дос тупу Це не прос то глобальна змі-
нна, через яку мо жна діс татися до певног о об’єкта Г лобальні
змінні не захищені від запис у, тому б удь-який к од може під-
мінити їхнє значення без вашог овідома 
Проте, є ще о дна ос обливіс ть Бу ло б непогано й зберігати
в одному місці к од, який вирішу є проб лему №, і мати до
нього прос тий та дос тупний інтерфейс 
Цікаво , що в наш час пат ерн с тав нас тільки відомим, що
тепер лю ди називаю ть «о динаками» навіть ті к ласи, які вирі-
шують лише о дну з проб лем, перерах ованих вище 
Рішення
Всі реалізації О динака зво дяться до т ого, аби прих овати
типовий к онструктор та с творити пуб лічний с татичний
метод, який і к онтро люватиме жит тєвий цик л об’єкта-о дина-
ка
Якщо у вас є дос туп до к ласу одинака, о тже, буде й дос туп
до ць ого статичног о мет оду З як ої точки к оду ви б йог о не
викликали, він завж ди від даватиме о дин і т ой самий об ’єкт
Аналогія з жит тя
Уряд дер жави — вдалий прик лад О динака У дер жаві мо же
бути тільки о дин офіційний уряд Незале жно від т ого, хто
 Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)конкретно засідає в уряді, він має г лобальну т очку дос тупу
«Уряд країни N»
Структура
Одинак визначає с татичний мет одgetInstance ,який пове-
ртає о дин екземпляр свог окласу
Конструктор Одинака повинен б ути прих ований від к лієнтів
Виклик мет одуgetInstance повинен с тати єдиним спос обом
отримати об ’єкт ць огокласу
Псевдок од
У цьому прик ладі ро льОдинака грає к лас підк лючення до
бази даних 
 Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)Цей к лас не має пуб лічног о конструктора, т ому єдиним
способом о тримання йог о об ’єкта є вик лик мет оду
getInstance Цей мет од збере же перший с творений об ’єкт і
повер татиме йог о в у сіх нас тупних викликах 
Класодинака визначає статичний метод`getInstance`, котрий 
дозволяє клієнтам повторно використовувати однеітеж 
підключення добазиданихповсійпрограмі 
classclassDatabaseDatabase isis 
Поледлязберігання об'єкта-одинака маєбутиоголошено 
статичним 
privateprivate staticstaticfieldfieldinstance :Database 

Конструктор одинака завждиповинен залишатися приватним, 
абиклієнти немоглисамостійно створювати екземпляри 
цьогокласучерезоператор `new` 
privateprivate constructorconstructor Database ()isis 
Тутможежитикодініціалізації підключення до 
сервера базданих 
 

Головний статичний метододинака служить альтернативою 
конструктору ієточкоюдоступу доекземпляра цього 
класу 
publicpublicstaticstaticmethodmethodgetInstance ()isis 
ifif(Database instance ==nullnull)thenthen 
acquireThreadLock ()andandthenthen 
Провсяквипадок, щеразперевіримо, чине 
булостворено об'єктвіншомупотоці, поки 
данийпотікчекавназвільнення блокування 
ifif(Database instance ==nullnull)thenthen  Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)Застосування
Коли в програмі повинен б ути єдиний екземпляр як ого-
небудь класу, дос тупний у сім к лієнтам (наприк лад, спільний
доступ до бази даних з різних час тинпрограми )
Одинак прих овує від к лієнтів всі спос оби с творення ново-
го об’єкта, окрім спеціальног о мет оду Цей мет од або с тво-Databaseinstance =newDatabase() 
returnreturnDatabase instance 

І,нарешті, будь-який класодинака повинен матиякусь 
корисну функціональність, якуклієнти будутьзапускати 
черезотриманий об'єктодинака 
publicpublicmethodmethodquery(sql)isis 
Усізапитидобазиданихпроходитимуть черезцей 
методТомуєсенспомістити сюдиякусьлогіку 
кешування 
 

classclassApplicationApplication isis 
methodmethodmain()isis 
Database foo=DatabasegetInstance() 
fooquery("SELECT ") 
 
Database bar=DatabasegetInstance() 
barquery("SELECT ") 
Змінна"bar"містить тойсамийоб'єкт, щоізмінна 
"foo" 


 Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)рює об ’єкт, або від дає існуючий об ’єкт, якщо він вж е був
створений 
Коли ви х очет е мати більше к онтролю над г лобальними
змінними 
На відміну від г лобальних змінних, О динак гаранту є, що
жоден інший к од не замінить с творений екземпляр к ласу,
тому ви завж ди впевнені в наявнос ті лише о дного об’єкта-
одинака
Тим не менше, б удь-коли ви мо жете розширити це обме же-
ння і дозво лити б удь-яку кількіс ть об ’єктів-о динаків, зміни-
вши к од в о дному місці (мет одgetInstance )
Кроки реалізації
Додайте до к ласу приватне с татичне по ле, к отре міс титиме
одиночний об ’єкт
Оголосіть с татичний с творюючий мет од, що вик орис товува-
тиметь ся для отримання Одинака 
Додайте «ліниву ініціалізацію» (с творення об ’єкта під час
першог о вик лику мет оду) до с творюючог о мет одуодинака 
Зробіть к онструктор класуприватним 

 Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)У клієнт ському к оді замініть прямі вик лики к онструктора
одинака на вик лики йог о створюючог ометоду
Переваги та не доліки
Гаранту є наявніс ть єдиног о екземпляра класу
Надає г лобальну т очку дос тупу до нього
Реалізу є відк ладену ініціалізацію об ’єкта-о динака
Порушуєпринцип єдиного обов ’язку класу
Маску є поганий дизайн 
Проб леми багат опоточнос ті
Вимагає пос тійног о створення Mock -об’єктів при юніт -тесту-
ванні
Відносини з іншими пат ернами
•Фасад можна зробити Одинак ом, оскільки зазвичай по трі-
бен тільки о дин об ’єкт-фасад
•Патерн Легк оваг овик може нагадувати Одинака , якщо д ля
конкретног о завдання ви змог ли зменшити кількіс ть об ’єктів
до о дного Але пам ’ятайт е, що між пат ернами є дві с уттєві
відміннос ті:
На відміну від Одинак а, ви мо жете мати безліч об ’єктів-
легковаговиків







 Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)Об’єкти-легк оваговики повинні б ути незмінними, т оді як
об’єкт-одинак допу скає зміну свог остану
•Абстрактна фабрика ,Будівельник таПрототипможуть реа-
лізовуватися за допомог оюОдинака  Поро джувальні пат ерни проектування  О динак
#
krabatua@gmail com (#)Структурні пат ерни
проект ування
Спис ок структурних пат ернів проектування, які відповідаю ть
за поб удову зр учних в підтримці ієрар хійкласів 
Адапт ер
Adapt er
Дає змогу об ’єктам із не сумісними інт ерфейсами працювати
разом
Міст
Bridge
Розділяє о дин або кілька к ласів на дві окремі ієрар хії—
абстракцію та реалізацію , дозво ляючи змінювати к од в о дній
гілці к ласів, незале жно від іншої Структурні пат ерни проектування
#
krabatua@gmail com (#)Компонувальник
Composit e
Дає змогу згр упувати декілька об 'єктів у деревопо дібну с тру-
ктуру, а по тім працювати з нею так, ніби це о диничний об 'єкт
Декорат ор
Decorator
Дає змогу динамічно до давати об 'єктам нову ф ункціональніс ть,
загортаючи їх у к орисні «обг ортки»
Фасад
Facade
Надає прос тий інт ерфейс до ск ладної сис теми к ласів, біб ліоте-
ки або фреймворку  Структурні пат ерни проектування
#
krabatua@gmail com (#)Легк оваг овик
Flyweight
Дає змогу вміс тити більшу кількіс ть об 'єктів у відве деній опе-
ративній пам' яті Легк оваговик заощаджу є пам' ять, розпо діляю-
чи спільний с тан об 'єктів між с обою , заміс ть зберігання о днак о-
вих даних у к ожному об 'єкті
Замісник
Proxy
Дає змогу підс тавляти заміс ть реальних об 'єктів спеціальні об '-
єкти-замінники Ці об 'єкти пере хоплюю ть вик лики до оригіна-
льног о об'єкта, дозво ляючи зробити щось дочипісля пере дачі
виклику оригіналові Структурні пат ерни проектування
#
krabatua@gmail com (#)АДАПТЕРТакож відомий як: Wrapper ,Обгортк а,Adapter
Адапт ер— це с труктурний пат ерн проектування, що дає
змогу об ’єктам із не сумісними інт ерфейсами
працювати разом  Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Проблема
Уявіть, що ви пишет е програму д ля торгівлі на бір жі Ваша
програма спочатку завантажу є бір жові к отирування з декі-
лькох джерел в XML, а по тім малює гарні графіки 
У якийсь момент ви вирішу єте покращити програму , застосу-
вавши с торонню біб ліотеку аналітики А ле от біда — біб ліо-
тека підтриму є тільки формат даних JSON, не сумісний із
вашим додатком
Під’єднати сторонню біб ліотек у немо жливо через нес умісність
форматів даних 
Ви мог ли б переписати цю біб ліотеку, щоб вона підтриму-
вала формат XML, але, по-перше, це мо же пор ушити робо ту
наявног о коду, який уж е зале жить від біб ліотеки, по-др уге, у
вас мо же прос то не б ути дос тупу до її вихідног окоду Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Рішення
Ви мо жете створити адаптер  Це об ’єкт-перек ладач, який
транс форму є інт ерфейс або дані о дного об ’єкта таким
чином, щоб він с тав зрозумілим іншому об ’єкту
Адаптер заг ортає о дин з об ’єктів так, що інший об ’єкт навіть
не підозрює про існування першог о Наприк лад, об ’єкт, що
працює в метричній сис темі вимірювання, мо жна «обг орну-
ти» адапт ером, який б уде конвер тувати дані уфути
Адаптери мо жуть не тільки к онвер тувати дані з о дного
формату в інший, але й допомагати об ’єктам із різними інт е-
рфейсами працювати разом Ц е виг лядає так:
Адаптер має інт ерфейс, с умісний з о дним із об ’єктів
Тому цей об ’єкт мо же вільно вик ликати мет одиадапт ера
Адаптер о триму є ці вик лики та перенаправляє їх іншому
об’єкту, але вж е в т ому форматі та пос лідовнос ті, які є зро-
зумілими д ля ць ого об’єкта
Іноді вдаєть ся створити навіть двосторонній адаптер , який
може працювати в обо хнапрямках  Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Програма мо же працювати зі сторонньою біб ліотек ою
через адаптер 
Таким чином, д ля програми бір жових к отирувань ви мог ли б
створити к лас XML_To_JSON_Adapter ,який би обг ортав об ’єкт
того чи іншог о класу біб ліотеки аналітики Ваш к од поси-
лав би адапт еру запити у форматі XML, а адапт ер спочатку б
транс лював вхідні дані у формат JSON, а по тім пере давав їх
методам заг орнут ого об’єкта аналітики 
Аналогія з жит тя
Під час вашої першої по доро жі за к ордон спроба зарядити
ноутбук мо же стати неприємним сюрпризом, т ому що с та-
ндар ти розет ок у багать ох країнах різнять ся Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Вміст валіз до й після поїздки за кордон 
Ваша європейська зарядка с тане непо трібом у США без спе-
ціальног о адапт ера, що дозво ляє під’ єднуватися до розетки
іншог отипу
Структура
Адапт ер об ’єктів
Ця реалізація вик орис товує агрегацію: об ’єкт адапт ера
«загортає», т обто міс тить посилання на с лужбовий об ’єкт
Такий підхід працює в у сіх мовах програмування Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Клієнт — це к лас, який міс тить існуючу бізне с-логіку
програми 
Клієнт ський інт ерфейс опис ує про токол, через який к лієнт
може працювати з іншими класами 
Сервіс — це який-неб удь корисний к лас, зазвичай с торонній
Клієнт не мо же вик орис товувати цей к лас безпос ередньо,
оскільки с ервіс має незрозумілий йому інтерфейс 
Адапт ер— це к лас, який мо же одночасно працювати і з
клієнт ом, і з с ервіс ом Він реалізу є клієнт ський інт ерфейс і
містить посилання на об ’єкт с ервіс у Адаптер отриму є вик ли-
ки від к лієнта через мет оди клієнт ського інтерфейс у, а по тім
конвер тує їх у вик лики мет одів заг орнут ого об’єкта в по трі-
бному форматі  Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Працюючи з адапт ером через інт ерфейс, к лієнт не
прив ’язується до к онкретног о класу адапт ера Завдяки ць ому
ви мо жете додавати до програми нові види адапт ерів, неза-
лежно від к лієнт ського коду Це мо же стати в наг оді, якщо
інтерфейс с ервіс у рапт ом змінить ся, наприк лад, піс ля вих о-
ду нової версії с тороннь оїбібліотеки
Адапт ер класів
Ця реалізація базу ється на спадкуванні: адапт ер успадк о-
вує обидва інт ерфейси о дночасно  Такий підхід мо жливий
тільки в мовах, які підтримую ть мно жинне спадкування,
наприк лад у C++
Адапт ер класів не по требує вкладеног о об’єкта, т ому що він
може одночасно у спадкувати й час тину існуючог о класу, й
частину к ласусервіс у Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Псевдок од
У цьому жар тівливому прик ладі Адапт ерперетворює о дин
інтерфейс на інший, дозво ляючи поєднувати квадратні кіло-
чки та кр угліотвори 
Прик лад адаптації к вадратних кіло чків та кр углих отворів 
Адаптер обчис лює найменший радіу с кола, у як е можна впи-
сати квадратний кілочок, і по дає йог о як кр углий кілочок із
цим радіу сом
Класизсумісними інтерфейсами: КруглийОтвір та 
КруглийКілочок
classclassRoundHoleRoundHole isis 
constructorconstructor RoundHole (radius){} 
methodmethodgetRadius ()isis 
Повернути радіусотвору  Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)methodmethodfits(peg:RoundPeg )isis 
returnreturnthisthisgetRadius ()>=peggetRadius () 

classclassRoundPegRoundPeg isis 
constructorconstructor RoundPeg (radius){} 

methodmethodgetRadius ()isis 
Повернути радіускруглого кілочка 


Застарілий несумісний клас:КвадратнийКілочок 
classclassSquarePegSquarePeg isis 
constructorconstructor SquarePeg (width){} 

methodmethodgetWidth ()isis 
Повернути ширинуквадратного кілочка 


Адаптер дозволяє використовувати квадратні кілочки йкруглі 
отвориразом 
classclassSquarePegAdapterSquarePegAdapter extendsextends RoundPeg isis 
privateprivate fieldfieldpeg:SquarePeg 

constructorconstructor SquarePegAdapter (peg:SquarePeg )isis 
thisthispeg=peg 

methodmethodgetRadius ()isis 
Обчислити половину діагоналі квадратного кілочка за 
теоремою Піфагора 
returnreturnpeggetWidth ()*Mathsqrt() 

 Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Застосування
Якщо ви х очет е вик орис тати с торонній к лас, але йог о інт е-
рфейс не відповідає решті к одів програми 
Адаптер дозво ляє с творити об ’єкт-прок ладку , який перетво-
рюватиме вик лики програми у формат , зрозумілий с торо-
нньомукласу
Якщо вам по трібно вик орис тати декілька існуючих підк ла-
сів, але в них не вис тачає як ої-неб удь спільної ф ункціона-
льнос ті, а розширити с уперк лас ви не можетеДесьуклієнтському програмному коді 
hole=newnewRoundHole () 
rpeg=newnewRoundPeg () 
holefits(rpeg)TRUE 

small_sqpeg =newnewSquarePeg () 
large_sqpeg =newnewSquarePeg () 
holefits(small_sqpeg )Помилка компіляції, несумісні типи 

small_sqpeg_adapter =newnewSquarePegAdapter (small_sqpeg ) 
large_sqpeg_adapter =newnewSquarePegAdapter (large_sqpeg ) 
holefits(small_sqpeg_adapter )TRUE 
holefits(large_sqpeg_adapter )FALSE 



 Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)Ви мог ли б с творити ще о дин рівень підк ласів та до дати до
них забрак лу ф ункціональніс ть А ле при ць ому дове деться
дублювати о дин і т ой самий к од в обо х гілках підкласів 
Більш е легантним рішенням б уло б розміс тити відс утню
функціональніс ть в адапт ері й прис тосувати йог о для робо-
ти із с уперк ласом Т акий адапт ер змо же працювати з у сіма
підкласами ієрар хії Ц е рішення сильно нагадуватиме пат е-
рнДекорат ор
Кроки реалізації
Перек онайт еся, що у вас є два к ласи з незр учними
інтерфейсами :
◦корисний сервіс — службовий к лас, який ви не мо же-
те змінювати (він або с торонній, або від нь ого зале жить
інший к од);
◦один або декілька клієнтів — існуючих к ласів програми,
які не мо жуть вик орис товувати с ервіс через не сумісний із
нимінтерфейс 
Опишіть к лієнт ський інт ерфейс, через який к ласи програм
могли б вик орис товувати к лассервіс у
Створіть к лас адапт ера, реалізувавши цей інтерфейс 
Розміс тіть в адапт ері по ле, що міс титиме посилання на об ’єкт
сервіс у Зазвичай це по ле заповнюю ть об ’єктом, пере даним
 Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)у конструктор адапт ера А ле цей об ’єкт мо жна пере давати й
безпос ередньо до мет одівадапт ера
Реалізуйт е всі мет оди к лієнт ського інт ерфейс у в адапт ері
Адаптер повинен де легувати основну робо тусервіс у
Програма повинна вик орис товувати адапт ер тільки через
клієнт ський інт ерфейс Ц е дозво лить легк о змінювати та
додавати адапт ери в майб утньому
Переваги та не доліки
Відокремлює та прих овує від к лієнта по дробиці перетворе-
ння різних інтерфейсів 
Ускладнює к од програми внас лідок вве дення до даткових
класів 
Відносини з іншими пат ернами
•Містпроектую ть заздалегідь, щоб розвивати ве ликі час ти-
ни програми окремо о дну від о дної Адапт ерзастосовується
постфактум, щоб зму сити не сумісні к ласи працювати разом 
•Адапт ерзмінює інт ерфейс існуючог о об ’єкта Декорат ор
покращу є інший об ’єкт без зміни йог о інт ерфейс у Причому
Декоратор підтриму є рекурсивну вк ладуваніс ть, на відміну
відАдаптер у


 Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)•Адапт ернадає к ласу аль тернативний інт ерфейс Декорат ор
надає розширений інт ерфейс Замісник надає т ой самий
інтерфейс 
•Фасад задає новий інт ерфейс, т оді як Адапт ерповторно
викорис товує старий Адаптер обгортає тільки о дин к лас, а
Фасадобгортає цілу підсис тему Крім т ого,Адаптер дозво-
ляє двом існуючим інт ерфейсам працювати спільно , заміс ть
того, щоб визначити повніс тюновий 
•Міст,Стратегія таСтан(а так ож тро хи іАдапт ер) маю ть схожі
структури к ласів — усі вони поб удовані за принципом
«композиції», т обто де легування робо ти іншим об ’єктам
Проте вони відрізняю ться тим, що вирішую ть різні проб ле-
ми Пам ’ятайт е, що пат ерни — це не тільки рецепт поб удови
коду певним чином, але й опис ування проб лем, які призве-
ли до так огорішення  Структурні пат ерни проектування  А даптер
#
krabatua@gmail com (#)МІСТТакож відомий як: Bridge
Міст— це с труктурний пат ерн проектування, який розділяє
один або кілька к ласів на дві окремі ієрар хії— абс тракцію
та реалізацію , дозво ляючи змінювати к од в о дній гілці
класів, незале жно від іншої  Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Проблема
Абстракція? Реалізація?! Звучить с трахіт ливо! Р озгляньмо
прос тенький прик лад, щоб зрозуміти про що йде мова 
У вас є к лас г еометричних Фігур,який має підк ласи Кругта
Квадрат Ви хочете розширити ієрар хію фігур за к ольором,
тобто мати Червоні таСиніфігури А ле для того, щоб вс е
це об ’єднати, дове деться створити  к омбінації підк ласів на
зразок СиніКруги таЧервоніКвадрати 
Кількість підк ласів зростає в геометричній прогресії 
При до даванні нових видів фігур і к ольорів кількіс ть комбі-
націй зрос татиме в г еометричній прогре сії Наприк лад, щоб
ввести в програму фігури трикутників, дове деться створити Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)відразу два нових к ласи трикутників, по о дному д ля кожно-
го кольору Після ць ого вве дення новог о кольору вимагати-
ме створення вж е трь ох класів, по о дному д ля кожног о виду
фігур  Чим далі, тим гірше 
Рішення
Корінь проб леми по лягає в т ому, що ми намагаємося роз-
ширити к ласи фігур о дразу в дво х незале жних площинах —
за видом та к ольором Саме це призво дить до розрос тання
дерева класів 
Патерн Міс т пропону є замінити спадкування на де легува-
ння Д ля ць ого потрібно виділити о дну з таких «площин» в
окрему ієрар хію і посилатися на об ’єкт цієї ієрар хії, заміс ть
зберігання йог о стану та пове дінки вс ередині о дногокласу
Розмно ження підк ласів мо жна зупинити, розбивши к ласи на
кільк аієрар хій Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Таким чином, ми мо жемо зробити Колірокремим к ласом з
підкласами Червоний таСинійКлас Фігуротримає посила-
ння на об ’єктКольору і змо же делегувати йому робо ту, якщо
виникне така не обхідніс ть Такий зв ’язок і с тане мос том між
Фігурами таКольором При до даванні нових к ласів к ольорів
не по трібно б уде звер татись до к ласів фігур і навпаки 
Абстракція і Р еалізація
Ці терміни б уло вве дено в книзі GoFпри описі Мос ту На
мій пог ляд, вони виг лядаю ть занадт о академічними та пока-
зують пат ерн ск ладнішим, ніж він є насправді Пам ’ятаючи
про прик лад з фігурами й к ольорами, давайт е все ж таки
розберемося, що мали на увазі авт орипатерна 
Отже,абстракція (або інтерфейс )— це уявний рівень к еру-
вання чим-неб удь, що не вик онує робо ту самос тійно , а де ле-
гує її рівню реалізації (який зветь сяплатформою )
Тільки не плутайт е ці т ерміни з інтерфейс ами або
абстрактними к ласамивашої мови програмування —
це не о дне і т ежсаме 
Gang o f Four  «Банда чо тирьох» Авт ори книги Design P atterns:
Elements of R eusable Object-Oriented Sof twarehttps:refact oringguru
ukgo f-book  Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Якщо г оворити про реальні програми, т о абс тракцією мо же
виступати графічний інт ерфейс програми (GUI), а реаліза-
цією — низьк орівневий к од операційної сис теми (API), до
якого графічний інт ерфейс звер таєть ся, реагуючи на дії
корис тувача 
Ви мо жете розвивати програму у дво х різних напрямках :
•мати кілька різних GUI (наприк лад, д ля звичайних к орис ту-
вачів та адмініс траторів)
•підтримувати багат о видів API (наприк лад, працювати під
Windo ws, Linux іmacOS )
Така програма мо же виг лядати як о дин ве ликий к лубок к оду,
в якому змішано умовні операт ори рівнів GUI таAPI
Коли зміни бер уть проект в «ос аду», вам легше відбиватис я, якщо
розділити моно літний к од на частини  Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Ви мо жете спроб увати с труктур увати цей хаос, с творивши
для кожної з варіацій інт ерфейс у-плат форми свої підк ласи
Але такий підхід призве де до зрос тання к ласів к омбінацій, і
з кожною новою плат формою їх б уде вс е більше й більше 
Ми мо жемо вирішити цю проб лему , зас тосувавши Міс т
Патерн пропону є розплутати цей к од, розділивши йог о на
двічастини :
•Абстракцію: рівень графічног о інтерфейс упрограми 
•Реалізацію: рівень взаємо дії з операційною системою 
Один з варіантів крос -платформової архітектури 
Абстракція де легуватиме робо ту одному з об ’єктів реалізації
Причому , реалізації мо жна б уде взаємозаміняти, але тільки
за умови, що всі вони с лідуватимуть єдиному інтерфейс у Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Таким чином, ви змо жете змінювати графічний інт ерфейс
програми, не чіпаючи низьк орівневий к од робо ти з операці-
йною сис темою  І навпаки, ви змо жете додавати підтримку
нових операційних сис тем, с творюючи нові підк ласи реа-
лізації, без не обхіднос ті правити к од у к ласах графічног о
інтерфейс у
Структура
Абстракція містить к еруючу логіку  Код абс тракції де легує
реальну робо ту пов ’язаному об ’єктовіреалізації 
Реалізація опис ує загальний інт ерфейс д ля всіх реалізацій
Всі мет оди, які тут описані, б удуть дос тупні з к ласу абс тра-
кції та йог опідкласів  Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Інтерфейси абс тракції та реалізації мо жуть або збігатися,
або б ути абс олютно різними Про те, зазвичай в реалізації
живуть базові операції, на яких б удуються ск ладні операції
абстракції 
Конкретні реалізації містять плат формо-зале жний код
Розширені абс тракції містять різні варіації к еруючої логіки
Як і батьківский к лас, працює з реалізаціями тільки через
загальний інт ерфейс реалізацій 
Клієнт працює тільки з об ’єктами абс тракції Не рах уючи
початк ового зв’язування абс тракції з о днією із реалізацій,
клієнт ський к од не має прямог о дос тупу до об ’єктів
реалізації 
Псевдок од
У цьому прик ладі Містділить моно літний к од приладів та
пультів на дві час тини: прилади (вис тупаю ть реалізацією) і
пульти керування ними (вис тупаю тьабстракцією )
Клас пу льта має посилання на об ’єкт приладу , яким він к ерує
Пульти працюю ть з приладами через загальний інт ерфейс
Це дає мо жливіс ть зв ’язати пу льти з різними приладами 
Пульти мо жна розвивати незале жно від приладів Д ля ць ого
достатнь о створити новий підк лас абс тракції Ви мо жете Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)створити як прос тий пу льт з двома кнопками, так і більш
складний пу льт з тач-інт ерфейс ом
Прик лад поділу дво х ієрар хій класів — приладів та пу льтів керування 
Клієнт ському к оду залишаєть ся вибрати версію абс тракції
та реалізації, з якими він х оче працювати, та зв ’язати їх
міжсобою 
Класпультів маєпосилання напристрій, якимкеруєМетоди 
цьогокласуделегують роботуметодам пов'язаного пристрою 
classclassRemoteRemoteisis 
protectedprotected fieldfielddevice:Device 
constructorconstructor Remote(device:Device)isis 
thisthisdevice=device  Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)methodmethodtogglePower ()isis 
ifif(deviceisEnabled ())thenthen 
devicedisable() 
elseelse 
deviceenable() 
methodmethodvolumeDown ()isis 
devicesetVolume (devicegetVolume ()-) 
methodmethodvolumeUp ()isis 
devicesetVolume (devicegetVolume ()+) 
methodmethodchannelDown ()isis 
devicesetChannel (devicegetChannel ()-) 
methodmethodchannelUp ()isis 
devicesetChannel (devicegetChannel ()+) 


Виможетерозширювати класпультів, нечіпаючи кодпристроїв 
classclassAdvancedRemoteAdvancedRemote extendsextends Remoteisis 
methodmethodmute()isis 
devicesetVolume () 


Всіпристрої маютьспільний інтерфейс, томузнимиможе 
працювати будь-який пульт 
interfaceinterface DeviceDeviceisis 
methodmethodisEnabled () 
methodmethodenable() 
methodmethoddisable() 
methodmethodgetVolume () 
methodmethodsetVolume (percent) 
methodmethodgetChannel () 
methodmethodsetChannel (channel) 
 Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Застосування
Якщо ви х очет е розділити монолітний к лас, який міс тить
кілька різних реалізацій як ої-неб удь ф ункціональнос ті
(наприк лад, якщо к лас мо же працювати з різними сис тема-
ми баз даних )
Чим більший к лас, тим важче розібратись у йог о коді, і тим
більше це розтягу є час розробки Крім т ого, зміни, що вно-
сяться в о дну з реалізацій, призво дять до ре дагування всь о-
го класу, що мо же вик ликати появу не сподіваних помилок
укодіРазомзцим,коженпристрій маєособливу реалізацію 
classclassTvTvimplementsimplements Deviceisis 
 

classclassRadioRadioimplementsimplements Deviceisis 
 


Десьуклієнтському програмному коді 
tv=newnewTv() 
remote=newnewRemote(tv) 
remotetogglePower () 

radio=newnewRadio() 
remote=newnewAdvancedRemote (radio) 


 Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Міст дозво ляє розділити моно літний к лас на кілька окремих
ієрар хій Піс ля ць ого ви мо жете змінювати к од в о дній гілці
класів незале жно від іншої Ц е спрощу є робо ту над к одом і
зменшу є ймовірніс ть вне сення помилок 
Якщо к лас по трібно розширювати в дво х незале жних
площинах 
Міст пропону є виділити о дну з таких площин в окрему ієра-
рхію к ласів, зберігаючи посилання на о дин з її об ’єктів у
початк овому класі
Якщо ви х очет е мати мо жливіс ть змінювати реалізацію під
час вик онання програми 
Міст дозво ляє замінювати реалізацію навіть під час вик она-
ння програми, оскільки к онкретна реалізація не «зашита» в
класабстракції 
До ре чі, через цей пункт Міст часто плутають із Страте-
гією Зверніть у вагу, що у Моста цей пункт займає останнє
місце за значущістю , оскільки його го ловна задача — стр у-
ктурна
Кроки реалізації
Визначт е, чи існую ть у ваших к ласах два непере січних вимі-
ри Ц е мо же бути ф ункціональніс тьплат форма, пре дметна



 Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)областьінфрас труктура, фронт -ендбек -енд або інт ерфейс
реалізація
Продумайт е, які операції б удуть по трібні к лієнтам, і опишіть
їх у базовому к ласіабстракції 
Визначт е пове дінки, які дос тупні на всіх плат формах, та
виберіть з них ту час тину, яка б уде по трібна д ля абс тракції
На підс таві ць ого опишіть загальний інт ерфейс реалізації 
Для кожної плат форми с творіть власний к лас к онкретної
реалізації Всі вони повинні до тримуватися загальног о інт е-
рфейс у, який ми виділили пере дцим
Додайте до к ласу абс тракції посилання на об ’єкт реаліза-
ції Р еалізуйт е мет оди абс тракції, де легуючи основну робо ту
пов’язаному об ’єкту реалізації 
Якщо у вас є кілька варіацій абс тракції, с творіть д ля кожної
з них власний підклас
Клієнт повинен по дати об ’єкт реалізації до к онструктора
абстракції, щоб зв ’язати їх разом Піс ля ць ого він мо же
вільно вик орис товувати об ’єкт абс тракції, заб увши про
реалізацію 
Переваги та не доліки
Дозво ляє б удувати плат формо-незале жніпрограми 
Прих овує зайві або небезпечні деталі реалізації від к ліє-
нтськогокоду

 Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)Реалізу єпринцип відкритостізакритості 
Ускладнює к од програми внас лідок вве дення до даткових
класів 
Відносини з іншими пат ернами
•Містпроектую ть заздалегідь, щоб розвивати ве ликі час ти-
ни програми окремо о дну від о дної Адапт ерзастосовується
постфактум, щоб зму сити не сумісні к ласи працювати разом 
•Міст,Стратегія таСтан(а так ож тро хи іАдапт ер) маю ть схожі
структури к ласів — усі вони поб удовані за принципом
«композиції», т обто де легування робо ти іншим об ’єктам
Проте вони відрізняю ться тим, що вирішую ть різні проб ле-
ми Пам ’ятайт е, що пат ерни — це не тільки рецепт поб удови
коду певним чином, але й опис ування проб лем, які призве-
ли до так огорішення 
•Абстрактна фабрика може працювати спільно з Мостом Це
особливо к орисно , якщо у вас є абс тракції, які мо жуть пра-
цювати тільки з деякими реалізаціями В ць ому випадку
фабрика визначатиме типи с творюваних абс тракцій та
реалізацій 
•Патерн Будівельник може бути поб удований у виг ляді
Мосту:директор гратиме ро ль абс тракції, а будівельники —
реалізації 

 Структурні пат ерни проектування  Міс т
#
krabatua@gmail com (#)КОМПОНУВА ЛЬНИКТакож відомий як: Дерево ,Composite
Компонувальник — це с труктурний пат ерн проектування,
що дає змогу згр упувати декілька об ’єктів у деревопо дібну
структур у, а по тім працювати з нею так, ніби це
одиничний об’єкт Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Проблема
Патерн К омпонувальник має с енс тільки в тих випадках,
коли основна мо дель вашої програми мо же бути с труктуро-
вана у виг ляді дерева 
Наприк лад, є два об ’єкти —Продукт іКоробка Коробка
може міс тити кілька Продуктів та інших Коробок меншог о
розмір у Останні, в свою чергу , також міс тять або Продукти ,
або Коробки і так далі
Замовлення мо же складатис я з різних прод уктів, запак ованих у
власні коробки  Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Тепер , припу стімо, що ваші Продукти йКоробки можуть б ути
частиною замовлень При ць ому замовлення мо же міс ти-
ти як звичайні Продукт без пакування, так і наповнені змі-
стомКоробки Ваше завдання по лягає в т ому, щоб дізнатися
вартість всь огозамовлення 
Якщо спроб увати вирішити завдання напро лом, т оді по трі-
бно відкрити у сі коробки замовлення, перебрати про дукти
й порах увати їхню загальну вар тість А ле це занадт о вели-
ка морока, оскільки типи к оробок і їхній вміс т можуть б ути
вам невідомі заздалегідь Крім т ого, напере д невідомою є і
кількіс ть рівнів вк ладенос ті коробок, т ому перебрати к ороб-
ки прос тим цик лом не вийде 
Рішення
Компонувальник пропону є розг лядати Продукт іКоробку
через єдиний інт ерфейс зі спільним мет одом о трима-
нняціни
Продукт прос то поверне свою вар тість, а Коробка запитає
про вар тість кожног о пре дмета вс ередині с ебе і поверне
сумурезультатів 
Якщо о дним із внутрішніх пре дметів виявить ся тро хи менша
коробка, вона т еж буде перебирати власний вміс т, і так далі,
допоки не порах ується вміс т усіх ск ладових частин Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Компону вальник рек урсивно запу скає дію по всіх к омпонентах
дерева — від к оріння до листя 
Для вас як к лієнта важ ливим є т е, що вж е не по трібно нічог о
знати про с труктур у замовлень Ви вик ликаєт е мет од отри-
мання ціни, він повер тає цифр у, і ви не «т онете» в г орах
картону та скотчу
Аналогія з жит тя
Прик лад армійськ оїструктури  Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Армії більшос ті країн мо жуть б ути пре дставлені у виг ляді
перевернутих дерев На нижнь ому рівні у вас с олдати, далі
взводи, далі по лки, а далі цілі армії Накази від даються зве-
рху вниз с труктурою к омандування до тих пір , поки вони не
доходять до к онкретног осолдата 
Структура
  Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Компонент опис ує загальний інт ерфейс д ля прос тих і ск ла-
дових к омпонентів дерева 
Лист— це прос тий к омпонент дерева, який не має відга-
лужень Класи лис тя міс титимуть більшу час тину к орисног о
коду, тому що їм нік ому пере давати йог овиконання 
Контейнер (або композит )— це ск ладовий к омпонент дере-
ва Він міс тить набір дочірніх к омпонентів, але нічог о не
знає про їхні типи Ц е мо жуть б ути як прос ті компоненти-
листя, так і інші к омпоненти-к онтейнери Про те, це не про-
блема, якщо у сі дочірні к омпоненти до тримую ться єдиног о
інтерфейс у
Методи контейнера переадре совую ть основну робо ту своїм
дочірнім к омпонентам, х оча мо жуть до давати щось своє до
результату
Клієнт працює з деревом через загальний інт ерфейс
компонентів 
Завдяки ць ому, клієнту не важ ливо , що пере д ним знах оди-
ться— прос тий чи ск ладовий к омпонент дерева 
Псевдок од
У цьому прик ладі Компонувальник допомагає реалізувати
вкладені г еометричні фігури  Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Прик лад редактора геометричних фігур 
Клас CompoundGraphic може міс тити б удь-яку кількіс ть підфі-
гур, включно з такими самими к онтейнерами, як і він сам
Контейнер реалізу є ті ж самі мет оди, що і прос ті фігури А ле
заміс ть безпос ередньої дії він пере дає вик лики всім вк ла-
деним к омпонентам, вик орис товуючи рекурсію  Потім він як
би «підс умову є» резу льтати всіх вк ладених фігур 
Клієнт ський к од працює з у сіма фігурами через загальний
інтерфейс фігур і не знає що пере д ним — прос та фігура Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)чи ск ладова Ц е дозво ляє к лієнт ському к оду працювати з
деревами об ’єктів б удь-як ої ск ладнос ті, не прив ’язуючись до
конкретних к ласів об ’єктів, що формую тьдерево 
Загальний інтерфейс компонентів 
interfaceinterface GraphicGraphic isis 
methodmethodmove(x,y) 
methodmethoddraw() 

Простий компонент 
classclassDotDotimplementsimplements Graphic isis 
fieldfieldx,y 

constructorconstructor Dot(x,y){} 

methodmethodmove(x,y)isis 
thisthisx+=x,thisthisy+=y 

methodmethoddraw()isis 
Намалювати крапкуукоординатах X,Y 

Компоненти можутьрозширювати іншікомпоненти 
classclassCircleCircleextendsextends Dotisis 
fieldfieldradius 

constructorconstructor Circle(x,y,radius){} 

methodmethoddraw()isis 
Намалювати коловкоординатах X,Yзрадіусом R 

 Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Контейнер містить операції додаваннявидалення дочірніх 
компонентів Усістандартні операції інтерфейсу компонентів 
вінделегує кожному здочірніх компонентів 
classclassCompoundGraphicCompoundGraphic implementsimplements Graphic isis 
fieldfieldchildren :arrayofGraphic 

methodmethodadd(child:Graphic)isis 
Додатикомпонент доспискадочірніх 

methodmethodremove(child:Graphic)isis 
Прибрати компонент зіспискудочірніх 

methodmethodmove(x,y)isis 
foreachforeach (childinchildren )do 
childmove(x,y) 

methodmethoddraw()isis 
Длякожного дочірнього компонента: 
-Відобразити компонент 
-Визначити координати максимальної межі 
Намалювати пунктирну межунавколо всієїобласті 

Програма працюєодноманітно, якзодиничними компонентами, 
такізцілимигрупами компонентів 
classclassImageEditorImageEditor isis 
fieldfieldall:CompoundGraphic 

methodmethodload()isis 
all=newnewCompoundGraphic () 
alladd(newnewDot(,)) 
alladd(newnewCircle(,,)) 
  Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Застосування
Якщо вам по трібно пре дставити деревоподібну с труктуру
об’єктів
Патерн К омпонувальник пропону є зберігати в ск ладових
об’єктах посилання на інші прос ті або ск ладові об ’єкти Вони,
у свою чергу , теж мо жуть зберігати свої вк ладені об ’єкти і
так далі У підс умку, ви мо жете будувати ск ладну деревопо-
дібну с труктур у даних, вик орис товуючи всь ого два основних
різновида об ’єктів
Якщо к лієнти повинні однак ово тракт увати прос ті та ск ла-
дові об ’єкти
Завдяки т ому, що прос ті та ск ладові об ’єкти реалізую ть спі-
льний інт ерфейс, к лієнту байдуж е, з яким саме об ’єктом він
працюватиме Групування обраних компонентів водинскладний компонент 
methodmethodgroupSelected (components :arrayofGraphic)isis 
group=newnewCompoundGraphic () 
foreachforeach (component incomponents )do 
groupadd(component ) 
allremove(component ) 
alladd(group) 
Усікомпоненти будутьпромальованими 
alldraw() 




 Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Кроки реалізації
Перек онайт еся, що вашу бізне с-логіку мо жна пре дставити
як деревопо дібну с труктур у Спроб уйте розбити її на про-
сті компоненти й к онтейнери Пам ’ятайт е, що к онтейнери
можуть міс тити як прос ті компоненти, так і інші вк ладені
контейнери 
Створіть загальний інт ерфейс к омпонентів, який об ’єднає
операції к онтейнерів та прос тих к омпонентів дерева Інт е-
рфейс б уде вдалим, якщо ви змо жете вик орис товувати йог о,
щоб взаємозаміняти прос ті й ск ладові к омпоненти без втра-
тисенсу
Створіть к лас к омпонентів-лис тя, які не маю ть по дальших
відгалуж ень Майт е на увазі, що програма мо же міс тити
декілька таких класів 
Створіть к лас к омпонентів-к онтейнерів і до дайте до нь ого
масив д ля зберігання посилань на вк ладені к омпоненти
Цей масив повинен б ути здат ен міс тити як прос ті, так і ск ла-
дові к омпоненти, т ому перек онайт еся, що йог о оголошено з
типом інт ерфейс укомпонентів 
Реалізуйт е в к онтейнері мет оди інт ерфейс у компонентів,
пам’ятаючи про т е, що к онтейнери повинні де легувати осно-
вну робо ту своїм дочірнім компонентам  Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)Додайте операції до давання й видалення дочірніх к омпоне-
нтів до к ласуконтейнерів 
Майт е на увазі, що мет оди до даваннявидалення дочірніх
компонентів мо жна ог олосити так ож і в інт ерфейсі к омпо-
нентів Т ак, це пор ушить принцип розділення інтерфейс у,
тому що реалізації мет одів б удуть поро жніми в к омпоне-
нтах-листях Про те усі компоненти дерева с тануть дійсно
однак овими д ляклієнта 
Переваги та не доліки
Спрощу є архітектур у клієнта при робо ті зі ск ладним дере-
вомкомпонентів 
Полегшу є додавання нових видів компонентів 
Створює занадт о загальний дизайн класів 
Відносини з іншими пат ернами
•Будівельник дозво ляє покрок ово к онструювати дерево
Компонувальника 
•Ланцю жок обов ’язків часто вик орис товую ть разом з Компо-
нувальник ом У ць ому випадку запит пере даєть ся від дочі-
рніх к омпонентів до їхніх батьків 
•Ви мо жете обходити дерево Компонувальника , вик орис то-
вуючи Ітерат ор



 Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)•Ви мо жете вик онати яку сь дію над у сім деревом Компонува-
льника за допомог оюВідвідувача 
•Компонувальник часто поєдную ть з Легк оваг овик ом, щоб
реалізувати спільні гілки дерева та заощадити при ць ому
пам’ять
•Компонувальник таДекорат ормають схожі структури к ла-
сів, бо обидва поб удовані на рекурсивній вк ладенос ті Вона
дозво ляє зв ’язати в о дну с труктур у не скінченну кількіс ть
об’єктів
Декоратор обгортає тільки о дин об ’єкт, а вузо лКомпону-
вальник аможе мати багат о діт ейДекоратор додає вк ла-
деному об ’єкту нової ф ункціональнос ті, а Компону вальник
не до дає нічог о новог о, але «підс умову є» резу льтати всіх
своїх дітей
Але вони мо жуть і співпрацювати: Компону вальник може
викорис товувати Декоратор , щоб перевизначити ф ункції
окремих час тин дерева компонентів 
•Архітектура, поб удована на Компонувальниках таДекора-
торах , час то мо же по ліпшуватися за рах унок впровадж е-
ння Прототипу  Він дозво ляє к лонувати ск ладні с труктури
об’єктів, а не збирати їх заново  Структурні пат ерни проектування  К омпонувальник
#
krabatua@gmail com (#)ДЕКОРАТОРТакож відомий як: Wrapper ,Обгортк а,Decorator
Декорат ор— це с труктурний пат ерн проектування, що дає
змогу динамічно до давати об ’єктам нову ф ункціональніс ть,
загортаючи їх у к орисні «обгортки» Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Проблема
Ви працюєт е над біб ліотекою сповіщень, яку мо жна підк лю-
чати до різноманітних програм, щоб о тримувати сповіщення
про важ ливі події
Основою біб ліотеки є к лас Notifier з мет одом send,який
приймає на вхід рядок -повідомлення і надсилає йог о всім
адмініс траторам е лектронною пошт ою Стороння програма
повинна с творити й налаштувати цей об ’єкт, вказавши, к ому
надсилати сповіщення, та вик орис товувати йог о щоразу ,
коли щось відбуваєть ся
Сторонні програми вик ористовують го ловний к лассповіщень 
В якийсь момент с тало зрозуміло , що к орис тувачам не
вистачає о дних тільки email-сповіщень Д еякі з них х отіли б
отримувати сповіщення про критичні проб леми через SMS
Інші х отіли б о тримувати їх у виг ляді Fac ebook -повідомле-
нь К орпоративні к орис тувачі х отіли би бачити повідомле-
нняуSlack  Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Кожен тип сповіщення живе у власному підкласі
Спершу ви до дали к ожен з типів сповіщень до програми,
успадкувавши їх від базовог о класуNotifier Тепер к ори-
стувачі мог ли вибрати о дин з типів сповіщень, який і вик о-
ристовувався надалі 
Але по тім хт ось резонно запитав, чому не мо жна увімкну-
ти кілька типів сповіщень о дночасно? А дже, якщо у вашому
будинку рапт ом почалася по жежа, ви б х отіли о тримати спо-
віщення по всіх каналах, чи не так?
Комбінаторний виб ух підк ласів при поєднанні типів сповіщень  Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Ви зробили спроб у реалізувати всі мо жливі к омбінації під-
класів сповіщень, але піс ля того, як до дали перший де сяток
класів, с тало зрозуміло , що такий підхід неймовірно розду-
ває к одпрограми 
Отже, по трібен інший спосіб к омбінування пове дінки
об’єктів, який не призво дить до збільшення кільк ості
підкласів 
Рішення
Спадкування — це перше, що прих одить в г олову багать ом
програміс там, к оли по трібно розширити яку-неб удь чинну
пове дінку  Про те механізм спадкування має кілька прикрих
проб лем
•Вінстатичний  Ви не мо жете змінити пове дінку об ’єкта, який
вже існу є Д ля ць ого не обхідно с творити новий об ’єкт,
вибравши інший підклас
•Вінне дозволяє нас лідувати пове дінку декільк ох класів
одночасно  Тому дове деться створювати безліч підк ласів-
комбінацій, щоб досяг ти поєднання пове дінки 
Одним зі спос обів, що дозво ляє обійти ці проб леми, є замі-
на спадкування агрегацією абокомпозицією Це той випа-
док, к оли один об ’єктутриму єінший і де легує йому робо ту,
Композиція — це більш с уворий варіант агрегації, при як ому к омпоне-
нти не мо жуть існувати без к онтейнера Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)заміс ть того, щоб самому успадк увати його пове дінку  Саме
на ць ому принципі поб удовано пат ернДекоратор
Спадкування проти Агрегації
Декоратор має аль тернативну назву —обгортк а Вона більш
вдало опис ує суть пат ерна: ви розміщу єте ціль овий об ’єкт
у іншому об ’єкті-обг ортці, який запу скає базову пове дінку
об’єкта, а по тім до дає до резу льтату щось своє
Обидва об ’єкти маю ть загальний інт ерфейс, т ому д ля кори-
стувача немає ж одної різниці, з чим працювати — з чис тим
чи заг орнутим об ’єктом Ви мо жете вик орис товувати кілька
різних обг орток одночасно — резу льтат б уде мати об ’єднану
пове дінку всіх обгорток
В нашому прик ладі зі сповіщеннями залишимо в базовому
класі прос те надсилання сповіщень е лектронною пошт ою, а
розширені спос оби зробимо декораторами 
Стороння програма, яка вис тупає к лієнт ом, під час початк о-
вого налашт овування б уде заг ортати об ’єкт сповіщення в ті
обгортки, які відповідаю ть бажаному спос обусповіщення  Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Розширені спос оби надсилання сповіщень стають декораторами 
Програма мо же збирати ск ладові об ’єкти з декораторів 
Остання обг ортка у списку б уде саме тим об ’єктом, з яким
клієнт працюватиме уве сь інший час Д ля решти к лієнт сько-
го коду нічог о не змінить ся, адж е всі обг ортки маю ть такий
самий інт ерфейс, що і базовий к лассповіщень  Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Так само мо жна змінювати не тільки спосіб дос тавки спо-
віщень, але й форматування, спис ок адре сатів і так далі
До того ж к лієнт змо же «дозаг орнути» об ’єкт у б удь-які інші
обгортки, якщо йому ць огозахочеть ся
Аналогія з жит тя
Одяг мо жна одягати кільк ома шарами, отримую чи
комбінований ефект 
Будь-який о дяг — це аналог Д екоратора Зас тосовуючи
Декоратор, ви не змінюєт е початк овий к лас і не с творює-
те дочірніх к ласів Т ак само з о дягом: вдягаючи светра, ви
не пере стаєте бути с обою , але о триму єте нову влас тивіс ть—
захис т від х олоду Ви мо жете піти далі й о дягти звер ху ще
один дек оратор— плащ, щоб захис титися від дощу  Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Структура
Компонент задає загальний інт ерфейс обг орток та об ’єктів,
щозагортаються
Конкретний к омпонент визначає к лас об ’єктів, що заг ортаю-
ться Він міс тить яку сь базову пове дінку , яку по тім змінюю ть
декоратори Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Базовий дек орат орзберігає посилання на вк ладений об ’єкт-
компонент  Це мо же бути як к онкретний к омпонент , так і
один з к онкретних дек ораторів Базовий дек оратор де легує
всі свої операції вк ладеному об ’єкту Додаткова пове дінка
житиме в к онкретних декораторах 
Конкретні дек орат ори — це різні варіації дек ораторів, що
містять до даткову пове дінку  Вона вик онується до або піс ля
виклику аналогічної пове дінки заг орнут ого об’єкта
Клієнт може обер тати прос ті компоненти й дек оратори в
інші дек оратори, працюючи з у сіма об ’єктами через зага-
льний інт ерфейс компонентів 
Псевдок од
У цьому прик ладі Декорат орзахищає фінанс ові дані до да-
тковими рівнями безпеки прозоро д ля к оду, який їх
викорис товує
Програма обг ортає к лас даних у шифр уючу та с тискаючу
обгортку, які при читанні видаю ть оригінальні дані, а при
записі — зашифровані та стислі Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Прик лад шифр ування й к омпресії даних за допомогою обгорток 
Декоратори, як і сам к лас даних, маю ть спільний інт ерфейс
Тому к лієнт ському к оду не важ ливо , з чим працювати — зі
звичайним об ’єктом даних чи з загорнутим 
Загальний інтерфейс компонентів 
interfaceinterface DataSourceDataSource isis 
methodmethodwriteData (data) 
methodmethodreadData ():data  Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Одинзконкретних компонентів реалізує базову 
функціональність
classclassFileDataSourceFileDataSource implementsimplements DataSource isis 
constructorconstructor FileDataSource (filename ){} 

methodmethodwriteData (data)isis 
Записати данідофайлу 

methodmethodreadData ():dataisis 
Прочитати данізфайлу 

Базовий класусіхдекораторів містить кодобгортування 
classclassDataSourceDecoratorDataSourceDecorator implementsimplements DataSource isis 
protectedprotected fieldfieldwrappee:DataSource 

constructorconstructor DataSourceDecorator (source:DataSource )isis 
wrappee =source 

methodmethodwriteData (data)isis 
wrappeewriteData (data) 

methodmethodreadData ():dataisis 
returnreturnwrappeereadData () 

Конкретні декоратори додають щосьсвоєдобазової поведінки 
обгорнутого компонента 
classclassEncryptionDecoratorEncryptionDecorator extendsextends DataSourceDecorator isis 
methodmethodwriteData (data)isis 
Зашифрувати поданідані 
Передати зашифровані данідометодуwriteData 
обгорнутого об'єкта (wrappee) 
 Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)methodmethodreadData ():dataisis 
Отримати данізметодуreadData обгорнутого 
об'єкта (wrappee) 
Розшифрувати їх,якщовонизашифровані 
Повернути результат 

Декорувати можнанетількибазовікомпоненти, алейвже 
обгорнуті об'єкти 
classclassCompressionDecoratorCompressionDecorator extendsextends DataSourceDecorator isis 
methodmethodwriteData (data)isis 
Запакувати поданідані 
Передати запаковані данідометодуwriteData 
обгорнутого об'єкта (wrappee) 

methodmethodreadData ():dataisis 
Отримати данізметодуreadData обгорнутого 
об'єкта (wrappee) 
Розпакувати їх,якщовонизапаковані 
Повернути результат 


Варіант Простий приклад збирання тавикористання 
декораторів 
classclassApplicationApplication isis 
methodmethoddumbUsageExample ()isis 
source=newnewFileDataSource ("somefiledat" ) 
sourcewriteData (salaryRecords ) 
Дофайлубулозанесено чистідані 

source=newnewCompressionDecorator (source) 
sourcewriteData (salaryRecords ) 
Дофайлубулозанесено стислідані  Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)source=newnewEncryptionDecorator (source) 
Заразуsourceзнаходиться зв'язка зтрьохоб'єктів: 
Encryption >Compression >FileDataSource 

sourcewriteData (salaryRecords ) 
Дофайлубулозанесено стислітазашифровані дані 


Варіант Клієнтський код,якийвикористовує зовнішнє 
джерело данихКласSalaryManager нічогонезнаєпроте,як 
самебудезчитано тазаписано даніВінотримує вжеготове 
джерело даних 
classclassSalaryManagerSalaryManager isis 
fieldfieldsource:DataSource 

constructorconstructor SalaryManager (source:DataSource ){} 

methodmethodload()isis 
returnreturnsourcereadData () 

methodmethodsave()isis 
sourcewriteData (salaryRecords ) 
Інші корисні методи 


Програма можерізнимшляхомзбирати об'єкти, якідекоруються 
залежно відумоввикористання 
classclassApplicationConfiguratorApplicationConfigurator isis 
methodmethodconfigurationExample ()isis 
source=newnewFileDataSource ("salarydat" ) 
ifif(enabledEncryption ) 
source=newnewEncryptionDecorator (source)  Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Застосування
Якщо вам по трібно додавати об ’єктам нові обов ’язки «на
льоту», непомітно д ля коду, який їх викорис товує
Об’єкти вк ладаю ться в обг ортки, які маю ть до даткові пове-
дінки Обг ортки і самі об ’єкти маю ть однак овий інт ерфейс,
тому к лієнтам не важ ливо , з чим працювати — зі звичайним
об’єктом чи з загорнутим 
Якщо не мо жна розширити обов ’язки об ’єкта за допомог ою
спадк ування 
У багать ох мовах програмування є к лючове с лово final,
яке мо же заб локувати спадкування к ласу Розширити такі
класи мо жна тільки за допомог оюДекоратораifif(enabledCompression ) 
source=newnewCompressionDecorator (source) 

logger=newnewSalaryManager (source) 
salary=loggerload() 
 




 Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Кроки реалізації
Перек онайт еся, що у вашому завданні прис утні основний
компонент і декілька опціональних доповнень-надб удов
надним
Створіть інт ерфейс к омпонента, який опис ував би загальні
методи як д ля основног о компонента, так і д ля йог о
доповнень 
Створіть к лас к онкретног о компонента й поміс тіть в нь ого
основну бізне с-логіку 
Створіть базовий к лас дек ораторів Він повинен мати по ле
для зберігання посилань на вк ладений об ’єкт-компонент  Усі
методи базовог о дек оратора повинні де легувати робо ту
вкладеному об ’єкту
Конкретний к омпонент , як і базовий дек оратор, повинні
дотримуватися о дного і того самог о інтерфейс укомпонента 
Створіть к ласи к онкретних дек ораторів, у спадк овуючи їх від
базовог о дек оратора К онкретний дек оратор повинен вик о-
нувати свою до даткову ф ункціональніс ть, а по тім (або пере д
цим) вик ликати цю ж операцію заг орнут ого об’єкта
Клієнт бере на с ебе відповідальніс ть за к онфігурацію і поря-
док заг ортання об ’єктів Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Переваги та не доліки
Більша гнучкіс ть, ніж у спадкування 
Дозво ляє до давати обов ’язки «на льоту»
Можна до давати кілька нових обов ’язків одразу 
Дозво ляє мати кілька дрібних об ’єктів, заміс ть одного об’єкта
«на всі випадки життя»
Важк о конфігур увати об ’єкти, які заг орнут о в декілька обг о-
ртокодночасно 
Велика кількіс ть крихітних класів 
Відносини з іншими пат ернами
•Адапт ерзмінює інт ерфейс існуючог о об ’єкта Декорат ор
покращу є інший об ’єкт без зміни йог о інт ерфейс у Причому
Декоратор підтриму є рекурсивну вк ладуваніс ть, на відміну
відАдаптер у
•Адапт ернадає к ласу аль тернативний інт ерфейс Декорат ор
надає розширений інт ерфейс Замісник надає т ой самий
інтерфейс 
•Ланцю жок обов ’язків таДекорат ормають дуж е схожі стру-
ктури Обидва пат ерни базую ться на принципі рекурсивно-
го вик онання операції через с ерію пов ’язаних об ’єктів А ле є
декілька важ ливих відміннос тей






 Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)Обробники в Ланцю жку обов ’язків можуть вик онувати дові-
льні дії, незале жні о дна від о дної, а так ож у б удь-який моме-
нт переривати по дальшу пере дачу ланцю жком З іншог о
боку,Декоратори розширюю ть певну дію , не ламаючи інт е-
рфейс базової операції і не перериваючи вик онання інших
декораторів
•Компонувальник таДекорат ормають схожі структури к ла-
сів, бо обидва поб удовані на рекурсивній вк ладенос ті Вона
дозво ляє зв ’язати в о дну с труктур у не скінченну кількіс ть
об’єктів
Декоратор обгортає тільки о дин об ’єкт, а вузо лКомпону-
вальник аможе мати багат о діт ейДекоратор додає вк ла-
деному об ’єкту нової ф ункціональнос ті, а Компону вальник
не до дає нічог о новог о, але «підс умову є» резу льтати всіх
своїх дітей
Але вони мо жуть і співпрацювати: Компону вальник може
викорис товувати Декоратор , щоб перевизначити ф ункції
окремих час тин дерева компонентів 
•Архітектура, поб удована на Компонувальниках таДекора-
торах , час то мо же по ліпшуватися за рах унок впровадж е-
ння Прототипу  Він дозво ляє к лонувати ск ладні с труктури
об’єктів, а не збирати їх заново 
•Стратегія змінює пове дінку об ’єкта «зс ередини», а Декора-
торзмінює йог о «ззовні» Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)•Декорат ортаЗамісник мають схожі структури, але різні при-
значення Вони с хожі тим, що обидва поб удовані на к омпо-
зиції та де легуванні робо ти іншому об ’єкту Пат ерни
відрізняю ться тим, що Замісник сам к ерує жит тям с ервісног о
об’єкта, а обг ортання Декораторів контро люєть сяклієнт ом Структурні пат ерни проектування  Д екоратор
#
krabatua@gmail com (#)ФАСАДТакож відомий як: Facade
Фасад — це с труктурний пат ерн проектування, який надає
прос тий інт ерфейс до ск ладної сис теми к ласів, біб ліотеки
абофреймворку  Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)Проблема
Вашому к оду дово диться працювати з ве ликою кількіс тю
об’єктів певної ск ладної біб ліотеки чи фреймворка Ви пови-
нні самос тійно ініціалізувати ці об ’єкти, с тежити за прави-
льним порядк ом зале жнос тейтощо
В резу льтаті бізне с-логіка ваших к ласів тісно переплітаєть ся
з деталями реалізації с торонніх к ласів Т акий к од досить
складно розуміти та підтримувати 
Рішення
Фасад — це прос тий інт ерфейс д ля робо ти зі ск ладною під-
системою , яка міс тить безліч к ласів Фасад мо же бути спро-
щеним відображ енням сис теми, що не має % тієї
функціональнос ті, як ої мо жна б уло б досяг ти, вик орис то-
вуючи ск ладну підсис тему безпос ередньо Разом з тим, він
надає саме ті «фічі», які по трібні к лієнт ові, і прих овує
всеінше 
Фасад к орисний у т ому випадку , якщо ви вик орис товуєте
якусь ск ладну біб ліотеку з безліччю р ухомих час тин, з яких
вам по трібна тільки час тина Наприк лад, програма, що зали-
ває в с оціальні мере жі віде о з к ошенятками, мо же вик ори-
стовувати профе сійну біб ліотеку д ля стискання віде о, але
все, що по трібно к лієнт ському к оду цієї програми, — це
прос тий мет одencode(filename, format) Створивши к лас з
таким мет одом, ви реалізу єте свій перший фасад 
 Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)Аналогія з жит тя
Прик лад замовлення через телефон 
Коли ви т елефону єте до магазину і робит е замовлення, співро-
бітник с лужби підтримки є вашим фасадом до всіх с лужб і від-
ділів магазину  Він надає вам спрощений інт ерфейс до сис теми
створення замовлення, платіжної сис теми та від ділу доставки 
Структура

 Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)Фасад надає швидкий дос туп до певної ф ункціональнос ті
підсис теми Він «знає», яким к ласам по трібно переадре сува-
ти запит , і які дані д ля ць огопотрібні 
Додатк овий фасад можна вве сти, щоб не захаращувати єди-
ний фасад різнорідною ф ункціональніс тю Він мо же вик ори-
стовуватися як к лієнт ом, так й іншими фасадами 
Складна підсис тема має безліч різноманітних к ласів Д ля
того, щоб приму сити у сіх їх щось робити, по трібно знати
подробиці влаштування підсис теми, порядок ініціалізації
об’єктів та інші деталі 
Класи підсис теми не знаю ть про існування фасаду і працюю-
ть один з о дним безпос ередньо
Клієнт викорис товує фасад заміс ть безпос ередньої робо ти з
об’єктами ск ладної підсис теми
Псевдок од
У цьому прик ладі Фасад спрощу є робо ту зі ск ладним фре-
ймворк ом конвер тації відео Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)Прик лад ізо ляції мно жини залежностей в одному фасаді
Заміс ть безпос ередньої робо ти з дю жиною к ласів, фасад
надає к оду програми єдиний мет од для конвер тації віде о,
який сам по дбає про т е, щоб правильно налаштувати по трі-
бні об ’єкти фреймворку і о тримати не обхідний результат
Класискладного стороннього фреймворку конвертації відеоМи 
неконтролюємо цейкод,томунеможемойогоспростити 
classclassVideoFileVideoFile 


classclassOggCompressionCodecOggCompressionCodec 


classclassMPEGCompressionCodecMPEGCompressionCodec 
  Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)classclassCodecFactoryCodecFactory 
 

classclassBitrateReaderBitrateReader 
 

classclassAudioMixerAudioMixer 
 


Замість цього,мистворюємо Фасад—простий інтерфейс для 
роботизіскладним фреймворком Фасаднемаєвсієї 
функціональності фреймворку, алеприховує йогоскладність від 
клієнтів 
classclassVideoConverterVideoConverter isis 
methodmethodconvert(filename ,format):Fileisis 
file=newnewVideoFile (filename ) 
sourceCodec =newnewCodecFactory extract(file) 
ifif(format=="mp") 
destinationCodec =newnewMPEGCompressionCodec () 
elseelse 
destinationCodec =newnewOggCompressionCodec () 
buffer=BitrateReader read(filename ,sourceCodec ) 
result=BitrateReader convert(buffer,destinationCodec ) 
result=(newnewAudioMixer ())fix(result) 
returnreturnnewnewFile(result) 

Програма незалежить відскладного фреймворку конвертації 
відеоДоречі,якщовираптомвирішите змінити фреймворк, 
вампотрібно будепереписати тількикласфасаду 
classclassApplicationApplication isis 
methodmethodmain()isis  Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)Застосування
Якщо вам по трібно надати прос тий або урізаний інт ерфейс
до ск ладної підсис теми
Часто підсис теми у складнюю ться в мір у розвитку програ-
ми Зас тосування більшос ті пат ернів призво дить до появи
менших к ласів, але у ве ликій кільк ості Таку підсис тему про-
стіше вик орис товувати повт орно , налашт овуючи її к ожен раз
під к онкретні по треби, але, разом з тим, вик орис товувати
таку підсис тему без налашт овування важче Фасад пропо-
нує певний вид сис теми за замовчуванням, який влашт овує
більшіс тьклієнтів 
Якщо ви х очет е розк ласти підсис тему на окремі рівні 
Викорис товуйт е фасади д ля визначення т очок вх оду на
кожен рівень підсис теми Якщо підсис теми зале жать о дна
від о дної, т оді зале жність мо жна спрос тити, дозво ливши під-
системам обмінюватися інформацією тільки через фасади 
Наприк лад, візьмемо ту ж саму ск ладну сис тему к онвер та-
ції віде о Ви х очете розбити її на окремі шари д ля робо ти з
аудіо й віде о Можна спроб увати с творити фасад д ля кожноїconvertor =newnewVideoConverter () 
mp=convertor convert("funny-cats-videoogg" ,"mp") 
mpsave() 




 Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)з цих час тин і приму сити к ласи ау діо та віде о обробки спі-
лкуватися о дин з о дним через ці фасади, а не безпос ере-
дньо
Кроки реалізації
Визначт е, чи мо жна с творити більш прос тий інт ерфейс, ніж
той, який надає ск ладна підсис тема Ви на правильному
шлях у, якщо цей інт ерфейс позбавить к лієнта від не обхідно-
сті знати по дробиці підсис теми
Створіть к лас фасаду , що реалізу є цей інт ерфейс Він пови-
нен переадре совувати вик лики к лієнта по трібним об ’єктам
підсис теми Фасад повинен б уде по дбати про т е, щоб прави-
льно ініціалізувати об ’єкти підсис теми
Ви о тримаєт е мак симум к орис ті, якщо к лієнт працюватиме
тільки з фасадом В так ому випадку зміни в підсис темі с то-
суватимуть ся тільки к оду фасаду , а клієнт ський к од залиши-
тьсяробочим 
Якщо відповідальніс ть фасаду с тає розмит ою, подумайт е
про вве дення до даткових фасадів 
Переваги та не доліки
Ізолює к лієнтів від к омпонентів ск ладної підсис теми

 Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)Фасад ризику є стати божественим об ’єктом, прив ’язаним до
всіх к ласів програми 
Відносини з іншими пат ернами
•Фасад задає новий інт ерфейс, т оді як Адапт ерповторно
викорис товує старий Адаптер обгортає тільки о дин к лас, а
Фасадобгортає цілу підсис тему Крім т ого,Адаптер дозво-
ляє двом існуючим інт ерфейсам працювати спільно , заміс ть
того, щоб визначити повніс тюновий 
•Абстрактна фабрика може бути вик орис тана заміс тьФасаду
для того, щоб прих овати плат формо-зале жнікласи
•Легк оваг овик показу є, як с творювати багат о дрібних
об’єктів, а Фасад показу є, як с творити о дин об ’єкт, який від-
ображає цілу підсис тему
•Посередник таФасад схожі тим, що намагаю ться організу-
вати робо ту багать ох існуючих класів 
◦Фасадстворює спрощений інт ерфейс підсис теми, не вно-
сячи в неї ж одної до даткової ф ункціональнос ті Сама під-
система не знає про існування Фасаду Класи підсис теми
спілкую ться один з о дним безпос ередньо
◦Посередник централізу є спілкування між к омпонентами
системи К омпоненти сис теми знаю ть тільки про існува-
нняПосередник а, у них немає прямог о дос тупу до інших
компонентів 
 Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)•Фасад можна зробити Одинак ом, оскільки зазвичай по трі-
бен тільки о дин об ’єкт-фасад
•Фасад схожий на Замісник тим, що замінює ск ладну під-
систему та мо же сам її ініціалізувати А ле, на відміну від
Фасаду,Замісник має такий самий інт ерфейс, що і йог о слу-
жбовий об ’єкт, завдяки чому їх мо жна взаємозаміняти Структурні пат ерни проектування  Фасад
#
krabatua@gmail com (#)ЛЕГК ОВАГ ОВИКТакож відомий як: Пристос уванець, Кеш,Flyweight
Легк оваг овик — це с труктурний пат ерн проектування, що
дає змогу вміс тити більшу кількіс ть об ’єктів у відве деній
оперативній пам ’яті Легк оваговик заощаджу є пам ’ять,
розпо діляючи спільний с тан об ’єктів між с обою , заміс ть
зберігання о днак ових даних у к ожному об’єкті Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)Проблема
На дозвіллі ви вирішили написати неве лику гр у, в якій гравці
переміщую ться по кар ті та с тріляю ть один в о дного Фішк ою
гри повинна б ула стати реаліс тична сис тема час тинок Ку лі,
снаряди, у ламки від виб ухів— вс е це повинно реаліс тично
літати та гарно виглядати 
Гра відмінно працювала на вашому по тужному к омп’ютері,
проте ваш др уг повідомив, що гра починає гальмувати й
вилітає через кілька хвилин піс ля запу ску Пере дивившись
логи, ви виявили, що гра вилітає через не стачу оперативної
пам’яті У вашог о друга к омп’ютер значно менше «прокача-
ний», т ому проб лема в нь ого й проявляєть ся так швидк о
Дійсно , кожна час тинка у грі пре дставлена власним об ’єктом,
що має безліч даних У певний момент , коли побоїще на
екрані досягає ку льмінації, оперативна пам ’ять к омп’ютера
вже не мо же вміс тити нові об ’єкти час тинок, і програма
«вилітає»
 Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)Рішення
Якщо уважно по дивитися на к лас час тинок, т о мо жна помі-
тити, що к олір і спрайт займаю ть найбільше пам ’яті Більше
того, ці по ля зберігаю ться в к ожному об ’єкті, х оча фактично
їхні значення є о днак овими д ля більшос тічастинок 
Інший с тан об ’єктів — координати, вект ор р уху й швидкі-
сть відрізняю ться для всіх час тинок Т аким чином, ці по ля
можна розг лядати як к онтекст, у як ому вик орис товується
частинка, а к олір і спрайт — це дані, що не змінюю ться
вчасі
Незмінні дані об ’єкта прийнят о називати «внутрішнім с та-
ном» Всі інші дані — це «зовнішній стан»
Патерн Легк оваговик пропону є не зберігати зовнішній с тан
у класі, а пере давати йог о до тих чи інших мет одів через
параметри Т аким чином, о дні і ті самі об ’єкти мо жна б уде
повторно вик орис товувати в різних к онтекстах Г оловна ж Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)перевага в т ому, що т епер знадобить ся набагат о менше
об’єктів, адж е вони т епер відрізнятимуть ся тільки внутрішнім
станом, а він не має так багат оваріацій 
У нашому прик ладі з час тинками дос татнь о буде залишити
лише три об ’єкти, що відрізняю ться спрайтами і к ольором —
для ку ль, снарядів та у ламків Не складно здогадатися, що
такі по легшені об ’єкти називаю тьлегковаговик ами
Назва прийшла з бок су і означає ваг ову кат егорію до  кг Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)Сховище зовнішнь ого стану
Але ку ди переїде зовнішній с тан? А дже хтось повинен йог о
зберігати Найчас тіше йог о переміщую ть до к онтейнера,
який к ерував об ’єктами до зас тосування патерна 
В нашому випадку це б ув головний к лас гри Ви мог ли б
додати до йог о класу поля-масиви д ля зберігання к оорди-
нат, вект орів і швидк остей час тинок Крім ць ого, потрібен
буде ще о дин масив д ля зберігання посилань на об ’єкти-
легковаговики, що відповідаю ть тій чи іншій частинці 
Більш е легантним рішенням б уло б с творити до датковий
клас-контекст, який пов ’язував би зовнішній с тан з тим чи
іншим легк оваговик ом Ц е дозво лить обійтися тільки о дним
полем-масивом у к ласіконтейнера 
«Але стривайт е, нам б уде по трібно с тільки ж цих об ’єктів,
скільки б уло на самому початку!» — скаж ете ви і б удете Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)праві! А ле річ у тім, що об ’єкти-к онтексти займаю ть набага-
то менше місця, ніж початк ові А дже найважчі по ля залиши-
лися вс ередині легк оваговика (вибачт е за каламб ур), і зараз
ми будемо посилатися на ці об ’єкти з к онтекстів, заміс ть того,
щоб повт орно зберігати с тан, що дублюєть ся
Незмінніс ть Легк оваг овиків
Оскільки об ’єкти легк оваговиків б удуть вик орис тані в різних
контекстах, ви повинні б ути впевненими в т ому, що їхній
стан немо жливо змінити піс ля створення Ве сь внутрішній
стан легк оваговик повинен о тримувати через параметри
конструктора Він не повинен мати с еттерів і пуб лі-
чних полів
Фабрика Легк оваг овиків
Для зр учнос ті робо ти з легк оваговиками і к онтекстами
можна с творити фабричний мет од, що приймає в параме-
трах уве сь внутрішній (іно ді й зовнішній) с тан бажаног о
об’єкта
Найбільша к орис ть ць ого мет оду в т ому, щоб знах одити вж е
створених легк оваговиків з таким самим внутрішнім с таном,
як по трібно  Якщо легк оваговик знах одиться, йог о мо жна
повторно вик орис товувати Якщо немає — прос то створює-
моновий  Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)Зазвичай цей мет од додають до к онтейнера легк оваговиків
або с творюю ть окремий к лас-фабрику  Йог о навіть мо жна
зробити с татичним і розміс тити в к ласі легк оваговиків
Структура
Ви завж ди повинні пам ’ятати про т е, що легк оваговик зас то-
совується в програмі, яка має ве личезну кількіс ть однак ових
об’єктів Цих об ’єктів повинно б ути так багат о, щоб вони не
вміщалися в дос тупній оперативній пам ’яті без до даткових
хитрощів Пат ерн розділяє дані цих об ’єктів на дві час тини —
легковаговики та контексти
Легк оваг овик містить с тан, який повт орювався в багать ох
первинних об ’єктах О дин і т ой самий легк оваговик мо же
викорис товуватись у зв ’язці з безліччю к онтекстів С тан, що Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)зберігаєть ся тут , називаєть сявнутрішнім , а т ой, який він
отриму є ззовні, —зовнішнім 
Контекстмістить «зовнішню» час тину с тану, унікальну д ля
кожног о об ’єкта К онтекст пов ’язаний з о дним з об ’єктів-
легковаговиків, що зберігаю ть стан, який залишився 
Пове дінку оригінальног о об ’єкта найчас тіше залишаю ть у
легковаговику , пере даючи значення к онтексту через пара-
метри мет одів Т им не менше, пове дінку мо жна розміс тити й
в контексті, вик орис товуючи легк оваговик як об ’єктданих 
Клієнт обчис лює або зберігає к онтекст, тобто зовнішній с тан
легковаговиків Д ля к лієнта легк оваговики виг лядаю ть як
шаблонні об ’єкти, які мо жна налаштувати під час вик орис та-
ння, пере давши к онтекст через параметри 
Фабрика легк оваг овиків керує створенням і повт орним
викорис танням легк оваговиків Фабрика о триму є запити, в
яких зазначено бажаний с тан легк оваговика Якщо легк ова-
говик з таким с таном вж е створений, фабрика відразу йог о
повер тає, а якщо ні — створює новий об ’єкт
Псевдок од
У цьому прик ладі Легк оваг овик допомагає заощадити опе-
ративну пам ’ять при відображ енні на екрані мільйонів
об’єктів-дерев Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)Легковаговик виділяє повт орювану час тину с тану з осно-
вного класуTreeі розміщу є йог о в до датковому к ласі
TreeType Тепер , заміс ть зберігання повт орюваних даних в
усіх об ’єктах, окремі дерева б удуть посилатися на кілька
спільних об ’єктів, що зберігаю ть ці дані Клієнт працює з
деревами через фабрику дерев, яка прих овує від нь ого
складніс ть кешування спільних даних дерев 
Таким чином, програма б уде вик орис товувати набагат о
менше оперативної пам ’яті, що дозво лить намалювати на
екрані більше дерев, вик орис товуючи т е ж саме «залізо» Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)Цейклас-легковаговик містить лишечастину полів,які 
описують дерева Навідміну, наприклад, відкоординат, ці 
полянеєунікальними длякожного дерева, оскільки декілька 
деревможутьматитакийсамийколірчитекстуру Томуми 
переносимо повторювані данідоодногоєдиного об'єкта й 
посилаємося наньогозмножини окремих дерев 
classclassTreeTypeTreeType isis 
fieldfieldname 
fieldfieldcolor 
fieldfieldtexture 
constructorconstructor TreeType (name,color,texture){} 
methodmethoddraw(canvas,x,y)isis 
Створити зображення даноготипу,кольору й 
текстури 
Відобразити йогонаполотні впозиції X,Y 

Фабрика легковаговиків вирішує, колипотрібно створити нового 
легковаговика, аколиможнаобійтися існуючим 
classclassTreeFactoryTreeFactory isis 
staticstaticfieldfieldtreeTypes :collection oftreetypes 
staticstaticmethodmethodgetTreeType (name,color,texture)isis 
type=treeTypes find(name,color,texture) 
ifif(type==nullnull) 
type=newnewTreeType (name,color,texture) 
treeTypes add(type) 
returnreturntype 

Контекстний об'єкт, зякогомивиділили легковаговик 
TreeType Упрограмі можутьбутитисячіоб'єктів Tree, 
оскільки накладні витрати наїхнєзберігання зовсім 
невеликі —впам'яті требазберігати лишетрицілихчисла 
(двікоординати йпосилання)  Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)Застосування
Якщо не вис тачає оперативної пам ’яті д ля підтримки всіх
потрібних об ’єктів
Ефективніс ть пат ерна Легк оваг овик багат о в чому зале жить
від того, як і де він вик орис товується Зас тосовуйт е цей пат е-
рн у випадках, к оли вик онано всі перерах овані умови :classclassTreeTreeisis 
fieldfieldx,y 
fieldfieldtype:TreeType 
constructorconstructor Tree(x,y,type){} 
methodmethoddraw(canvas)isis 
typedraw(canvas,thisthisx,thisthisy) 

КласиTreeіForestєклієнтами Легковаговика Заумови,що 
надалівамнепотрібно розширювати класдерев,їхможназлити 
докупи 
classclassForestForestisis 
fieldfieldtrees:collection ofTrees 

methodmethodplantTree (x,y,name,color,texture)isis 
type=TreeFactory getTreeType (name,color,texture) 
tree=newnewTree(x,y,type) 
treesadd(tree) 

methodmethoddraw(canvas)isis 
foreachforeach (treeintrees)do 
treedraw(canvas) 


 Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)•у програмі вик орис товується ве лика кількіс ть об ’єктів;
•через це вис окі витрати оперативної пам ’яті;
•більшу час тину с тану об ’єктів мо жна вине сти за ме жі їхніх
класів;
•великі гр упи об ’єктів мо жна замінити неве ликою кількіс тю
об’єктів, що розділяю ться, оскільки зовнішній с танвине сено
Кроки реалізації
Розділіть по ля к ласу, який с тане легк оваговик ом, на дві
частини :
◦внутрішній с тан: значення цих по лів о днак ові д ля ве ликої
кільк ості об’єктів
◦зовнішній с тан (к онтекст): значення по лів унікальні д ля
кожног о об’єкта
Залишіть по ля внутрішнь ого стану в к ласі, але перек онайт е-
ся, що їхні значення немо жливо змінити Ці по ля повинні
ініціалізуватись тільки через конструктор
Перетворіть по ля зовнішнь ого стану на параметри мет одів,
у яких ці по ля вик орис товувалися По тім видаліть по ля
зкласу
Створіть фабрику , яка б уде кешувати та повт орно від давати
вже створені об ’єкти Клієнт повинен о тримувати легк оваго- Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)вика з певним внутрішнім с таном саме з цієї фабрики, а не
створювати йог о безпос ередньо
Клієнт повинен зберігати або обчис лювати значення зовні-
шнього стану (к онтекст) і пере давати йог о до мет одів об ’єкта
легковаговика
Переваги та не доліки
Заощаджу є оперативну пам ’ять
Витрачає проце сорний час на пошукобчис лення контексту
Ускладнює к од програми внас лідок вве дення безлічі до да-
ткових класів 
Відносини з іншими пат ернами
•Компонувальник часто поєдную ть з Легк оваг овик ом, щоб
реалізувати спільні гілки дерева та заощадити при ць ому
пам’ять
•Легк оваг овик показу є, як с творювати багат о дрібних
об’єктів, а Фасад показу є, як с творити о дин об ’єкт, який від-
ображає цілу підсис тему
•Патерн Легк оваг овик може нагадувати Одинака , якщо д ля
конкретног о завдання ви змог ли зменшити кількіс ть об ’єктів
до о дного Але пам ’ятайт е, що між пат ернами є дві с уттєві
відміннос ті:



 Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)На відміну від Одинак а, ви мо жете мати безліч об ’єктів-
легковаговиків
Об’єкти-легк оваговики повинні б ути незмінними, т оді як
об’єкт-одинак допу скає зміну свог остану Структурні пат ерни проектування  Легк оваговик
#
krabatua@gmail com (#)ЗАМІСНИКТакож відомий як: Proxy
Замісник — це с труктурний пат ерн проектування, що дає
змогу підс тавляти заміс ть реальних об ’єктів спеціальні
об’єкти-замінники Ці об ’єкти пере хоплюю ть вик лики до
оригінальног о об’єкта, дозво ляючи зробити щось дочипісля
пере дачі вик лику оригіналові  Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Проблема
Для чог о взагалі к онтро лювати дос туп до об ’єктів? Р озгля-
немо такий прик лад: у вас є зовнішній ре сурсоємний об ’єкт,
який по трібен не ве сь час, а лише зрідка 
Запити до бази даних мо жуть б ути д ужеповільними 
Ми мог ли б с творювати цей об ’єкт не на самому початку
програми, а тільки т оді, коли він реально к ому-неб удь зна-
добить ся К ожен клієнт об ’єкта о тримав би деякий к од від-
кладеної ініціалізації Ц е, ймовірно , призве ло б до
дублювання ве ликої кільк остікоду
В ідеалі цей к од хотілося б поміс тити безпос ередньо до с лу-
жбовог о класу, але це не завж ди мо жливо  Наприк лад, к од
класу може знах одитися в закритій с торонній бібліотеці
Рішення
Патерн Замісник пропону є створити новий к лас-дублер,
який має т ой самий інт ерфейс, що й оригінальний с лужбо-
вий об ’єкт При о триманні запиту від к лієнта об ’єкт-замісник
 Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)сам би с творював примірник с лужбовог о об ’єкта та пере-
адре совував би йому всю реальну робо ту
Замісник «прикидаєтьс я» базою даних, приск орюю чи роботу
внаслідок ледачої ініціалізації і к ешування запитів,
щоповторюютьс я
Але в чому ж йог о корис ть? Ви мог ли б поміс тити до к ласу
замісника яку сь проміжну логіку , що вик онувалася б до або
після вик ликів цих самих мет одів чинног о об’єкта А завдяки
однак овому інт ерфейс у об’єкт-замісник мо жна пере дати до
будь-як ого коду, що очіку є на с ервісний об ’єкт
Аналогія з жит тя
Платіжною к артк ою мо жна розрах овуватис я так с амо, як
іготівк ою Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Платіжна кар тка— це замісник пачки г отівки І чек, і г оті-
вка маю ть спільний інт ерфейс — ними обома мо жна оплачу-
вати т овари Виг ода покупця в т ому, що не по трібно носити
з собою «т онни» г отівки З іншог о боку власник магазину
не змушений замовляти к лопітку інкасацію к оштів з магази-
ну, бо вони по трапляю ть безпос ередньо на йог о банківський
рахунок 
Структура
Інтерфейс с ервіс увизначає загальний інт ерфейс д ля сервіс у
й замісника Завдяки ць ому об ’єкт замісника мо жна вик ори-
стовувати там, де очіку ється об ’єктсервіс у
Сервіс містить к орисну бізне с-логіку  Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Замісник зберігає посилання на об ’єкт с ервіс у Піс ля того, як
замісник закінчу є свою робо ту (наприк лад, ініціалізацію , логу-
вання, захис т або інше), він пере дає вик лики вк ладеному с ерві-
су Замісник мо же сам відповідати за с творення й видалення
об’єкта сервіс у
Клієнт працює з об ’єктами через інт ерфейс с ервіс у Завдяки
цьому йог о мо жна «об дурити», підмінивши об ’єкт с ервіс у
об’єктомзамісника 
Псевдок од
У ць ому прик ладі Замісник допомагає до дати до програми
механізм ле дачої ініціалізації та к ешування резу льтатів робо ти
бібліотеки інт еграції з YouTube
Прик лад к ешування резу льтатів роботи реального с ервіс у за
допомогою замісник а Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Оригінальний об ’єкт починав завантаж ення з мере жі, навіть
якщо к орис тувач повт орно запитував о дне й т е саме віде о
Замісник завантажу є віде о тільки о дин раз, вик орис товуючи
для ць ого службовий об ’єкт, але в інших випадках повер тає
закешований файл 
Інтерфейс віддаленого сервісу 
interfaceinterface ThirdPartyYouTubeLibThirdPartyYouTubeLib isis 
methodmethodlistVideos () 
methodmethodgetVideoInfo (id) 
methodmethoddownloadVideo (id) 

Конкретна реалізація сервісу Методицьогокласузапитують у 
YouTube різнуінформацію Швидкість запитузалежить нелише 
відякостіінтернет-каналу користувача, алейвідстану 
самогоYouTube Тому,чимбільшебудевикликів досервісу, 
тимменшвідзивною станепрограма 
classclassThirdPartyYouTubeClassThirdPartyYouTubeClass implementsimplements ThirdPartyYouTubeLib isis 
methodmethodlistVideos ()isis 
Отримати списоквідеороликів задопомогою API 
YouTube 

methodmethodgetVideoInfo (id)isis 
Отримати детальну інформацію проякийсьвідеоролик 

methodmethoddownloadVideo (id)isis 
Завантажити відеозYouTube 

Зіншогобоку,можнакешувати запитидоYouTube іне 
повторювати їхдеякийчас,докикешнезастаріє Алевнести 
цейкодбезпосередньо всервісний класнеможливо, бовін  Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)знаходиться усторонній бібліотеці Томумипомістимо логіку 
кешування вокремий клас-обгортку Вінбудеделегувати запити 
сервісному об'єкту, тількиякщопотрібно безпосередньо 
відіслати запит 
classclassCachedYouTubeClassCachedYouTubeClass implementsimplements ThirdPartyYouTubeLib isis 
privateprivate fieldfieldservice:ThirdPartyYouTubeLib 
privateprivate fieldfieldlistCache ,videoCache 
fieldfieldneedReset 

constructorconstructor CachedYouTubeClass (service:ThirdPartyYouTubeLib )isis 
thisthisservice =service 

methodmethodlistVideos ()isis 
ifif(listCache ==nullnull||needReset ) 
listCache =servicelistVideos () 
returnreturnlistCache 

methodmethodgetVideoInfo (id)isis 
ifif(videoCache ==nullnull||needReset ) 
videoCache =servicegetVideoInfo (id) 
returnreturnvideoCache 

methodmethoddownloadVideo (id)isis 
ifif(!downloadExists (id)||needReset ) 
servicedownloadVideo (id) 

КласGUI,якийвикористовує сервісний об'єкт Замість 
реального сервісу, мипідсунемо йомуоб'єкт-замісник Клієнт 
нічогонепомітить, такякзамісник маєтойсамийінтерфейс, 
щойсервіс 
classclassYouTubeManagerYouTubeManager isis 
protectedprotected fieldfieldservice:ThirdPartyYouTubeLib  Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Застосування
Лінива ініціалізація (вір туальний прок сі) К оли у вас є
важкий об ’єкт, який завантаж ує дані з файлової сис теми або
бази даних constructorconstructor YouTubeManager (service:ThirdPartyYouTubeLib )isis 
thisthisservice =service 

methodmethodrenderVideoPage (id)isis 
info=servicegetVideoInfo (id) 
Відобразити сторінку відеоролика 

methodmethodrenderListPanel ()isis 
list=servicelistVideos () 
Відобразити списокпревьювідеороликів 

methodmethodreactOnUserInput ()isis 
renderVideoPage () 
renderListPanel () 

Конфігураційна частина програми створює тапередає клієнтам 
об'єктзамісника 
classclassApplicationApplication isis 
methodmethodinit()isis 
YouTubeService =newThirdPartyYouTubeClass() 
YouTubeProxy =newCachedYouTubeClass(YouTubeService) 
manager =newnewYouTubeManager (YouTubeProxy ) 
managerreactOnUserInput () 

 Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Заміс ть того, щоб завантажувати дані відразу піс ля старту
програми, мо жна заощадити ре сурси й с творити об ’єкт т оді,
коли він дійсно знадобить ся
Захис т дос тупу (захищаючий прок сі) К оли в програмі є різні
типи к орис тувачів, і вам х очеть ся захис тити об ’єкт від неа-
вторизованог о дос тупу Наприк лад, якщо ваші об ’єкти — це
важлива час тина операційної сис теми, а к орис тувачі — сто-
ронні програми (к орисні чи шкід ливі)
Прок сі мо же перевіряти дос туп під час к ожног о вик лику
та пере давати вик онання с лужбовому об ’єкту, якщо дос туп
дозво лено 
Локальний запу ск сервіс у (від далений прок сі) К оли спра-
вжній с ервісний об ’єкт знах одить ся на від даленому сервері 
У цьому випадку замісник транс лює запити к лієнта у вик ли-
ки через мере жу по про токолу, який є зрозумілим від дале-
ному сервіс у
Логування запитів (лог уючий прок сі) К оли по трібно збері-
гати іс торію звернень до с ервісног о об’єкта
Замісник мо же зберігати іс торію звернення к лієнта до
сервісног о об’єкта





 Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Кешування об ’єктів («розумне» посилання) К оли по трібно
кешувати резу льтати запитів к лієнтів і к ерувати їхнім
життєвим циклом
Замісник мо же підрах овувати кількіс ть посилань на с ерві-
сний об ’єкт, які б ули від дані к лієнту та залишаю ться активни-
ми К оли всі посилання звільнять ся, мо жна б уде звільнити
і сам с ервісний об ’єкт (наприк лад, закрити підк лючення до
бази даних )
Крім т ого, Замісник мо же відс тежувати, чи к лієнт не зміню-
вав с ервісний об ’єкт Це дозво лить повт орно вик орис товува-
ти об ’єкти й с уттєво заощаджувати ре сурси, ос обливо якщо
мова йде про ве ликі «ненаж ерливі» сервіси 
Кроки реалізації
Визначт е інт ерфейс, який би зробив замісника та оригіна-
льний об ’єкт взаємозамінними
Створіть к лас замісника Він повинен міс тити посилання на
сервісний об ’єкт Частіше за вс е сервісний об ’єкт с творюєть ся
самим замісник ом У рідкісних випадках замісник о триму є
готовий с ервісний об ’єкт від к лієнта через конструктор
Реалізуйт е мет оди замісника в зале жнос ті від йог о призна-
чення У більшос ті випадків, вик онавши яку сь корисну робо-
ту, мет оди замісника повинні пере дати запит с ервісному
об’єкту

 Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Подумайт е про вве дення фабрики, яка б вирішувала, який
з об’єктів с творювати: замісника або реальний с ервісний
об’єкт Про те, з іншог о боку , ця логіка мо же бути вк ладена до
створюючог о мет оду самог озамісника 
Подумайт е, чи не реалізувати вам ліниву ініціалізацію с ерві-
сного об ’єкта при першому зверненні к лієнта до мет одів
замісника 
Переваги та не доліки
Дозво ляє к онтро лювати с ервісний об ’єкт непомітно д ля
клієнта 
Може працювати, навіть якщо с ервісний об ’єкт ще не
створено 
Може контро лювати жит тєвий цик л службовог о об’єкта
Ускладнює к од програми внас лідок вве дення до даткових
класів 
Збільшу є час о тримання відк лику від сервіс у
Відносини з іншими пат ернами
•Адапт ернадає к ласу аль тернативний інт ерфейс Декорат ор
надає розширений інт ерфейс Замісник надає т ой самий
інтерфейс 





 Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)•Фасад схожий на Замісник тим, що замінює ск ладну під-
систему та мо же сам її ініціалізувати А ле, на відміну від
Фасаду,Замісник має такий самий інт ерфейс, що і йог о слу-
жбовий об ’єкт, завдяки чому їх мо жна взаємозаміняти
•Декорат ортаЗамісник мають схожі структури, але різні при-
значення Вони с хожі тим, що обидва поб удовані на к омпо-
зиції та де легуванні робо ти іншому об ’єкту Пат ерни
відрізняю ться тим, що Замісник сам к ерує жит тям с ервісног о
об’єкта, а обг ортання Декораторів контро люєть сяклієнт ом Структурні пат ерни проектування  Замісник
#
krabatua@gmail com (#)Пове дінк ові пат ерни
проект ування
Спис ок пове дінкових пат ернів проектування, які вирішую ть
завдання е фективної та безпечної взаємо дії між об 'єктами
програми 
Ланцю жок обов' язків
Chain o f Responsibility
Дає змогу пере давати запити пос лідовно ланцю жком обробни-
ків К ожен нас тупний обробник вирішу є, чи мо же він обробити
запит сам і чи вар то пере давати запит далі ланцю жком
Команда
Command
Перетворює запити на об 'єкти, дозво ляючи пере давати їх як
аргументи під час вик лику мет одів, с тавити запити в чергу ,
логувати їх, а так ож підтримувати скас ування операцій Пове дінкові пат ерни проектування
#
krabatua@gmail com (#)Ітерат ор
Iterator
Дає змогу пос лідовно об ходити е лементи ск ладових об 'єктів,
не розкриваючи їхнь ої внутрішнь ої організації
Посередник
Mediat or
Дає змогу зменшити зв' язаніс ть ве ликої кільк ості класів між
собою , завдяки переміщенню цих зв' язків до о дного класу-
посередника
Знімок
Mement o
Дає змогу зберігати та відновлювати мину лий с тан об 'єктів, не
розкриваючи по дробиць їхнь ої реалізації Пове дінкові пат ерни проектування
#
krabatua@gmail com (#)Спост ерігач
Observ er
Створює ме ханізм підписки, що дає змогу о дним об ’єктам с те-
жити й реагувати на по дії, які відб уваю ться в інших об ’єктах
Стан
State
Дає змогу об 'єктам змінювати пове дінку в зале жнос ті від
їхнього стану Ззовні с творюєть ся враж ення, ніби змінився к лас
об'єкта
Страт егія
Strat egy
Визначає сімейс тво с хожих алг оритмів і розміщу є кожен з них
у власному к ласі Піс ля ць ого алг оритми мо жна заміняти о дин
на інший прямо під час вик онання програми Пове дінкові пат ерни проектування
#
krabatua@gmail com (#)Шаблонний мет од
Templat e Method
Визначає кіс тяк алг оритму , перек ладаючи відповідальніс ть за
деякі йог о кроки на підк ласи Пат ерн дозво ляє підк ласам
перевизначати кроки алг оритму , не змінюючи йог о загальної
структури
Відвідувач
Visitor
Дає змогу до давати до програми нові операції, не змінюючи
класи об 'єктів, над якими ці операції мо жуть вик онуватися Пове дінкові пат ерни проектування
#
krabatua@gmail com (#)ЛАНЦЮ ЖОК
ОБОВ'ЯЗКІВТакож відомий як: Ланцюг відповідальностей, CoR,Chain of C ommand,
Chain of R esponsibilit y
Ланцю жок обов ’язків — це пове дінковий пат ерн
проектування, що дає змогу пере давати запити пос лідовно
ланцю жком обробників К ожен нас тупний обробник
вирішу є, чи мо же він обробити запит сам і чи вар то
пере давати запит далі ланцю жком Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Проблема
Уявіть, що ви робит е сис тему прийому онлайн-замовлень Ви
хочете обме жити до неї дос туп так, щоб тільки авт оризовані
корис тувачі мог ли створювати замовлення Крім т ого, певні
корис тувачі, які во лодіють правами адмініс тратора, повинні
мати повний дос туп до замовлень 
Ви швидк о збагну ли, що ці перевірки по трібно вик онува-
ти пос лідовно  Адже корис тувача мо жна спроб увати «зало-
гувати» у сис тему, якщо йог о запит міс тить логін і паро ль
Але, якщо така спроба не вдалась, т о перевіряти розширені
права дос тупу прос то немає сенсу
Запит про ходить ряд перевірок перед доступом до
системи замовлень 
Протягом нас тупних кільк ох місяців вам дове лося до дати ще
декілька таких пос лідовних перевірок 
•Хтось с лушно зауважив, що непогано б уло б перевіряти дані,
що пере даються в запиті, пере д тим, як вносити їх до сис те- Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)ми— рапт ом запит міс тить дані про покупку неіснуючих
продуктів 
•Хтось запропонував б локувати мас ові надсилання форми з
одним і тим самим логіном, щоб запобіг ти підбор у паро лів
ботами 
•Хтось зауважив, що непогано б уло б діс тавати форму замов-
лення з к ешу, якщо вона вж е була одного разу показана 
З час ом код перевірок стає вс е більш заплутаним 
З кожною новою «фічою» к од перевірок, що виг лядав як
величезний к лубок умовних операт орів, вс е більше і більше
«розб ухав» При зміні о дного правила дово дилося змінюва-
ти код усіх інших перевірок А щоб зас тосувати перевірки
до інших ре сурсів, дове лося так ож про дублювати їхній к од
в інших класах  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Підтримувати такий к од стало не тільки вкрай незр учно , але
й витратно  Аж ось о дного прекрасног о дня ви о триму єте
завдання рефакт орингу 
Рішення
Як і багат о інших пове дінкових пат ернів, ланцю жок
обов ’язків базу ється на т ому, щоб перетворити окремі пове-
дінки на об ’єкти У нашому випадку к ожна перевірка пере-
їде до окремог о класу з о дним мет одом вик онання Дані
запиту , що перевіряєть ся, пере даватимуть ся до мет оду як
аргументи 
А тепер справді важ ливий етап Пат ерн пропону є зв’язати
всі об ’єкти обробників в о дин ланцю жок К ожен обробник
міститиме посилання на нас тупног о обробника в ланцюзі
Таким чином, піс ля отримання запиту обробник змо же не
тільки опрацювати йог о самос тійно , але й пере дати обробку
наступному об ’єкту в ланцю жку
Пере даючи запити до першог о обробника ланцю жка, ви
можете бути впевнені, що всі об ’єкти в ланцюзі змо жуть йог о
обробити При ць ому довжина ланцю жка не має ж одного
значення 
І останній штрих Обробник не обов ’язково повинен пере да-
вати запит далі Причому ця ос обливіс ть мо же бути вик ори-
стана різними шляхами  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)У прик ладі з філь трацією дос тупу обробники перериваю ть
подальші перевірки, якщо по точну перевірку не пройдено 
Адже немає с енсу витрачати даремно ре сурси, якщо і так
зрозуміло , що із запит ом щось нетак
Обробники слід ують в ланцю жку один за іншим 
Але є й інший підхід, к оли обробники перериваю ть ланцюг ,
тільки якщо вони можутьобробити запит  У ць ому випадку
запит р ухаєть ся ланцюг ом, поки не знайдеть ся обробник,
який змо же йог о обробити Д уже час то такий підхід вик ори-
стовується для пере дачі по дій, що г енер уються у к ласах гра-
фічног о інтерфейс у внас лідок взаємо дії з корис тувачем 
Наприк лад, к оли к орис тувач к лікає по кнопці, програма
будує ланцю жок з об ’єкта цієї кнопки, всіх її батьківських
елементів і загальног о вікна програми на кінці По дія к ліку
пере даєть ся цим ланцю жком до тих пір , поки не знайде-
ться об ’єкт, здатний її обробити Ц ей прик лад примітний ще
й тим, що ланцю жок завж ди мо жна виділити з деревопо ді-
бної с труктури об ’єктів, в яку зазвичай і зг орнуті е лементи
корис тувацьк огоінтерфейс у Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Ланцю жок мо жна виділити навіть із дерева об’єктів
Дуже важ ливо , щоб у сі об ’єкти ланцю жка мали спільний
інтерфейс Зазвичай к ожному к онкретному обробник ові
достатнь о знати тільки т е, що нас тупний об ’єкт ланцю жка
має мет одвиконати Завдяки ць ому зв ’язки між об ’єктами
ланцю жка б удуть більш гнучкими Крім т ого, ви змо жете
формувати ланцю жки на ль оту з різноманітних об ’єктів, не
прив ’язуючись до к онкретних класів 
Аналогія з жит тя
Ви купили нову віде окар ту Вона авт оматично визначилася
й почала працювати під Windo ws, але у вашій у любленій
Ubuntu «заве сти» її не вдалося Ви т елефону єте до с лужби
підтримки виробника, але без ос обливих спо дівань на вирі-
шення проб леми  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Спочатку ви чу єте голос авт овідповідача, який пропону є
вибір з де сяти с тандар тних рішень Ж оден з варіантів не під-
ходить, і робо т з’єдну є вас з живим операт ором 
Прик лад спілк ування з підтримк ою
На жаль, звичайний операт ор підтримки вміє спілкувати-
ся тільки завченими фразами і давати тільки шаб лонні від-
повіді Піс ля черг ової пропозиції «вимкнути і ввімкнути
комп’ютер» ви просит е зв ’язати вас зі справжніми
інженерами 
Операт ор перекидає дзвінок черг овому інж енерові, який
знемагає від ну дьги у своїй к омірчині От він вж е точно знає,
як вам допомог ти! Інж енер розповідає вам, де завантажити
драйвери та як налаштувати їх під Ubuntu Запит вирішено 
Ви кладет еслухавку  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Структура
Обробник визначає спільний д ля всіх к онкретних обробни-
ків інт ерфейс Зазвичай дос татнь о описати о дин мет од
обробки запитів, але іно ді тут мо же бути ог олошений і мет од
встановлення нас тупног ообробника 
Базовий обробник — опціональний к лас, який дає змогу
позб утися дуб лювання о дного і т ого самог о коду в у сіх
конкретних обробниках  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Зазвичай цей к лас має по ле для зберігання посилання на
наступног о обробника у ланцю жку Клієнт зв ’язує обробни-
ків у ланцюг , подаючи посилання на нас тупног о обробни-
ка через к онструктор або с етер по ля Т акож в ць ому к ласі
можна реалізувати базовий мет од обробки, який би прос то
перенаправляв запити нас тупному обробнику , перевіривши
йогонаявніс ть
Конкретні обробники містять к од обробки запитів При
отриманні запиту к ожен обробник вирішу є, чи мо же він
обробити запит , а так ож чи вар то пере дати йог о нас тупному
об’єкту
У більшос ті випадків обробники мо жуть працювати само-
стійно і б ути незмінними, о тримавши всі не обхідні деталі
через параметри конструктора
Клієнт може сформувати ланцю жок лише о дин раз і вик ори-
стовувати йог о про тягом всь ого час у робо ти програми, так
і переб удовувати йог о динамічно , зале жно від логіки про-
грами Клієнт мо же відправляти запити б удь-як ому об ’єкту
ланцю жка, не обов ’язково першому зних
Псевдок од
У цьому прик ладі Ланцю жок обов ’язків відповідає за показ
контекстної допомоги д ля активних е лементів інт ерфейс у
корис тувача  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Графічний інтерфейс поб удований за допомогою к омпону вальник а, де
кожен елемент має посилання на с вій елемент-к онтейнер  Ланцю жок
можна виб удувати, пройшовши по всіх к онтейнерах, у які
вкладено елемент 
Графічний інт ерфейс програми зазвичай с труктурований у
вигляді дерева Клас Діалог,який відображає вс е вікно
програми, — це к орінь дерева Діалог міс тить Панелі,які,
в свою чергу , можуть міс тити або інші вк ладені пане лі, або
прос ті елементи на зразок Кнопок
Прос ті елементи мо жуть показувати неве ликі підказки, якщо
для них вказано допоміжний т екст Але є й більш ск ладні Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)компоненти, д ля яких цей спосіб демонс трації допомоги
занадт о прос тий Вони визначаю ть власний спосіб відобра-
ження к онтекстної допомоги 
Прик лад вик лику контек стної допомоги у ланцю жку об’єктів UI
Коли к орис тувач наво дить вказівник миші на е лемент і
тисне к лавішу F,програма надсилає ць ому е лементу запит
щодо показу допомоги Якщо він не міс тить ж одної довідк о-
вої інформації, запит по доро жує списк ом к онтейнерів э ле-
мента, доки не знах одиться той, що мо же відобразити
допомогу  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Інтерфейс обробників 
interfaceinterface ComponentWithContextualHelpComponentWithContextualHelp isis 
methodmethodshowHelp () 


Базовий класпростих компонентів 
abstractabstract classclassComponentComponent implementsimplements ComponentWithContextualHelp isis 
fieldfieldtooltipText :string 

Контейнер, щомістить компонент, служить вякості 
наступної ланкиланцюга 
protectedprotected fieldfieldcontainer :Container 

Базоваповедінка компонента заключається втому,щоб 
показати вспливаючу підказку, якщодлянеїзаданотекст 
Аякщоні—перенаправити запитсвоємуконтейнеру, якщо 
тойіснує 
methodmethodshowHelp ()isis 
ifif(tooltipText !=nullnull) 
Показати підказку 
elseelse 
container showHelp () 


Контейнери можутьмістити якпростікомпоненти, такйінші 
контейнери Тутформуються зв'язки ланцюжка Класуспадкує 
методshowHelp відсвогобатька 
abstractabstract classclassContainerContainer extendsextends Component isis 
protectedprotected fieldfieldchildren :arrayofComponent 
methodmethodadd(child)isis 
children add(child) 
childcontainer =thisthis  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Більшість конкретних компонентів влаштує базоваповедінка 
допомоги ізвспливаючою підказкою, щовониуспадкують від 
класуComponent 
classclassButtonButtonextendsextends Component isis 
 

Алескладні компоненти можутьперевизначати методпоказу 
допомоги по-своєму Алеівцьомувипадку вонизавждиможуть 
повернутися добазової реалізації, викликавши методбатька 
classclassPanelPanelextendsextends Container isis 
fieldfieldmodalHelpText :string 

methodmethodshowHelp ()isis 
ifif(modalHelpText !=nullnull) 
Показати модальне вікноздопомогою 
elseelse 
supersupershowHelp () 

тесаме,щойвище 
classclassDialogDialogextendsextends Container isis 
fieldfieldwikiPageURL :string 

methodmethodshowHelp ()isis 
ifif(wikiPageURL !=nullnull) 
Відкрити сторінку Wikiвбраузері 
elseelse 
supersupershowHelp () 


Клієнтський код 
classclassApplicationApplication isis 
Кожнапрограма конфігурує ланцюжок по-своєму  Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Застосування
Якщо програма має обробляти різноманітні запити бага-
тьма спос обами, але заздалегідь невідомо , які к онкретно
запити надх одитиму ть і які обробники д ля них
знадоблять ся
За допомог ою Ланцю жка обов ’язків ви мо жете зв’язати по те-
нційних обробників в о дин ланцюг і по о триманню запи-
та по черзі питати к ожног о з них, чи не х оче він обробити
даний запит methodmethodcreateUI ()isis 
dialog=newnewDialog("Budget Reports" ) 
dialogwikiPageURL ="http:" 
panel=newnewPanel(,,,) 
panelmodalHelpText ="Thispaneldoes" 
ok=newnewButton(,,,,"OK") 
oktooltipText ="ThisisanOKbuttonthat" 
cancel=newnewButton(,,,,"Cancel" ) 
 
paneladd(ok) 
paneladd(cancel) 
dialogadd(panel) 

Уявіть, щотутвідбудеться 
methodmethodonFKeyPress ()isis 
component =thisthisgetComponentAtMouseCoords () 
component showHelp () 


 Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)Якщо важ ливо , щоб обробники вик онувалис я один за іншим
у суворому порядк у
Ланцю жок обов ’язків дозво ляє запу скати обробників о дин
за одним у тій пос лідовнос ті, в якій вони с тоять в ланцюзі 
Якщо набір об ’єктів, здатних обробити запит , повинен зада-
ватис ядинамічно 
У будь-який момент ви мо жете втр утитися в існуючий
ланцю жок і перевизначити зв ’язки так, щоби прибрати або
додати нову ланку 
Кроки реалізації
Створіть інт ерфейс обробника і опишіть в нь ому основний
методобробки 
Продумайт е, в як ому виг ляді к лієнт повинен пере давати
дані запиту до обробника Найгнучкіший спосіб — це пере-
творити дані запиту на об ’єкт і повніс тю пере давати йог о
через параметри мет одуобробника 
Є сенс у т ому, щоб с творити абс трактний базовий к лас обро-
бників, аби не дуб лювати реалізацію мет оду о тримання
наступног о обробника в у сіх конкретних обробниках 
Додайте до базовог о обробника по ле для збере ження поси-
лання на нас тупний е лемент ланцю жка Вс тановлюйт е поча-
ткове значення ць ого по ля через к онструктор Це зробить



 Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)об’єкти обробників незмінюваними А ле якщо програма
пере дбачає динамічну переб удову ланцю жків, мо жете дода-
ти ще й с етер дляполя
Реалізуйт е базовий мет од обробки так, щоб він перенаправ-
ляв запит нас тупному об ’єкту, перевіривши йог о наявніс ть
Це дозво лить повніс тю прих овати по ле-посилання від під-
класів, давши їм мо жливіс ть пере давати запити далі ланцю-
гом, звер таючись до батьківськ ої реалізації методу
Один за іншим с творіть к ласи к онкретних обробників та
реалізуйт е в них мет оди обробки запитів При о триманні
запиту к ожен обробник повинен вирішити :
◦Чи мо же він обробити запит , чи ні?
◦Чи по трібно пере давати запит нас тупному обробник ові,
чи ні?
Клієнт мо же збирати ланцю жок обробників самос тійно , спи-
раючись на свою бізне с-логіку , або о тримувати вж е готові
ланцю жки ззовні В ос таннь ому випадку ланцю жки збираю-
ться фабричними об ’єктами, спираючись на к онфігурацію
програми або параметри оточення 
Клієнт мо же надсилати запити б удь-як ому обробник ові
ланцюга, а не лише першому  Запит пере даватиметь ся
ланцю жком, допоки який-неб удь обробник не відмовить ся
пере давати йог о далі або к оли б уде досягнут о кінець
ланцюга 
Клієнт повинен знати про динамічну приро ду ланцю жка і
бути г отовим до таких випадків : Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)◦Ланцю жок мо же складатися з о дного об’єкта
◦Запити мо жуть не досягати кінця ланцюга 
◦Запити мо жуть досягати кінця, залишаючись не оброб ле-
ними
Переваги та не доліки
Зменшу є зале жність між к лієнт ом та обробниками 
Реалізу єпринцип єдиного обов ’язку
Реалізу єпринцип відкритостізакритості 
Запит мо же залишитися ніким не опраць ованим 
Відносини з іншими пат ернами
•Ланцю жок обов ’язків ,Команда Посередник таСпос терігач
показую ть різні спос оби робо ти тих, хт о надсилає запити, та
тих, хт о їхотриму є:
◦Ланцю жок обов ’язків пере дає запит пос лідовно через
ланцю жок по тенційних о тримувачів, очікуючи, що о дин з
них обробить запит 
◦Команда встановлює непрямий о днос торонній зв ’язок від
відправників до одержувачів 
◦Посередник прибирає прямий зв ’язок між відправниками
та одержувачами, змушуючи їх спілкуватися опос ередко-
вано , через себе




 Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)◦Спостерігач пере дає запит о дночасно всім зацікавленим
одержувачам, але дозво ляє їм динамічно підпис уватися
або відпис уватися від таких повідомлень 
•Ланцю жок обов ’язків часто вик орис товую ть разом з Компо-
нувальник ом У ць ому випадку запит пере даєть ся від дочі-
рніх к омпонентів до їхніх батьків 
•Обробники в Ланцю жкові обов ’язків можуть б ути вик онані у
вигляді Команд  В ць ому випадку ро ль запиту відіграє к онте-
кст команд, який пос лідовно по даєть ся до к ожної к оманди у
ланцюгу 
Але є й інший підхід, в як ому сам запит є Командою , наді-
сланою ланцю жком об ’єктів У ць ому випадку о дна і та сама
операція мо же бути зас тосована до багать ох різних к онтекс-
тів, пре дставлених у виг ляді ланцю жка
•Ланцю жок обов ’язків таДекорат ормають дуж е схожі стру-
ктури Обидва пат ерни базую ться на принципі рекурсивно-
го вик онання операції через с ерію пов ’язаних об ’єктів А ле є
декілька важ ливих відміннос тей
Обробники в Ланцю жку обов ’язків можуть вик онувати дові-
льні дії, незале жні о дна від о дної, а так ож у б удь-який моме-
нт переривати по дальшу пере дачу ланцю жком З іншог о
боку,Декоратори розширюю ть певну дію , не ламаючи інт е-
рфейс базової операції і не перериваючи вик онання інших
декораторів Пове дінкові пат ерни проектування  Ланцю жок обов' язків
#
krabatua@gmail com (#)КОМАНДАТакож відомий як: Дія,Транзакція, Action, Command
Команда — це пове дінковий пат ерн проектування, який
перетворює запити на об ’єкти, дозво ляючи пере давати їх як
аргументи під час вик лику мет одів, с тавити запити в чергу ,
логувати їх, а так ож підтримувати скас ування операцій  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Проблема
Уявіть, що ви працюєт е над програмою т екстового ре да-
ктора Якраз підійшов час розробки пане лі керування Ви
створили к лас гарних Кнопокі хочете вик орис товувати йог о
для всіх кнопок програми, починаючи з пане лі керування та
закінчуючи звичайними кнопками в діалогах 
Всі кнопки програми у спадк овані від одного класу
Усі ці кнопки, х оч і виг лядаю ть схоже, але вик оную ть різні
команди Виникає запитання: ку ди розміс тити к од обробни-
ків к ліків по цих кнопках? Найпрос тіше рішення — це с тво-
рити підк ласи д ля кожної кнопки та перевизначити в них
методи дії д ля різних завдань  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Безліч підк ласів кнопок 
Але ск оро с тало зрозуміло , що такий підхід ніку ди не г оди-
ться По-перше, з ’являєть ся дуж е багат о підк ласів По-др уге,
код кнопок, який відносить ся до графічног о інт ерфейс у,
починає зале жати від к ласів бізне с-логіки, яка досить час то
змінюєть ся
Кільк а класів д ублюють одну і ту с амуфункціональність
Проте, найгірше ще попере ду, адж е деякі операції, на кшта-
лт «зберег ти», мо жна вик ликати з декільк ох місць: натисну-
вши кнопку на пане лі керування, вик ликавши к онтекстне
меню або натиснувши к лавіші Ctrl+SКоли в програмі б ули
тільки кнопки, к од збере ження б ув тільки у підк ласі
SaveButton Але тепер йог о дове деться про дублювати ще в
двакласи Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Рішення
Хороші програми зазвичай с труктур ують у виг ляді шарів
Найпоширеніший прик лад— це шари к орис тувацьк ого інте-
рфейс у та бізне с-логіки Перший лише малює гарне зобра-
ження д ля корис тувача, але к оли по трібно зробити щось
важливе, інт ерфейс к орис тувача «просить» шар бізне с-логі-
ки зайнятися цим
У дійснос ті це виг лядає так: о дин з об ’єктів інт ерфейс у кори-
стувача вик ликає мет од одного з об ’єктів бізне с-логіки,
пере даючи до нь ого якісь параметри 
Прямий доступ з UI до бізнес -логіки
Патерн К оманда пропону є більше не надсилати такі вик лики
безпос ередньо Заміс ть ць ого кожен вик лик, що відрізняє-
ться від інших, с лід звернути у власний к лас з єдиним мет о-
дом, який і здійснюватиме вик лик Т акий зветь сякомандою  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)До об ’єкта інт ерфейс у мо жна б уде прив ’язати об ’єкт к ома-
нди, який знає, к ому і в як ому виг ляді с лід відправляти запи-
ти К оли об ’єкт інт ерфейс у буде готовий пере дати запит , він
викличе мет од команди, а та — по дбає про вс еінше 
Доступ з UI до бізнес -логіки через команд у
Класи к оманд мо жна об ’єднати під загальним інт ерфейс ом,
що має єдиний мет од запу ску к оманди Піс ля ць ого одні й
ті самі відправники змо жуть працювати з різними к оманда-
ми, не прив ’язуючись до їхніх к ласів Навіть більше, к оманди
можна б уде взаємозаміняти «на ль оту», змінюючи підс умко-
ву пове дінку відправників 
Параметри, з якими повинен б ути вик ликаний мет од об’єкта
одержувача, мо жна заздалегідь зберег ти в по лях об ’єкта-
команди Завдяки ць ому, об’єкти, які надсилаю ть запити,
можуть не турб уватися про т е, щоб зібрати не обхідні дані
для одержувача Навіть більше, вони т епер взагалі не знаю-
ть, хт о буде одержувачем запиту  Вся ця інформація прих о-
вана вс ередині команди  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Класи UI де легують роботу командам 
Після зас тосування К оманди в нашому прик ладі з т екстовим
редактором вам більше не по трібно б уде створювати без-
ліч підк ласів кнопок д ля різних дій Бу де дос татнь о одного
класу з по лем д ля зберігання об ’єкта команди 
Викорис товуючи загальний інт ерфейс к оманд, об ’єкти кно-
пок посилатимуть ся на об ’єкти к оманд різних типів При
натисканні кнопки де легуватимуть робо ту к омандам, а
команди — перенаправляти вик лики тим чи іншим об ’єктам
бізне с-логіки
Так само мо жна вчинити і з к онтекстним меню , і з гарячи-
ми к лавішами Вони б удуть прив ’язані до тих самих об ’єктів
команд, що і кнопки, позбавляючи к ласи від дублювання 
Таким чином, к оманди с тануть гнучким прошарк ом між
корис тувацьким інт ерфейс ом та бізне с-логік ою І це лише Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)неве лика час тина тієї к орис ті, яку мо же прине сти пат ерн
Команда !
Аналогія з жит тя
Прик лад замовлення в ресторані 
Ви зах одите в ре сторан і сідаєт е біля вікна Д о вас підх оди-
ть ввічливий офіціант і приймає замовлення, запис уючи всі
побажання в блокно т
Закінчивши, він поспішає на ку хню, вириває аркуш з б ло-
кнота та к леїть йог о на с тіну Далі лис т опиняєть ся в р уках
кухаря, який читає замовлення і г отує описану страву 
У ць ому прик ладі ви є відправник ом, офіціант з б локно-
том—командою , а ку хар —отриму вачем  Як і в самому
патерні, ви не с тикаєт есь з ку харем безпос ередньо Заміс ть
цього ви відправляєт е замовлення офіціант ом, який самос ті-
йно «налашт овує» ку харя на робо ту З іншог о боку , кухар не Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)знає, хт о конкретно надіс лав йому замовлення А ле йому це
байдуж е, бо вся не обхідна інформація є в лис тізамовлення 
Структура
Відправник зберігає посилання на об ’єкт к оманди та зве-
ртаєть ся до нь ого, коли по трібно вик онати яку сь дію  Від-
правник працює з к омандами тільки через їхній загальний
інтерфейс Він не знає, яку к онкретно к оманду вик орис то-
вує, оскільки о триму є готовий об ’єкт к оманди від клієнта 
Команда опис ує інт ерфейс, спільний д ля всіх к онкретних
команд Зазвичай тут опис ується лише о дин мет од запу ску
команди 
Конкретні к оманди реалізую ть різні запити, до тримуючи-
сь загальног о інт ерфейс у команд Як правило , команда не Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)робить всю робо ту самос тійно , а лише пере дає вик лик о де-
ржувачу , яким вис тупає о дин з об ’єктів бізне с-логіки
Параметри, з якими к оманда звер таєть ся до о держувача,
необхідно зберігати у виг ляді по лів У більшос ті випадків
об’єкти к оманд мо жна зробити незмінними, пере даючи у
них всі не обхідні параметри тільки через конструктор
Одержувач містить бізне с-логіку програми У цій ро лі мо же
виступати практично б удь-який об ’єкт Зазвичай, к оманди
перенаправляю ть вик лики о держувачам, але іно ді, щоб
спрос тити програму , ви мо жете позб утися від о держувачів,
«зливши» їхній к од у к ласи команд 
Клієнт створює об ’єкти к онкретних к оманд, пере даючи до
них у сі не обхідні параметри, с еред яких мо жуть б ути і поси-
лання на об ’єкти о держувачів Піс ля ць ого клієнт зв ’язує
об’єкти відправників зі с твореними командами 
Псевдок од
У ць ому прик ладі пат ерн Команда викорис товується д ля
ведення іс торії вик онаних операцій, дозво ляючи скас овува-
ти їх за потреби  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Прик лад реалізації ск асування у тек стовому редакторі 
Команди, які змінюю ть стан ре дактора (наприк лад, к ома-
нда вс тавки т ексту з б уфера обміну), зберігаю ть копію с тану
редактора пере д вик онанням дії К опії вик онаних к оманд
розміщую ться в іс торії к оманд, звідки вони мо жуть б ути
доставлені, якщо по трібно б уде скас увати вик онану
операцію 
Класи е лементів інт ерфейс у, історії к оманд та інші не зале-
жать від к онкретних к ласів к оманд, оскільки працюю ть з Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)ними через загальний інт ерфейс Ц е дозво ляє до давати до
програми нові к оманди, не змінюючи наявний код
Абстрактна команда задаєзагальний інтерфейс дляконкретних 
класівкоманд, атакожмістить реалізацію базової поведінки 
скасування операції 
abstractabstract classclassCommandCommand isis 
protectedprotected fieldfieldapp:Application 
protectedprotected fieldfieldeditor:Editor 
protectedprotected fieldfieldbackup:text 

constructorconstructor Command(app:Application ,editor:Editor)isis 
thisthisapp=app 
thisthiseditor=editor 

Зберігаємо станредактора 
methodmethodsaveBackup ()isis 
backup=editortext 

Відновлюємо станредактора 
methodmethodundo()isis 
editortext=backup 

Головний методкоманди залишається абстрактним, щобкожна 
конкретна команда визначила йогопо-своєму Методповинен 
повернути trueабоfalse,залежно відтого,чизмінила 
команда станредактора, аотже,чипотрібно їїзберігати 
вісторії 
abstractabstract methodmethodexecute() 

 Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Конкретні команди 
classclassCopyCommandCopyCommand extendsextends Command isis 
Команда копіювання незаписується доісторії, бовонане 
змінюєстанредактора 
methodmethodexecute()isis 
appclipboard =editorgetSelection () 
returnreturnfalsefalse 

classclassCutCommandCutCommand extendsextends Command isis 
Команди, щозмінюють станредактора, зберігають стан 
редактора передсвоєюдієюісигналізують прозміну, 
повертаючи true 
methodmethodexecute()isis 
saveBackup () 
appclipboard =editorgetSelection () 
editordeleteSelection () 
returnreturntruetrue 

classclassPasteCommandPasteCommand extendsextends Command isis 
methodmethodexecute()isis 
saveBackup () 
editorreplaceSelection (appclipboard ) 
returnreturntruetrue 

Відміна —цетакожкоманда 
classclassUndoCommandUndoCommand extendsextends Command isis 
methodmethodexecute()isis 
appundo() 
returnreturnfalsefalse 


 Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Глобальна історія команд—цестек 
classclassCommandHistoryCommandHistory isis 
privateprivate fieldfieldhistory:arrayofCommand 

Той,щозайшовостаннім 
methodmethodpush(c:Command)isis 
Додатикоманду вкінецьмасиву-історії 

виходить першим 
methodmethodpop():Command isis 
Дістати останню команду змасиву-історії 


Класредактора містить безпосередні операції надтекстом Він 
відіграє рольодержувача —команди делегують йомусвоїдії 
classclassEditorEditorisis 
fieldfieldtext:string 

methodmethodgetSelection ()isis 
Повернути вибраний текст 

methodmethoddeleteSelection ()isis 
Видалити вибраний текст 

methodmethodreplaceSelection (text)isis 
Вкласти текстзбуфераобмінувпоточній позиції 


Класпрограми налаштовує об'єкти дляспільної роботи Він 
виступає уролівідправника —створює команди, щобвиконати 
якісьдії 
classclassApplicationApplication isis  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)fieldfieldclipboard :string 
fieldfieldeditors:arrayofEditors 
fieldfieldactiveEditor :Editor 
fieldfieldhistory:CommandHistory 

Код,щоприв'язує команди доелементів інтерфейсу, може 
виглядати приблизно так 
methodmethodcreateUI ()isis 
 
copy=functionfunction (){executeCommand ( 
newnewCopyCommand (thisthis,activeEditor ))} 
copyButton setCommand (copy) 
shortcuts onKeyPress ("Ctrl+C" ,copy) 

cut=functionfunction (){executeCommand ( 
newnewCutCommand (thisthis,activeEditor ))} 
cutButton setCommand (cut) 
shortcuts onKeyPress ("Ctrl+X" ,cut) 

paste=functionfunction (){executeCommand ( 
newnewPasteCommand (thisthis,activeEditor ))} 
pasteButton setCommand (paste) 
shortcuts onKeyPress ("Ctrl+V" ,paste) 

undo=functionfunction (){executeCommand ( 
newnewUndoCommand (thisthis,activeEditor ))} 
undoButton setCommand (undo) 
shortcuts onKeyPress ("Ctrl+Z" ,undo) 

Запускаємо команду йперевіряємо, чипотрібно додатиїї 
доісторії 
methodmethodexecuteCommand (command)isis  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Застосування
Якщо ви х очет е параметризувати об ’єкти вик онуваною дією 
Команда перетворює операції на об ’єкти, а об ’єкти, у свою
чергу , можна пере давати, зберігати та взаємозаміняти вс е-
редині інших об ’єктів
Скажімо , ви розроб ляєте біб ліотеки графічног о меню і х оче-
те, щоб к орис тувачі мог ли вик орис товувати меню в різних
програмах, не змінюючи к ожног о разу к од ваших к ласів
Застосувавши пат ерн, к орис тувачам не дове деться зміню-
вати к ласи меню , заміс ть ць ого вони б удуть к онфігур увати
об’єкти меню різними командами 
Якщо ви х очет е пос тавити операції в черг у, вик онувати їх за
розк ладом або пере давати мере жеюifif(commandexecute()) 
historypush(command) 

Беремоостанню команду зісторії тазмушуємо їївсе 
скасувати Минезнаємоконкретний типкоманди, алецеі 
неважливо, оскільки кожнакоманда знає,якскасувати 
своюдію 
methodmethodundo()isis 
command =historypop() 
ifif(command !=nullnull) 
commandundo() 



 Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Як і б удь-які інші об ’єкти, к оманди мо жна с еріалізувати,
тобто перетворити на рядок, щоб по тім зберег ти у файл або
базу даних По тім в б удь-який зр учний момент йог о мо жна
дістати назад, знову перетворити на об ’єкт к оманди та вик о-
нати Т ак само к оманди мо жна пере давати мере жею, логу-
вати або вик онувати на від даленому сервері 
Якщо вам по трібна операція скасування 
Головна річ, яка по трібна д ля того, щоб мати мо жливіс ть ска-
совувати операції — це зберігання іс торії С еред багать ох
способів реалізації цієї мо жливос ті пат ерн К оманда є, маб у-
ть, найпопу лярнішим
Історія к оманд виг лядає як с тек, до як ого по трапляю ть усі
виконані об ’єкти к оманд К ожна к оманда пере д вик онанням
операції зберігає по точний с тан об ’єкта, з яким вона пра-
цюватиме Піс ля вик онання операції к опія к оманди по тра-
пляє до с теку іс торії, про довжуючи не сти у с обі збере жений
стан об ’єкта Якщо знадобить ся скас ування, програма візьме
останню к оманду з іс торії та відновить збере жений у
нійстан
Цей спосіб має дві ос обливос ті По-перше, т очний с тан
об’єктів не дуж е прос то зберег ти, адж е йог о час тина мо же
бути приватною  Вирішити це мо жна за допомог ою пат ерна
Знімок 

 Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)По-др уге, копії с тану мо жуть займати досить багат о опера-
тивної пам ’яті Т ому іно ді мо жна вдатися до аль тернативної
реалізації, т обто заміс ть відновлення с тарог о стану, команда
виконає зворо тню дію  Недолік ць ого спос обу у ск ладнос ті
(іноді немо жливос ті) реалізації зворо тньоїдії
Кроки реалізації
Створіть загальний інт ерфейс к оманд і визначт е в нь ому
методзапуску
Один за о дним с творіть к ласи к онкретних к оманд У к ожно-
му к ласі має б ути по ле для зберігання посилання на о дин
або декілька об ’єктів-о держувачів, яким к оманда перена-
правлятиме основну робо ту
Крім ць ого, команда повинна мати по ля д ля зберігання
параметрів, по трібних під час вик лику мет одів о держувача
Значення всіх цих по лів команда повинна о тримувати через
конструктор
І, нарешті, реалізуйт е основний мет од команди, вик ликаючи
в ньому ті чи інші мет одиодержувача 
Додайте до к ласів відправників по ля для зберігання к ома-
нд Зазвичай об ’єкти-відправники приймаю ть готові об ’єкти
команд ззовні — через к онструктор або через с етер по ля
команди  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)Змініть основний к од відправників так, щоб вони де легува-
ли вик онання дії команді 
Порядок ініціалізації об ’єктів повинен виг лядати так:
◦Створюємо об ’єкти одержувачів 
◦Створюємо об ’єкти к оманд, зв ’язавши їх з одержувачами 
◦Створюємо об ’єкти відправників, зв ’язавши їх з
командами 
Переваги та не доліки
Прибирає пряму зале жність між об ’єктами, що вик ликаю ть
операції, та об ’єктами, які їх безпос ередньовиконую ть
Дозво ляє реалізувати прос те скас ування і повт ороперацій 
Дозво ляє реалізувати відк ладений запу скоперацій 
Дозво ляє збирати ск ладні к оманди з прос тих
Реалізу єпринцип відкритостізакритості 
Ускладнює к од програми внас лідок вве дення ве ликої
кільк ості до даткових класів 
Відносини з іншими пат ернами
•Ланцю жок обов ’язків ,Команда Посередник таСпос терігач
показую ть різні спос оби робо ти тих, хт о надсилає запити, та
тих, хт о їхотриму є:






 Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)◦Ланцю жок обов ’язків пере дає запит пос лідовно через
ланцю жок по тенційних о тримувачів, очікуючи, що о дин з
них обробить запит 
◦Команда встановлює непрямий о днос торонній зв ’язок від
відправників до одержувачів 
◦Посередник прибирає прямий зв ’язок між відправниками
та одержувачами, змушуючи їх спілкуватися опос ередко-
вано , через себе
◦Спостерігач пере дає запит о дночасно всім зацікавленим
одержувачам, але дозво ляє їм динамічно підпис уватися
або відпис уватися від таких повідомлень 
•Обробники в Ланцю жкові обов ’язків можуть б ути вик онані у
вигляді Команд  В ць ому випадку ро ль запиту відіграє к онте-
кст команд, який пос лідовно по даєть ся до к ожної к оманди у
ланцюгу 
Але є й інший підхід, в як ому сам запит є Командою , наді-
сланою ланцю жком об ’єктів У ць ому випадку о дна і та сама
операція мо же бути зас тосована до багать ох різних к онтекс-
тів, пре дставлених у виг ляді ланцю жка
•Команду таЗнімок можна вик орис товувати спільно д ля реа-
лізації скас ування операцій У ць ому випадку об ’єкти к ома-
нд відповідатимуть за вик онання дії над об ’єктом, а знімки
зберігатимуть резервну к опію с тану ць ого об’єкта, зроб лену
пере д запу скомкоманди  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)•Команда таСтратегіясхожі за принципом, але відрізняю ться
масштабом та зас тосуванням:
◦Команд увикорис товую ть д ля перетворення б удь-яких
різнорідних дій на об ’єкти Параметри операції перетво-
рюються на по ля об ’єкта Ц ей об ’єкт тепер мо жна логувати,
зберігати в іс торії д ля скас ування, пере давати у зовнішні
сервіси тощо
◦З іншог о боку ,Стратегія опис ує різні спос оби т ого, як
зробити о дну і ту саму дію , дозво ляючи замінювати ці
способи в як омусь об ’єкті к онтексту прямо під час вик она-
нняпрограми 
•Якщо Команду потрібно к опіювати пере д вставкою в іс торію
виконаних к оманд, вам мо же допомог тиПрототип
•Відвідувач можна розг лядати як розширений аналог Кома-
нди, що здат ен працювати відразу з декільк ома видами
одержувачів  Пове дінкові пат ерни проектування  К оманда
#
krabatua@gmail com (#)ІТЕР АТОРТакож відомий як: Iterator
Ітерат ор— це пове дінковий пат ерн проектування, що дає
змогу пос лідовно об ходити е лементи ск ладових об ’єктів, не
розкриваючи їхнь ої внутрішнь оїорганізації  Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Проблема
Колекції — це найпоширеніша с труктура даних, яку ви
можете зустріти в програмуванні Ц е набір об ’єктів, зібраний
в одну купу за якимись критеріями 
Різні типи колекцій 
Більшіс ть колекцій виг лядаю ть як звичайний спис ок елеме-
нтів А ле є й екзо тичні к олекції, поб удовані на основі дерев,
графів та інших ск ладних с труктур даних 
Незважаючи на т е, яким чином с труктуровано к олекцію ,
корис тувач повинен мати мо жливіс ть пос лідовно об ходити
її елементи, щоб вик онувати з ними певні дії
У який ж е спосіб с лід переміщатися ск ладною с труктурою
даних? Наприк лад, сь огодні мо же бути дос татнім об хід
дерева в г либину , але завтра виникне не обхідніс ть перемі-
щуватися деревом по ширині А на нас тупному тижні, хай
йому грець, знадобить ся мо жливіс ть об ходу колекції у випа-
дковому порядку  Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Одну і ту с аму к олекцію мо жна об ходити різними способами 
Додаючи вс е нові алг оритми до к оду колекції, ви по троху
розмиваєт е її основну задачу , що по лягає в е фективному
зберіганні даних Д еякі алг оритми мо жуть б ути аж занадт о
«заточені» під певну програму , а тому виг лядатимуть непри-
родно в загальному к ласіколекції 
Рішення
Ідея пат ерна Іт ератор по лягає в т ому, щоб вине сти пове дінку
обходу колекції з самої к олекції в окремий об ’єкт
Об’єкт-ітератор відс тежуватиме с тан об ходу, поточну пози-
цію в к олекції та кількіс ть елементів, які ще залишилося обі-
йти О дну і ту саму к олекцію змо жуть о дночасно об ходити
різні іт ератори, а сама к олекція навіть не знатиме проце Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Ітератори містять к од об ходу колекції Одну к олекцію мо жуть
обходити відразу декільк аітераторів 
До того ж, якщо вам по трібно б уде до дати новий спосіб
обходу, ви змо жете створит е окремий к лас іт ератора, не змі-
нюючи існуючог о кодуколекції  Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Аналогія з жит тя
Варіанти прогу лянок Римом 
Ви плану єте полетіти до Р иму та обійти всі визначні пам ’ятки
за кілька днів А ле по приїзді ви мо жете довг о блукати
вузькими ву личками, намагаючись знайти о дин тільки
Колізей 
Якщо у вас обме жений бю джет, ви мо жете скорис татися
віртуальним гідом, вс тановленим у смар тфоні, який дозво-
лить відфіль трувати тільки цікаві вам об ’єкти А мо жете плю-
нути на вс е та найняти місцевог о гіда, який х оч і обійдеть ся
в копієчку , але знає вс е міс то, як свої п ’ять пальців, і змо же
«занурити» вас в у сі міські легенди 
Таким чином, Р им вис тупає к олекцією пам ’яток, а ваш мозок,
навігат ор чи гід — ітератором к олекції Ви як к лієнт ський
код можете вибрати о дного з іт ераторів, відшт овхуючись від
вирішуваног о завдання та дос тупних ресурсів  Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Структура
Ітерат оропис ує інтерфейс д ля дос тупу та об ходу елементів
колекцій 
Конкретний іт ерат ор реалізу є алг оритм об ходу як оїсь
конкретної к олекції Об ’єкт іт ератора повинен сам відс тежу-
вати по точну позицію при об ході колекції, щоб окремі іт ера-
тори мог ли об ходити о дну і ту саму к олекцію незале жно
Колекція опис ує інт ерфейс о тримання іт ератора з к олекції
Як ми вж е говорили, к олекції не завж ди є списк ом Ц е може
бути і база даних, і від далене API, і навіть дерево Компо-
нувальника  Тому сама к олекція мо же створювати іт ерато- Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)ри, оскільки вона знає, які саме іт ератори здатні з нею
працювати 
Конкретна к олекція повер тає новий екземпляр певног о
конкретног о ітератора, зв ’язавши йог о з по точним об ’єктом
колекції Зверніть увагу на т е, що сигнатура мет оду повер тає
інтерфейс іт ератора Ц е дозво ляє к лієнт ові не зале жати від
конкретних к ласів ітераторів
Клієнт працює з у сіма об ’єктами через інт ерфейси к оле-
кції та іт ератора Через це к лієнт ський к од не зале жить від
конкретних к ласів, що дозво ляє зас тосовувати різні іт ерато-
ри, не змінюючи існуючог о кодупрограми 
В загальному випадку к лієнти не с творюю ть об ’єкти іт ерато-
рів, а о тримую ть їх з к олекцій Т им не менше, якщо к лієнт ові
потрібний спеціальний іт ератор, він завж ди мо же створити
йогосамос тійно 
Псевдок од
У ць ому прик ладі пат ерн Ітерат орвикорис товується д ля
реалізації об ходу не стандар тної к олекції, яка інкапс улює
доступ до с оціальног о графа Fac ebook К олекція надає декі-
лька іт ераторів, які мо жуть об ходити профілі лю дей різними
способами  Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Прик лад об ходу соціальних профілів через ітератор 
Зокрема, іт ератор др узів перебирає всіх др узів профілю , а
ітератор к олег філь трує др узів згідно їхнь ої принале жно-
сті до к омпанії профілю  Всі іт ератори реалізую ть спільний
інтерфейс, який дає змогу к лієнтам працювати з профілями,
не заг либлюючись у деталі робо ти з с оціальною мере жею
(наприк лад, авт оризацію , надсилання REST запитів таінше ) Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Крім т ого, Ітератор позбавляє к од від прив ’язки до к онкре-
тних к ласів к олекцій Ц е дозво ляє до дати підтримку іншог о
виду к олекцій (наприк лад, Link edIn), не змінюючи к ліє-
нтський к од, який працює з іт ераторами та колекціями 
Загальний інтерфейс колекцій повинен визначити фабричний 
методдлявиробництва ітератора Можнавизначити відразу 
кількаметодів, щобдатикористувачам різніваріанти обходу 
однієїітієїсамоїколекції 
interfaceinterface SocialNetworkSocialNetwork isis 
methodmethodcreateFriendsIterator (profileId ):ProfileIterator 
methodmethodcreateCoworkersIterator (profileId ):ProfileIterator 


Конкретна колекція знає,об'єкти якихітераторів потрібно 
створювати 
classclassFacebookFacebook implementsimplements SocialNetwork isis 
Основний кодколекції  

Кодотримання потрібного ітератора 
methodmethodcreateFriendsIterator (profileId )isis 
returnreturnnewnewFacebookIterator (thisthis,profileId ,"friends" ) 
methodmethodcreateCoworkersIterator (profileId )isis 
returnreturnnewnewFacebookIterator (thisthis,profileId ,"coworkers" ) 


Загальний інтерфейс ітераторів 
interfaceinterface ProfileIteratorProfileIterator isis 
methodmethodgetNext():Profile 
methodmethodhasMore():bool 
 Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Конкретний ітератор 
classclassFacebookIteratorFacebookIterator implementsimplements ProfileIterator isis 
Ітератору потрібне посилання наколекцію, якувін 
обходить 
privateprivate fieldfieldfacebook :Facebook 
privateprivate fieldfieldprofileId ,type:string 

Коженітератор обходить колекцію, незалежно відінших, 
томусамостійно відслідковує поточну позицію обходу 
privateprivate fieldfieldcurrentPosition 
privateprivate fieldfieldcache:arrayofProfile 

constructorconstructor FacebookIterator (facebook ,profileId ,type)isis 
thisthisfacebook =facebook 
thisthisprofileId =profileId 
thisthistype=type 

privateprivate methodmethodlazyInit ()isis 
ifif(cache==nullnull) 
cache=facebook socialGraphRequest (profileId ,type) 

Всіконкретні ітератори реалізують методизагального 
інтерфейсу по-своєму 
methodmethodgetNext()isis 
ifif(hasMore()) 
currentPosition ++ 
returnreturncache[currentPosition ] 

methodmethodhasMore()isis 
lazyInit () 
returnreturncurrentPosition <cachelength 
 Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)
Осьіщекорисна тактика: миможемопередавати об'єкт 
ітератора замість колекції доклієнтських класів Притакому 
підході клієнтський коднематимедоступу доколекцій, а 
значить, йогонетурбуватимуть подробиці їхньоїреалізації 
Йомубудедоступний лишезагальний інтерфейс ітераторів 
classclassSocialSpammerSocialSpammer isis 
methodmethodsend(iterator :ProfileIterator ,message:string)isis 
whilewhile(iterator hasMore()) 
profile =iterator getNext() 
SystemsendEmail(profilegetEmail(), message) 


Головний класпрограми конфігурує ітератори таколекції, як 
завгодно 
classclassApplicationApplication isis 
fieldfieldnetwork:SocialNetwork 
fieldfieldspammer:SocialSpammer 

methodmethodconfig()isis 
ififworking withFacebook 
thisthisnetwork =newnewFacebook () 
ififworking withLinkedIn 
thisthisnetwork =newnewLinkedIn () 
thisthisspammer =newnewSocialSpammer () 

methodmethodsendSpamToFriends (profile)isis 
iterator =networkcreateFriendsIterator (profilegetId()) 
spammersend(iterator ,"Veryimportant message" ) 

methodmethodsendSpamToCoworkers (profile)isis 
iterator =networkcreateCoworkersIterator (profilegetId())  Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Застосування
Якщо у вас є ск ладна с труктура даних, і ви х очет е прих ова-
ти від к лієнта деталі її реалізації (з питань ск ладнос ті або
безпеки )
Ітератор надає к лієнт ові лише кілька прос тих мет одів пере-
бору елементів к олекції Ц е не тільки спрощу є дос туп до
колекції, але й захищає її від не обере жних або злочи-
нних дій
Якщо вам по трібно мати кілька варіантів об ходу однієї і тієї
самої с труктуриданих 
Нетривіальні алг оритми об ходу с труктури даних мо жуть
мати досить об ’ємний к од Цей код буде захаращувати вс е
навкр уги— чи т о самий к лас к олекції, чи час тина бізне с-
логіки програми Зас тосувавши іт ератор, ви мо жете виділи-
ти код обходу структури даних в окремий к лас, спрос тивши
підтримку решти коду
Якщо вам х очеть ся мати єдиний інт ерфейс об ходу різних
структурданих spammersend(iterator ,"Veryimportant message" ) 





 Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)Ітератор дозво ляє вине сти реалізації різних варіантів об хо-
ду в підк ласи Ц е дозво лить легк о взаємозаміняти об ’єкти
ітераторів в зале жнос ті від т ого, з як ою с труктурою даних
дово дитьсяпрацювати 
Кроки реалізації
Створіть загальний інт ерфейс іт ераторів Обов ’язковий міні-
мум — це операція о тримання нас тупног о елемента А ле для
зручнос ті мо жна пере дбачити й інше Наприк лад, мет оди
отримання попере днього елементу , поточної позиції, пере-
вірки закінчення об ходутощо
Створіть інт ерфейс к олекції та опишіть у нь ому мет од отри-
мання іт ератора Важ ливо , щоб сигнатура мет оду повер та-
ла загальний інт ерфейс іт ераторів, а не о дин з к онкретних
ітераторів
Створіть к ласи к онкретних іт ераторів д ля тих к олекцій, які
потрібно об ходити за допомог ою пат ерна Іт ератор повинен
бути прив ’язаний тільки до о дного об’єкта к олекції Зазвичай
цей зв ’язок вс тановлюєть ся через конструктор
Реалізуйт е мет оди о тримання іт ератора в к онкретних к ла-
сах к олекцій Вони повинні с творювати новий іт ератор того
класу, який здат ен працювати з даним типом к олекції К оле-
кція повинна пере давати посилання на власний об ’єкт до
конструктораітератора
 Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)У клієнт ському к оді та в к ласах к олекцій не повинно зали-
шитися к оду об ходу елементів Клієнт повинен о тримувати
новий іт ератор з об ’єкта к олекції к ожног о разу , коли йому
потрібно перебрати її елементи 
Переваги та не доліки
Спрощу є класи зберігання даних 
Дозво ляє реалізувати різні спос оби об ходу структури даних 
Дозво ляє о дночасно переміщуватися с труктурою даних у
різних напрямках 
Невиправданий, якщо мо жна обійтися прос тимциклом
Відносини з іншими пат ернами
•Ви мо жете обходити дерево Компонувальника , вик орис то-
вуючи Ітерат ор
•Фабричний мет одможна вик орис товувати разом з Ітерат о-
ром, щоб підк ласи к олекцій мог ли створювати не обхідні їм
ітератори
•Знімок можна вик орис товувати разом з Ітерат ором , щоб
зберег ти по точний с тан об ходу структури даних та поверну-
тися до нь ого в майб утньому, якщо б удепотрібно 




 Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)•Відвідувач можна вик орис товувати спільно з Ітерат ором 
Ітератор відповідатиме за об хід с труктури даних, а Відвід у-
вач— за вик онання дій над к ожним її компонент ом Пове дінкові пат ерни проектування  Іт ератор
#
krabatua@gmail com (#)ПОСЕРЕДНИКТакож відомий як: Intermediary ,Controller ,Mediator
Посередник — це пове дінковий пат ерн проектування, що
дає змогу зменшити зв ’язаніс ть ве ликої кільк ості класів між
собою , завдяки переміщенню цих зв ’язків до
одногокласу-пос ередника Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)Проблема
Припу стімо, що у вас є діалог с творення профілю к орис ту-
вача Він ск ладаєть ся з різноманітних е лементів к ерування:
текстових по лів, чекбок сів,кнопок 
Безладні зв ’язки між е лементами інтерфейс укористу вача
Окремі е лементи діалогу повинні взаємо діяти о дне з о дним
Так, наприк лад, чекбок с «у мене є с обака» відкриває при-
ховане по ле для вве дення імені домашнь ого улюбленця, а
клік по кнопці збере ження запу скає перевірку значень у сіх
полівформи 
Код елементів потрібно правити під час зміни к ожного діалогу  Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)Прописавши цю логіку безпос ередньо в к оді елементів
керування, ви пос тавит е хре ст на їхнь ому повт орному вик о-
ристанні в інших місцях програми Вони с тануть занадт о
тісно пов ’язаними з е лементами діалогу ре дагування профі-
лю, які не по трібні в інших к онтекстах Отж е ви змо жете або
викорис товувати всі е лементи відразу , або не вик орис тову-
вати жоден
Рішення
Патерн Пос ередник змушу є об’єкти спілкуватися через окре-
мий об ’єкт-посередник, який знає, к ому по трібно перена-
правити т ой або інший запит  Завдяки ць ому к омпоненти
системи зале жатимуть тільки від пос ередника, а не від де ся-
тків інших компонентів 
Елементи інтерфейс у спілк уютьс я через посередник а
У нашому прик ладі пос ередник ом міг би с тати діалог  Імо-
вірно , клас діалогу вж е знає, з яких е лементів він ск ла- Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)даєть ся Тому ж одних нових зв ’язків до давати до нь ого не
дове деться
Основні зміни відб удуться вс ередині окремих е лементів діа-
логу Якщо раніше при о триманні к ліка від к орис тувача
об’єкт кнопки самос тійно перевіряв значення по лів діало-
гу, то тепер йог о єдиний обов ’язок — повідомити діалогу
про т е, що відб увся к лік Отримавши повідомлення, діалог
виконає всі не обхідні перевірки по лів Т аким чином, замі-
сть кільк ох зале жнос тей від інших е лементів кнопка о три-
має лише о дну— від самог одіалогу 
Щоб зробити к од ще гнучкішим, мо жна виділити єдиний
інтерфейс д ля всіх пос ередників, т обто діалогів програми
Наша кнопка с тане зале жною не від к онкретног о діалогу
створення к орис тувача, а від абс трактног о, що дозво лить
викорис товувати її і в інших діалогах 
Таким чином, пос ередник прих овує у собі всі ск ладні зв ’язки
й зале жнос ті між к ласами окремих к омпонентів програми А
чим менше зв ’язків маю ть класи, тим прос тіше їх змінювати,
розширювати й повт орно вик орис товувати
Аналогія з жит тя
Пілоти літаків, що сідаю ть або злітаю ть, не спілкую ться з
іншими піло тами безпос ередньо Заміс ть ць ого вони
зв’язую ться з диспетчером, який к оордину є по літ кільк ох
літаків одночасно  Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)Пілоти літаків спілк уютьс я не безпос ередньо , а через диспетчера 
Без диспетчера піло там дово дилося б уве сь час б ути напо-
готові і с тежити самос тійно за всіма літаками навк оло Це
часто призво дило б до катас троф унебі
Важливо розуміти, що диспетчер не по трібен під час всь ого
польоту Він задіяний тільки в зоні аеропор ту, коли по трібно
координувати взаємо дію багать охлітаків  Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)Структура
Компоненти — це різнорідні об ’єкти, що міс тять бізне с-логі-
ку програми К ожен к омпонент має посилання на об ’єкт
посередника, але працює з ним тільки через абс трактний
інтерфейс пос ередників Завдяки ць ому к омпоненти мо жна
повторно вик орис товувати в інших програмах, зв ’язавши їх
з пос ередник ом іншог отипу
Посередник визначає інт ерфейс д ля обміну інформацією
з компонентами Зазвичай дос татнь о одного мет оду, щоби
повідомляти пос ередника про по дії, що відб улися в к омпо-
нентах У параметрах ць ого мет оду мо жна пере давати дета- Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)лі по дії: посилання на к омпонент , в як ому вона відб улася, та
будь-які інші дані
Конкретний пос ередник містить к од взаємо дії кільк ох
компонентів між с обою  Найчас тіше цей об ’єкт не тільки збе-
рігає посилання на всі свої к омпоненти, але й сам їх с тво-
рює, к еруючи по дальшим жит тєвим циклом
Компоненти не повинні спілкуватися о дин з о дним безпос е-
редньо Якщо в к омпоненті відб уваєть ся важ лива по дія, він
повинен повідомити свог о пос ередника, а т ой сам вирішить,
чи стосується по дія інших к омпонентів, і чи треба їх спові-
стити При ць ому к омпонент -відправник не знає, хт о обро-
бить йог о запит , а компонент -одержувач не знає, хт о йог о
надіс лав
Псевдок од
У ць ому прик ладі Посередник допомагає позб утися зале-
жнос тей між к ласами різних е лементів к орис туваць ого інте-
рфейс у: кнопками, чекбок сами й написами 
Реагуючи на дії к орис тувачів, е лементи не взаємо діють без-
посередньо, а лише повідомляю ть пос ередника про т е, що
вони змінилися  Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)Прик лад стр уктур ування к ласів UI діалогів 
Посередник у виг ляді діалогу авт оризації знає, як к онкре-
тні елементи повинні взаємо діяти Т ому при о триманні пові-
домлень він мо же перенаправити вик лик т ому чи іншому
елементу 
Загальний інтерфейс посередників 
interfaceinterface MediatorMediator isis 
methodmethodnotify(sender:Component ,event:string) 


Конкретний посередник Усізв'язки міжконкретними 
компонентами переїхали докодупосередника Вінотримує  Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)повідомлення відсвоїхкомпонентів тазнає,якнаних 
реагувати
classclassAuthenticationDialogAuthenticationDialog implementsimplements Mediator isis 
privateprivate fieldfieldtitle:string 
privateprivate fieldfieldloginOrRegisterChkBx :Checkbox 
privateprivate fieldfieldloginUsername ,loginPassword :Textbox 
privateprivate fieldfieldregistrationUsername ,registrationPassword , 
registrationEmail :Textbox 
privateprivate fieldfieldokBtn,cancelBtn :Button 

constructorconstructor AuthenticationDialog ()isis 
Тутпотрібно будестворити об'єкти усіхкомпонентів, 
подавши поточний об'єкт-посередник доїхніх 
конструкторів 

Колищосьтрапляється зкомпонентом, віннадсилає 
посереднику повідомлення Післяотримання повідомлення 
посередник можеабозробити щосьсамостійно, або 
перенаправити запитіншомукомпонентові 
methodmethodnotify(sender,event)isis 
ifif(sender==loginOrRegisterChkBx andandevent=="check") 
ifif(loginOrRegisterChkBx checked) 
title="Login" 
Показати компоненти формивходу 
Приховати компоненти формиреєстрації 
elseelse 
title="Register" 
Показати компоненти формиреєстрації 
Приховати компоненти формивходу 

ifif(sender==okBtn&&event=="click") 
ifif(loginOrRegister checked)  Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)Намагатись знайтикористувача зданимиіз 
формилогіна 
ifif(!found) 
Показати помилку надформоюлогіна 
elseelse 
Створити аккаунт користувача зданими 
формиреєстрації 
Авторизувати цьогокористувача 
 


Класикомпонентів спілкуються зпосередниками черезїх 
загальний інтерфейс Завдяки цьому,однійтіжкомпоненти 
можнавикористовувати врізнихпосередниках 
classclassComponentComponent isis 
fieldfielddialog:Mediator 

constructorconstructor Component (dialog)isis 
thisthisdialog=dialog 

methodmethodclick()isis 
dialognotify(thisthis,"click") 

methodmethodkeypress ()isis 
dialognotify(thisthis,"keypress" ) 

Конкретні компоненти жоднимчиномнепов'язані міжсобоюУ 
нихєтількиодинканалспілкування —черезнадсилання 
повідомлень посереднику 
classclassButtonButtonextendsextends Component isis 
 
 Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)Придатність
•Коли вам ск ладно змінювати деякі к ласи через т е, що вони
мають ве личезну кількіс ть хао тичних зв ’язків з іншими
класами 
•Посередник дозво ляє розміс тити у сі ці зв ’язки в о дному
класі Піс ля ць ого вам б уде легше їх відре факт орити, зроби-
ти більш зрозумілими й гнучкими 
•Коли ви не мо жете повт орно вик орис товувати к лас, оскільки
він зале жить від безлічі інших класів 
•Після зас тосування пат ерна к омпоненти втрачаю ть колишні
зв’язки з іншими к омпонентами, а вс е їхнє спілкування від-
буваєть ся опос ередковано , через об ’єктпосередника 
•Коли вам дово диться створювати багат о підк ласів к омпо-
нентів, щоб вик орис товувати о дні й ті самі к омпоненти в
різних контекстахclassclassTextboxTextbox extendsextends Component isis 
 

classclassCheckboxCheckbox extendsextends Component isis 
methodmethodcheck()isis 
dialognotify(thisthis,"check") 
  Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)•Якщо раніше зміна відносин в о дному к омпоненті мог ла
призве сти до лавини змін в у сіх інших к омпонентах, т о
тепер вам дос татнь о створити підк лас пос ередника та змі-
нити в нь ому зв ’язки між компонентами 
Кроки реалізації
Знайдіть гр упу тісно сплет ених к ласів, де мо жна о тримати
деяку к орис ть, відв ’язавши деякі о дин від о дного Напри-
клад, щоб повт орно вик орис товувати їхній к од в іншій
програмі 
Створіть загальний інт ерфейс пос ередників та опишіть в
ньому мет оди д ля взаємо дії з к омпонентами У найпрос ті-
шому випадку дос татнь о одного мет оду для отримання пові-
домлень від компонентів 
Цей інт ерфейс не обхідний, якщо ви х очете повт орно вик о-
ристовувати к ласи к омпонентів д ля інших завдань У ць ому
випадку вс е, що по трібно зробити, — це с творити новий
клас к онкретног опосередника 
Реалізуйт е цей інт ерфейс у к ласі к онкретног о пос ередника
Поміс тіть до нь ого по ля, які міс титимуть посилання на всі
об’єкти компонентів 
Ви мо жете піти далі і переміс тити к од створення к омпоне-
нтів до к ласу конкретног о пос ередника, перетворивши йог о
нафабрику  Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)Компоненти т еж повинні мати посилання на об ’єкт пос ере-
дника Зв ’язок між ними зр учніше всь ого встановити шля-
хом по дання пос ередника до параметрів к онструктора
компонентів 
Змініть к од компонентів так, щоб вони вик ликали мет од
повідомлення пос ередника, заміс ть мет одів інших к омпоне-
нтів З про тилежног о боку , пос ередник має вик ликати мет о-
ди по трібног о компонента, к оли отриму є повідомлення від
компонента 
Переваги та не доліки
Усуває зале жнос ті між к омпонентами, дозво ляючи вик ори-
стовувати їх повторно 
Спрощу є взаємо дію між компонентами 
Централізу є керування в о дному місці 
Посередник мо жесильно «розду тися»
Відносини з іншими пат ернами
•Ланцю жок обов ’язків ,Команда Посередник таСпос терігач
показую ть різні спос оби робо ти тих, хт о надсилає запити, та
тих, хт о їхотриму є:
◦Ланцю жок обов ’язків пере дає запит пос лідовно через
ланцю жок по тенційних о тримувачів, очікуючи, що о дин з
них обробить запит 




 Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)◦Команда встановлює непрямий о днос торонній зв ’язок від
відправників до одержувачів 
◦Посередник прибирає прямий зв ’язок між відправниками
та одержувачами, змушуючи їх спілкуватися опос ередко-
вано , через себе
◦Спостерігач пере дає запит о дночасно всім зацікавленим
одержувачам, але дозво ляє їм динамічно підпис уватися
або відпис уватися від таких повідомлень 
•Посередник таФасад схожі тим, що намагаю ться організу-
вати робо ту багать ох існуючих класів 
◦Фасадстворює спрощений інт ерфейс підсис теми, не вно-
сячи в неї ж одної до даткової ф ункціональнос ті Сама під-
система не знає про існування Фасаду Класи підсис теми
спілкую ться один з о дним безпос ередньо
◦Посередник централізу є спілкування між к омпонентами
системи К омпоненти сис теми знаю ть тільки про існува-
нняПосередник а, у них немає прямог о дос тупу до інших
компонентів 
•Різниця між Посередник омтаСпос терігачем не завж ди оче-
видна Найчас тіше вони вис тупаю ть як к онкуренти, але іно ді
можуть працювати разом 
Мета Посередник а— прибрати взаємні зале жнос ті між
компонентами сис теми Заміс ть ць ого вони с тають зале жни-
ми від самог о пос ередника З іншог о боку , мета Спосте- Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)рігача — забезпечити динамічний о днос торонній зв ’язок, в
якому о дні об ’єкти опос ередковано зале жать від інших 
Досить попу лярною є реалізація Посередник аза допомог ою
Спостерігача  При ць ому об ’єкт пос ередника б уде вис тупати
видавцем, а всі інші к омпоненти с тануть пере дплатниками
та змо жуть динамічно с тежити за по діями, що відб уваю ться
у пос ереднику  У ць ому випадку важк о зрозуміти, чим саме
відрізняю ться обидва патерни 
АлеПосередник має й інші реалізації, к оли окремі к омпо-
ненти ж орстко прив ’язані до об ’єкта пос ередника Т акий к од
навряд чи б уде нагадувати Спостерігача , але залишить ся
Посередник ом
Навпаки, у разі реалізації пос ередника з допомог оюСпо-
стерігача , пре дставимо чи уявімо таку програму , в якій
кожен компонент сис теми с тає видавцем К омпоненти мо жу-
ть підпис уватися о дин на о дного, не прив ’язуючись до
конкретних к ласів Програма ск ладатиметь ся з цілої мере жі
Спостерігачів , не маючи центральног о об’єкта Посередник а Пове дінкові пат ерни проектування  Пос ередник
#
krabatua@gmail com (#)ЗНІМОКТакож відомий як: Memento
Знімок — це пове дінковий пат ерн проектування, що дає
змогу зберігати та відновлювати мину лий с тан об ’єктів, не
розкриваючи по дробиць їхнь оїреалізації  Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)Проблема
Припу стімо, ви пишет е програму т екстового редактора Крім
звичайног о редагування, ваш ре дактор дозво ляє змінювати
форматування т ексту, вставляти малюнки таінше 
В певний момент ви вирішили надати мо жливіс ть скас овува-
ти усі ці дії Д ля ць ого вам по трібно зберігати по точний с тан
редактора пере д тим, як вик онати б удь-яку дію  Якщо к ори-
стувач вирішить скас увати свою дію , ви візьмет е копію с тану
з історії та відновит е попере дній с танредактора
Перед вик онанням к оманди ви мо жете зберегти к опію стану
редактора, щоб потім мати мо жливість ск асувати операцію 
Щоб зробити к опію с тану об ’єкта, дос татнь о скопіювати зна-
чення по лів Т аким чином, якщо ви зробили к лас ре дактора
достатнь о відкритим, т о будь-який інший к лас змо же зази-
рнути вс ередину , щоб ск опіювати йог остан
Здавалося б , які проб леми? Т епер б удь-яка операція змо же
зробити резервну к опію ре дактора пере д вик онанням своєї Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)дії А ле такий наївний підхід забезпечить вам безліч про-
блем у майб утньому Адже, якщо ви вирішит е прове сти
рефакт оринг — прибрати або до дати кілька по лів до к ласу
редактора— дове деться змінювати к од усіх класів, які мог ли
копіювати с танредактора
Як команді створити знімок стану редактора, якщо всі його
поляприватні?
Але це ще не вс е Давайт е тепер пог лянемо безпос ередньо
на копії с тану, які ми с творювали З чог о складаєть ся стан
редактора? Навіть найпримітивніший ре дактор повинен
мати декілька по лів д ля зберігання по точног о тексту, позиції
курсора та прокр учування екрану  Щоб зробити к опію с тану,
вам по трібно до дати значення всіх цих по лів до деяк ого
«контейнера» Імовірно , вам знадобить ся зберігати мас у
таких к онтейнерів в як ості історії операцій, т ому зр учніше
за вс е зробити їх об ’єктами о дного класу Цей клас повинен
мати багат о полів, але практично ж одного мет оду Щоб інші
об’єкти мог ли запис увати та читати з нь ого дані, вам дове- Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)деться зробити йог о поля пуб лічними Про те це призве де до
тієї ж проб леми, що й з відкритим к ласом ре дактора Інші
класи с тануть зале жними від б удь-яких змін к ласу контейне-
ра, який с хильний до таких самих змін, що і к ласредактора
Виходить, що нам дове деться або відкрити к ласи д ля всіх
бажаючих, о тримавши пос тійний к лопіт з підтримк ою к оду,
або залишити к ласи закритими, відмовившись від ідеї ска-
сування операцій Чи немає тут аль тернативи?
Рішення
Усі проб леми, описані вище, виникаю ть через пор ушення
інкапс уляції, к оли одні об ’єкти намагаю ться зробити робо ту
за інших, проникаючи до їхнь ої приватної зони, щоб зібрати
необхідні д ля операції дані
Патерн Знімок дор учає с творення к опії с тану об ’єкта само-
му об ’єкту, який цим с таном во лодіє Заміс ть того, щоб роби-
ти знімок «ззовні», наш ре дактор сам зробить к опію своїх
полів, адж е йому дос тупні всі по ля, навіть приватні 
Патерн пропону є тримати к опію с тану в спеціальному
об’єкті-знімк уз обме женим інт ерфейс ом, що дозво ляє,
наприк лад, дізнатися дату виг отовлення або назву знімка
Проте, знімок повинен б ути відкритим д ля свог отворця і
дозво ляти прочитати та відновити йог о внутрішній стан Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)Знімок повністю відкритий д ля творця, але лише частк ово
відкритий д ляопікунів
Така с хема дозво ляє творцям робити знімки та від давати
їх на зберігання іншим об ’єктам, що називаю тьсяопікунами 
Опікунам б уде дос тупний тільки обме жений інт ерфейс знім-
ка, тому вони ніяк не змо жуть вплинути на «нутрощі» самог о
знімку  У по трібний момент опікун мо же попросити творця
відновити свій с тан, пере давши йому відповідний знімок 
У нашому прик ладі з ре дактором опікуном мо жна зробити
окремий к лас, який зберігатиме спис ок вик онаних опера-
цій Обме жений інт ерфейс знімків дозво лить демонс трувати
корис тувачеві гарний спис ок з назвами й датами вик онаних
операцій К оли ж к орис тувач вирішить скас увати операцію , Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)клас іс торії візьме ос танній знімок зі с тека та надішле йог о
об’єкту ре дактора д лявідновлення 
Структура
Класична реалізація на вк ладених к ласах
Класична реалізація пат ерна пок ладаєть ся на ме ханізм
вкладених к ласів, який дос тупний тільки в деяких мовах
програмування (C++, C#, Java)
Творець може створювати знімки свог о стану, а так ож від-
творювати мину лий с тан, якщо до нь ого по дати г отовий
знімок 
Знімок — це прос тий об ’єкт даних, який міс тить с тан творця
Надійніше за вс е зробити об ’єкти знімків незмінними, вс та-
новлюючи в них с тан тільки через конструктор Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)Опік унповинен знати, к оли робити знімок творця та к оли
його потрібно відновлювати Опікун мо же зберігати іс торію
мину лих с танів творця у виг ляді с тека знімків К оли треба
буде скас увати ос танню операцію , він візьме «вер хній» зні-
мок зі с теку та пере дасть йог о творцеві д лявідновлення 
У даній реалізації знімок — це внутрішній к лас по відно-
шенню до к ласу творця Саме т ому він має повний дос туп
до всіх по лів та мет одів творця, навіть приватних З іншог о
боку, опікун не має дос тупу ані до с тану, ані до мет одів знім-
ків, а мо же лише зберігати посилання на ці об ’єкти
Реалізація з проміжним поро жнім інт ерфейс ом
Підходить д ля мов, що не маю ть ме ханізму вк ладених к ла-
сів (наприк лад, PHP)
 Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)У цій реалізації творець працює безпос ередньо з к онкре-
тним к ласом знімка, а опікун — тільки з йог о обме женим
інтерфейс ом
Завдяки ць ому досягаєть ся той самий е фект, що і в к ласи-
чній реалізації Т ворець має повний дос туп до знімка, а опі-
кун—ні
Знімки з підвищеним захис том
Якщо по трібно повніс тю вик лючити мо жливіс ть дос тупу до
стану творців та знімків 
Ця реалізація дозво ляє мати кілька видів творців та знім-
ків К ожному к ласу творців відповідає власний к лас знімків
Ані творці, ані знімки не дозво ляють іншим об ’єктам читати
свій стан Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)Тут опікун ще ж орсткіше обме жений у дос тупі до с тану тво-
рців та знімків, але, з іншог о боку , опікун с тає незале жним
від творців, оскільки мет од відновлення т епер знах одиться
в самих знімках 
Знімки т епер пов ’язані з тими творцями, з яких вони зро-
блені Вони, як і раніше, о тримую ть стан через к онструктор
Завдяки б лизьк ому зв ’язку між к ласами, знімки знаю ть, як
відновити с тан своїх творців 
Псевдок од
У цьому прик ладі пат ернЗнімок викорис товується спільно
з пат ерном Команда та дозво ляє зберігати резервні к опії
складног о стану т екстового редактора й відновлювати йог о
запотреби 
Прик лад збереж ення знімків стану тек стового редактора 
Об’єкти к оманд вис тупаю ть в ро лі опікунів і запитую ть знім-
ки в ре дактора пере д тим, як вик онати свою дію  Якщо зна-
добить ся скас увати операцію , команда змо же відновити
стан ре дактора, вик орис товуючи збере жений знімок  Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)При ць ому знімок не має пуб лічних по лів, т ому інші об ’єкти
не маю ть дос тупу до йог о внутрішніх даних Знімки пов ’язані
з певним ре дактором, який їх с творив Вони ж і відновлюю ть
стан свог о редактора Ц е дозво ляє програмі мати о дночасно
кілька об ’єктів ре дакторів, наприк лад, розбитих по різних
вкладках програми 
Кластворцяповинен матиспеціальний метод,якийзберігає 
станоб'єкта вновомуоб'єкті-знімку 
classclassEditorEditorisis 
privateprivate fieldfieldtext,curX,curY,selectionWidth 

methodmethodsetText(text)isis 
thisthistext=text 

methodmethodsetCursor (x,y)isis 
thisthiscurX=x 
thisthiscurY=y 

methodmethodsetSelectionWidth (width)isis 
thisthisselectionWidth =width 

methodmethodcreateSnapshot ():Snapshot isis 
Знімок—ценезмінний об'єкт, томутворець передає до 
ньогосвійстанчерезпараметри конструктора 
returnreturnnewnewSnapshot (thisthis,text,curX,curY,selectionWidth ) 

Знімокзберігає минулий станредактора 
classclassSnapshotSnapshot isis 
privateprivate fieldfieldeditor:Editor 
privateprivate fieldfieldtext,curX,curY,selectionWidth  Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)constructorconstructor Snapshot (editor,text,curX,curY,selectionWidth )isis 
thisthiseditor=editor 
thisthistext=text 
thisthiscurX=x 
thisthiscurY=y 
thisthisselectionWidth =selectionWidth 

Употрібний моментвласник знімкуможевідновити стан 
редактора 
methodmethodrestore()isis 
editorsetText(text) 
editorsetCursor (curX,curY) 
editorsetSelectionWidth (selectionWidth ) 

Опікуном можевиступати класкоманд(дивпатернКоманда) У 
цьомувипадку команда зберігає знімокстануоб'єкта- 
одержувача передтим,якпередати йомудіюАвразі 
скасування дії,команда поверне об'єктдопопереднього стану 
classclassCommandCommand isis 
privateprivate fieldfieldbackup:Snapshot 

methodmethodmakeBackup ()isis 
backup=editorcreateSnapshot () 

methodmethodundo()isis 
ifif(backup!=nullnull) 
backuprestore() 
  Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)Застосування
Коли вам по трібно зберігати мит тєві знімки с тану об ’єкта
(або йог о час тини) д ля того, щоб об ’єкт мо жна б уло віднови-
ти в т ому самому стані
Патерн Знімок дозво ляє с творювати б удь-яку кількіс ть знім-
ків об ’єкта і зберігати їх незале жно від об ’єкта, з як ого роб ля-
ть знімок Знімки час то вик орис товую ть не тільки д ля
реалізації операції скас ування, але й д ля транзакцій, к оли
стан об ’єкта по трібно «відк отити», якщо операція не б ула
вдалою 
Коли пряме о тримання с тану об ’єкта розкриває приватні
деталі йог о реалізації, пор ушуючи інкапс уляцію 
Патерн пропону є виг отовити знімок саме вихідному об ’єкту,
тому що йому дос тупні всі по ля, навіть приватні 
Кроки реалізації
Визначт е клас творця, об ’єкти як ого повинні с творювати
знімки свог остану
Створіть к лас знімка та опишіть в нь ому ті ж самі по ля, які є
в оригінальному к ласі-творці




 Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)Зробіть об ’єкти знімків незмінними Вони повинні о держу-
вати початк ові значення тільки о дин раз, через власний
конструктор
Якщо ваша мова програмування це дозво ляє, зробіть к лас
знімка вк ладеним у к ластворця 
Якщо ні, вийміть з к ласу знімка поро жній інт ерфейс, який
буде дос тупним іншим об ’єктам програми Зг одом ви мо же-
те додати до ць ого інт ерфейс у деякі допоміжні мет оди, що
дають дос туп до метаданих знімка, але прямий дос туп до
даних творця повинен б утивиключеним 
Додайте до к ласу творця мет од одержання знімків Т ворець
повинен с творювати нові об ’єкти знімків, пере даючи значе-
ння своїх по лів через конструктор
Сигнатура мет оду повинна повер тати знімки через обме же-
ний інт ерфейс, якщо він у вас є Сам к лас повинен працюва-
ти з к онкретним к ласомзнімка 
Додайте до к ласу творця мет од відновлення зі знімка Щ одо
прив ’язки до типів, к еруйтеся тією ж логік ою, що і в пункті 
Опікуни, незале жно від т ого, чи це іс торія операцій, чи
об’єкти к оманд, чи щось інше, повинні знати про т е, коли
запитувати знімки у творця, де їх зберігати та к оли
відновлювати  Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)Зв’язок опікунів з творцями мо жна перене сти вс ередину
знімків У ць ому випадку к ожен знімок б уде прив ’язаний до
свого творця і повинен б уде сам відновлювати йог о стан
Але це працюватиме або якщо к ласи знімків вк ладені до
класів творців, або якщо творці маю ть відповідні с етери д ля
встановлення значень своїх полів
Переваги та не доліки
Не пор ушує інкапс уляцію вихідног о об’єкта
Спрощу є структур у вихідног о об’єкта Йому не по трібно збе-
рігати іс торію версій свог остану
Вимагає багат о пам ’яті, якщо к лієнти дуж е час то створюю ть
знімки 
Може спричинити до даткові витрати пам ’яті, якщо об ’єкти,
що зберігаю ть історію , не звільняю ть ре сурси, зайняті зас та-
рілими знімками 
В деяких мовах (наприк лад, PHP , Python, JavaScript) ск ладно
гарантувати, щоб лише вихідний об ’єкт мав дос туп до с тану
знімка 
Відносини з іншими пат ернами
•Команду таЗнімок можна вик орис товувати спільно д ля реа-
лізації скас ування операцій У ць ому випадку об ’єкти к ома-
нд відповідатимуть за вик онання дії над об ’єктом, а знімки





 Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)зберігатимуть резервну к опію с тану ць ого об’єкта, зроб лену
пере д запу скомкоманди 
•Знімок можна вик орис товувати разом з Ітерат ором , щоб
зберег ти по точний с тан об ходу структури даних та поверну-
тися до нь ого в майб утньому, якщо б удепотрібно 
•Знімок іноді мо жна замінити Прототипом , якщо об ’єкт, чий
стан по трібно зберігати в іс торії, досить прос тий, не має
посилань на зовнішні ре сурси або їх мо жна легк овідновити  Пове дінкові пат ерни проектування  Знімок
#
krabatua@gmail com (#)СПОС ТЕРІГ АЧТакож відомий як: Видавець-Підписник, Слухач,Observ er
Спос терігач — це пове дінковий пат ерн проектування, який
створює ме ханізм підписки, що дає змогу о дним об ’єктам
стежити й реагувати на по дії, які відб уваю ться в
інших об’єктах Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Проблема
Уявіть, що ви маєт е два об ’єкти: Покупець іМагазин До
магазину маю ть ось-ось завезти новий т овар , який цікавить
покупця 
Покупець мо же що дня х одити до магазину , щоб перевіряти
наявніс ть товар у Але через це він б уде дратуватися, даре-
мно витрачаючи свій дорог оцінний час
Постійне відвід ування магазину чи спам?
З іншог о боку , магазин мо же розсилати спам к ожному своє-
му покупцеві Багать ох покупців це засмутить, оскільки
товар специфічний і по трібний невсім
Виходить к онфлікт: або покупець гає час на періо дичні
перевірки, або магазин розтрачу є ре сурси на непо трібні
сповіщення  Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Рішення
Давайт е називати Видавцями ті об’єкти, які міс тять важ ливий
або цікавий д ля інших с тан Р ешту об ’єктів, які х отіли б від-
стежувати зміни ць ого стану, назвемо Підписниками 
Патерн Спос терігач пропону є зберігати вс ередині об ’єкта
видавця спис ок посилань на об ’єкти підписників Причому
видавець не повинен ве сти спис ок підписки самос тійно  Він
повинен надати мет оди, за допомог ою яких підписники
могли б до давати або прибирати с ебе зі списку 
Підписк а на події 
Тепер найцікавіше К оли у видавця відб уватиметь ся важ ли-
ва по дія, він б уде про ходитися за списк ом пере дплатни-
ків та сповіщувати їх про по дію, вик ликаючи певний мет од
об’єктів-пере дплатників
Видавцю байдуж е, якого класу буде той чи інший підписник,
бо всі вони повинні с лідувати загальному інт ерфейс у й мати
єдиний мет одоповіщення  Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Сповіщення про події 
Побачивши, як добре вс е працює, ви мо жете виділити зага-
льний інт ерфейс і д ля всіх видавців, який б уде ск ладатися
з мет одів підписки та відписки Піс ля ць ого підписники змо-
жуть працювати з різними типами видавців, і о тримувати від
них сповіщення через єдиний метод
Аналогія з жит тя
Після того, як ви оформили підписку на журнал, вам більше
не по трібно їздити до с упермарк ета та дізнаватись, чи вж е
вийшов черг овий номер  Нат омість видавництво надсилати-
ме нові номери пошт ою прямо до вас до дому , відразу піс ля
їхньоговиходу Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Передплата та доставк агазет 
Видавництво ве де спис ок підписників і знає, к ому який
журнал с лати Ви мо жете в б удь-який момент відмовитися
від підписки, й журнал пере стане до вас надх одити 
Структура
  Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Видавець володіє внутрішнім с таном, зміни як ого цікаво
відслідковувати підписникам Видавець міс тить ме ханізм
підписки: спис ок підписників та мет оди підпискивідписки
Коли внутрішній с тан видавця змінюєть ся, він сповіщає
своїх підписників Д ля ць ого видавець про ходиться за спи-
ском підписників і вик ликає їхній мет од сповіщення, який
описаний в загальному інт ерфейсі підписників 
Підписник визначає інт ерфейс, яким к орис тується видаве-
ць для надсилання сповіщень Здебільшог о для ць ого досить
одногометоду
Конкретні підписники виконую ть щось у відповідь на спові-
щення, як е надійшло від видавця Ці к ласи маю ть до триму-
ватися загальног о інт ерфейс у, щоб видавець не зале жав від
конкретних к ласів підписників 
Після отримання сповіщення підписнику не обхідно о трима-
ти оновлений с тан видавця Видавець мо же пере дати цей
стан через параметри мет оду сповіщення Більш гнучкий
варіант — пере давати через параметри ве сь об ’єкт видавця,
щоб підписник міг сам о тримати не обхідні дані Як варіа-
нт, підписник мо же пос тійно зберігати посилання на об ’єкт
видавця, пере даний йому через конструктор
Клієнт створює об ’єкти видавців і підписників, а по тім ре є-
струє підписників на оновлення у видавцях  Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Псевдок од
У цьому прик ладі Спос терігач дає змогу об ’єкту т екстового
редактора сповіщати інші об ’єкти про зміни свог остану
Прик лад сповіщення об ’єктів про події в інших об’єктах
Спис ок підписників ск ладаєть ся динамічно , об’єкти мо жуть
як підпис уватися на певні по дії, так і відпис уватися від них
прямо під час вик онання програми 
У цій реалізації ре дактор не ве де спис ок підписників само-
стійно , а де легує це вк ладеному об ’єкту Це дає змогу вик о- Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)ристовувати ме ханізм підписки не лише в к ласі ре дактора, а
і в інших к ласах програми 
Для до давання до програми нових підписників не по трібно
змінювати к ласи видавців, допоки вони працюю ть із підпи-
сниками через загальний інтерфейс 
Базовий клас-видавець Містить кодкерування підписниками та 
надсилання їмсповіщень 
classclassEventManagerEventManager isis 
privateprivate fieldfieldlisteners :hashmapofeventtypesandandlisteners 

methodmethodsubscribe (eventType ,listener )isis 
listeners add(eventType ,listener ) 

methodmethodunsubscribe (eventType ,listener )isis 
listeners remove(eventType ,listener ) 

methodmethodnotify(eventType ,data)isis 
foreachforeach (listener inlisteners of(eventType ))do 
listener update(data) 

Конкретний клас-видавець, щомістить цікавудляінших 
компонентів бізнес-логіку Мимоглибзробити йогопрямим 
нащадком EventManager, алевреальному життіценезавждиє 
можливим (наприклад, якщовкласувжеєпредок) Томутутми 
підключаємо механізм підписки задопомогою композиції 
classclassEditorEditorisis 
publicpublicfieldfieldevents:EventManager 
privateprivate fieldfieldfile:File 
 Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)constructorconstructor Editor()isis 
events=newnewEventManager () 

Методибізнес-логіки, якісповіщають підписників про 
зміни 
methodmethodopenFile (path)isis 
thisthisfile=newnewFile(path) 
eventsnotify("open",filename) 

methodmethodsaveFile ()isis 
filewrite() 
eventsnotify("save",filename) 
 


Загальний інтерфейс підписників Убагатьох мовах,щомають 
функціональні типи,можнаобійтися безцьогоінтерфейсу та 
конкретних класів, замінивши об'єкти підписників функціями 
interfaceinterface EventListenerEventListener isis 
methodmethodupdate(filename ) 


Набірконкретних підписників Кожензнихвиконує якусь 
поведінку, реагуючи насповіщення відвидавця 
classclassLoggingListenerLoggingListener implementsimplements EventListener isis 
privateprivate fieldfieldlog:File 
privateprivate fieldfieldmessage:string 

constructorconstructor LoggingListener (log_filename ,message)isis 
thisthislog=newnewFile(log_filename ) 
thisthismessage =message 
 Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)methodmethodupdate(filename )isis 
logwrite(replace('%s',filename ,message)) 

classclassEmailAlertsListenerEmailAlertsListener implementsimplements EventListener isis 
privateprivate fieldfieldemail:string 
privateprivate fieldfieldmessage:string 

constructorconstructor EmailAlertsListener (email,message)isis 
thisthisemail=email 
thisthismessage =message 

methodmethodupdate(filename )isis 
systememail(email,replace('%s',filename ,message)) 


Програма можесконфігурувати видавців тапідписників, як 
завгодно, залежно відцілейтаоточення 
classclassApplicationApplication isis 
methodmethodconfig()isis 
editor=newnewEditor() 

logger=newnewLoggingListener ( 
"pathtologtxt" , 
"Someone hasopenedfile:%s"); 
editoreventssubscribe ("open",logger) 

emailAlerts =newnewEmailAlertsListener ( 
"admin@examplecom" , 
"Someone haschanged thefile:%s") 
editoreventssubscribe ("save",emailAlerts )  Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Застосування
Якщо піс ля зміни с тану одног о об’єкта по трібно щось зроби-
ти в інших, але ви не знаєт е напере д, які саме об ’єкти маю ть
відреаг увати 
Описана проб лема мо же виникнути при розроб ленні біб ліо-
тек корис туваць ого інт ерфейс у, якщо вам не обхідно нада-
ти мо жливіс ть стороннім к ласам реагувати на к ліки по
кнопках 
Патерн Спос терігач надає змогу б удь-як ому об ’єкту з інт е-
рфейс ом підписника заре єструватися д ля отримання спові-
щень про по дії, що трапляю ться в об ’єктах -видавцях
Якщо одні об ’єкти маю ть спос терігати за іншими, але тільки
у визначених випадках 
Видавці ве дуть динамічні списки У сі спос терігачі мо жуть
підпис уватися або відпис уватися від о тримання сповіщень
безпос ередньо під час вик онання програми 
Кроки реалізації
Розбийт е вашу ф ункціональніс ть на дві час тини: незале жне
ядро та опціональні зале жні час тини Незале жне ядро с тане
видавцем Зале жні час тини с тануть підписниками 




 Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Створіть інт ерфейс підписників Зазвичай дос татнь о визна-
чити в нь ому лише о дин мет одсповіщення 
Створіть інт ерфейс видавців та опишіть у нь ому операції
керування підписк ою Пам ’ятайт е, що видавці повинні пра-
цювати з підписниками тільки через їхній загальний
інтерфейс 
Вам по трібно вирішити, ку ди поміс тити к од ве дення під-
писки, адж е він зазвичай б уває о днак овим д ля всіх типів
видавців Найочевидніший спосіб — це вине сення к оду до
проміжног о абс трактног о класу, від як ого будуть у спадк ову-
ватися всі видавці 
Якщо ж ви інт егруєте пат ерн до існуючих к ласів, т о створи-
ти новий базовий к лас мо же бути важк о У ць ому випадку
ви мо жете поміс тити логіку підписки в допоміжний об ’єкт та
делегувати йому робо ту звидавцями 
Створіть к ласи к онкретних видавців Р еалізуйт е їх таким
чином, щоб піс ля кожної зміні с тану вони с лали сповіщення
всім своїм підписникам 
Реалізуйт е мет од сповіщення в к онкретних підписниках Не
забудьте пере дбачити параметри, через які видавець міг би
відправляти якісь дані, пов ’язані з по дією, що відбулась
Можливий і інший варіант , коли підписник, о тримавши спо-
віщення, сам візьме по трібні дані з об ’єкта видавця А ле в Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)цьому разі ви б удете змушені прив ’язати к лас підписника до
конкретног о класувидавця 
Клієнт повинен с творювати не обхідну кількіс ть об ’єктів під-
писників та підпис увати їх у видавців 
Переваги та не доліки
Видавці не зале жать від к онкретних к ласів підписників і
навпаки 
Ви мо жете підпис увати і відпис увати о держувачів
«нальоту»
Реалізу єпринцип відкритостізакритості 
Підписники сповіщую ться у випадк овій пос лідовнос ті
Відносини з іншими пат ернами
•Ланцю жок обов ’язків ,Команда Посередник таСпос терігач
показую ть різні спос оби робо ти тих, хт о надсилає запити, та
тих, хт о їхотриму є:
◦Ланцю жок обов ’язків пере дає запит пос лідовно через
ланцю жок по тенційних о тримувачів, очікуючи, що о дин з
них обробить запит 
◦Команда встановлює непрямий о днос торонній зв ’язок від
відправників до одержувачів 




 Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)◦Посередник прибирає прямий зв ’язок між відправниками
та одержувачами, змушуючи їх спілкуватися опос ередко-
вано , через себе
◦Спостерігач пере дає запит о дночасно всім зацікавленим
одержувачам, але дозво ляє їм динамічно підпис уватися
або відпис уватися від таких повідомлень 
•Різниця між Посередник омтаСпос терігачем не завж ди оче-
видна Найчас тіше вони вис тупаю ть як к онкуренти, але іно ді
можуть працювати разом 
Мета Посередник а— прибрати взаємні зале жнос ті між
компонентами сис теми Заміс ть ць ого вони с тають зале жни-
ми від самог о пос ередника З іншог о боку , мета Спосте-
рігача — забезпечити динамічний о днос торонній зв ’язок, в
якому о дні об ’єкти опос ередковано зале жать від інших 
Досить попу лярною є реалізація Посередник аза допомог ою
Спостерігача  При ць ому об ’єкт пос ередника б уде вис тупати
видавцем, а всі інші к омпоненти с тануть пере дплатниками
та змо жуть динамічно с тежити за по діями, що відб уваю ться
у пос ереднику  У ць ому випадку важк о зрозуміти, чим саме
відрізняю ться обидва патерни 
АлеПосередник має й інші реалізації, к оли окремі к омпо-
ненти ж орстко прив ’язані до об ’єкта пос ередника Т акий к од
навряд чи б уде нагадувати Спостерігача , але залишить ся
Посередник ом Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)Навпаки, у разі реалізації пос ередника з допомог оюСпо-
стерігача , пре дставимо чи уявімо таку програму , в якій
кожен компонент сис теми с тає видавцем К омпоненти мо жу-
ть підпис уватися о дин на о дного, не прив ’язуючись до
конкретних к ласів Програма ск ладатиметь ся з цілої мере жі
Спостерігачів , не маючи центральног о об’єкта Посередник а Пове дінкові пат ерни проектування  Спос терігач
#
krabatua@gmail com (#)СТАНТакож відомий як: State
Стан— це пове дінковий пат ерн проектування, що дає змогу
об’єктам змінювати пове дінку в зале жнос ті від їхнь ого стану
Ззовні с творюєть ся враж ення, ніби змінився к ласоб’єкта Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Проблема
Патерн С тан немо жливо розг лядати у відриві від к онцепції
машини станів , також відомої як стейт-машина абоскінче-
нний автомат
Cкінченний автомат 
Основна ідея в т ому, що програма мо же знах одитися в о дно-
му з кільк ох станів, які уве сь час змінюю ть один о дного
Набір цих с танів, а так ож пере ходів між ними, визначений
напере д та скінченний  Переб уваючи в різних с танах, про-
грама мо же по-різному реагувати на о дні і ті самі по дії, що
відбуваю тьсязнею
Такий підхід мо жна зас тосувати і до окремих об ’єктів
Наприк лад, об ’єкт Документ може приймати три с тани:
Чернетка ,Модерація або Опублікований У кожному з цих
станів мет одопублікувати працюватиме по-різному:
Скінченний авт омат: https:refact oringguruukfsm Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)•Зчернетки він надішле документ на модерацію 
•Змодерації — в пуб лікацію , але за умови, що це зробив
адмініс тратор
•Вопублікованому стані мет од не б уде робити нічог о
Можливі стани док ументу та пере ходи між ними 
Машину с танів найчас тіше реалізую ть за допомог ою мно-
жини умовних операт орів, ifабо switch,які перевіряю-
ть по точний с тан об ’єкта та вик оную ть відповідну пове дінку 
Ймовірніше за вс е, ви вж е реалізували у своєму жит ті хоча
б одну машину с танів, навіть не знаючи про це Не вірит е?
Як що до так ого коду, виглядає знайомо? Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Побудована таким чином машина с танів має критичну ваду ,
яка покаж е себе, якщо до Документа додати ще з де сяток
станів К ожен мет од буде ск ладатися з об ’ємног о умовног о
операт ора, який перебирає дос тупні стани
Такий к од дуж е ск ладно підтримувати Навіть найменша
зміна логіки пере ходів зму сить вас перевіряти робо ту всіх
методів, які міс тять умовні операт ори машини станів 
Плутанина та нагромадж ення умов ос обливо сильно прояв-
ляєть ся в с тарих проектах Набір мо жливих с танів б уває
важк о визначити заздалегідь, т ому вони уве сь час до даю-
ться в проце сі ево люції програми Через це рішення, щоclassclassDocumentDocument isis 
fieldfieldstate:string 
 
methodmethodpublish()isis 
switch(state) 
"draft": 
state="moderation" 
break 
"moderation" : 
ifif(currentUser role=="admin") 
state="published" 
break 
"published" : 
Donothing 
break 
  Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)здавалося прос тим і е фективним на початку розробки прое-
кту, може згодом с тати проекцією ве личезног о макаронног о
монс тра
Рішення
Патерн С тан пропону є створити окремі к ласи д ля кожног о
стану, в як ому мо же переб увати к онтекстний об ’єкт, а по тім
вине сти ту ди пове дінки, що відповідаю ть цим станам 
Сторінк а делегує вик онання с воєму активному стану 
Заміс ть того, щоб зберігати к од всіх с танів, початк овий
об’єкт, який зветь сяконтек стом , міс титиме посилання на
один з об ’єктів-с танів і де легуватиме йому робо ту в зале-
жнос ті від стану Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Завдяки т ому, що об ’єкти с танів матимуть спільний інт ерфе-
йс, контекст змо же делегувати робо ту стану, не прив ’язуючи-
сь до йог о класу Пове дінку к онтексту мо жна б уде змінити в
будь-який момент , підк лючивши до нь ого інший об ’єкт-стан
Дуже важ ливим нюанс ом, який відрізняє цей пат ерн від
Стратегії, є те, що і к онтекст, і конкретні с тани мо жуть знати
один про о дного та ініціювати пере ходи від о дного стану до
іншог о
Аналогія з жит тя
Ваш смар тфон пово диться по-різному в зале жнос ті від по то-
чногостану:
•Якщо т елефон розб локовано , натискання кнопок т елефону
призве де до яких осьдій
•Якщо т елефон заб локовано , натискання кнопок призве де до
появи екрану розб локування
•Якщо т елефон розрядж ено, натискання кнопок призве де до
появи екрану зарядки  Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Структура
Контекстзберігає посилання на об ’єкт с тану та де легує йому
частину робо ти, яка зале жить від с танів К онтекст працює
з цим об ’єктом через загальний інт ерфейс с танів К онтекст
повинен мати мет од для присвоєння йому новог о об’єкта-
стану
Станопис ує спільний д ля всіх к онкретних с танів інтерфейс 
Конкретні с тани реалізую ть пове дінки, пов ’язані з певним
станом к онтексту Іноді дово диться створювати цілі ієрар хії
класів с танів, щоб узагальнити дуб люючий код Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Стан мо же мати зворо тнє посилання на об ’єкт к онтексту
Через нь ого не тільки зр учно о тримувати з к онтексту по трі-
бну інформацію , але й здійснювати зміну стану
І контекст, і об ’єкти к онкретних с танів мо жуть вирішувати,
коли і який с тан б уде обрано нас тупним Щ об перемкнути
стан, по трібно по дати інший об ’єкт-стан до контексту
Псевдок од
Прик лад зміни поведінки програвача за допомогою станів 
У ць ому прик ладі пат ерн Стан змінює ф ункціональніс ть
одних і тих самих е лементів к ерування музичним програ-
вачем, зале жно від с тану, в як ому зараз знах одиться
програвач  Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Об’єкт програвача міс тить об ’єкт-стан, як ому й де легує голо-
вну робо ту Змінюючи с тан, мо жна впливати на т е, як пово-
дяться елементи к ерування програвача 
Загальний інтерфейс усіхстанів 
abstractabstract classclassStateStateisis 
protectedprotected fieldfieldplayer:AudioPlayer 

Контекст передає себедоконструктора стану,щобстанміг 
звертатися дойогоданихтаметодів умайбутньому, якщо 
будепотрібно 
constructorconstructor State(player)isis 
thisthisplayer=player 

abstractabstract methodmethodclickLock () 
abstractabstract methodmethodclickPlay () 
abstractabstract methodmethodclickNext () 
abstractabstract methodmethodclickPrevious () 


Конкретні станиреалізують методизагального станупо-своєму 
classclassLockedStateLockedState extendsextends Stateisis 

Прирозблокуванні програвача іззаблокованими клавішами, 
вінможеприйняти одинздвохстанів 
methodmethodclickLock ()isis 
ifif(playerplaying) 
playerchangeState (newnewPlayingState (player)) 
elseelse 
playerchangeState (newnewReadyState (player)) 
 Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)methodmethodclickPlay ()isis 
Нічогонеробити 

methodmethodclickNext ()isis 
Нічогонеробити 

methodmethodclickPrevious ()isis 
Нічогонеробити 


Конкретні станисаміможутьпереводити контекст віншістани 
classclassReadyStateReadyState extendsextends Stateisis 
methodmethodclickLock ()isis 
playerchangeState (newnewLockedState (player)) 

methodmethodclickPlay ()isis 
playerstartPlayback () 
playerchangeState (newnewPlayingState (player)) 

methodmethodclickNext ()isis 
playernextSong () 

methodmethodclickPrevious ()isis 
playerpreviousSong () 

classclassPlayingStatePlayingState extendsextends Stateisis 
methodmethodclickLock ()isis 
playerchangeState (newnewLockedState (player)) 

methodmethodclickPlay ()isis 
playerstopPlayback () 
playerchangeState (newnewReadyState (player))  Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)methodmethodclickNext ()isis 
ifif(eventdoubleclick ) 
playernextSong () 
elseelse 
playerfastForward () 

methodmethodclickPrevious ()isis 
ifif(eventdoubleclick ) 
playerprevious () 
elseelse 
playerrewind() 


Програвач виступає вроліконтексту 
classclassAudioPlayerAudioPlayer isis 
fieldfieldstate:State 
fieldfieldUI,volume,playlist ,currentSong 

constructorconstructor AudioPlayer ()isis 
thisthisstate=newnewReadyState (thisthis) 

Контекст змушуєстанреагувати накористувацький ввід 
замість себеРеакція можебутирізною, залежно від 
того,якийстанзаразактивний 
UI=newUserInterface() 
UIlockButtononClick(thisclickLock) 
UIplayButtononClick(thisclickPlay) 
UInextButtononClick(thisclickNext) 
UIprevButtononClick(thisclickPrevious) 

Іншіоб'єкти тежповинні матиможливість замінити стан 
програвача  Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)methodmethodchangeState (state:State)isis 
thisthisstate=state 

МетодиUIделегуватимуть роботуактивному стану 
methodmethodclickLock ()isis 
stateclickLock () 
methodmethodclickPlay ()isis 
stateclickPlay () 
methodmethodclickNext ()isis 
stateclickNext () 
methodmethodclickPrevious ()isis 
stateclickPrevious () 

Сервісні методиконтексту, щовикликаються станами 
methodmethodstartPlayback ()isis 
 
methodmethodstopPlayback ()isis 
 
methodmethodnextSong ()isis 
 
methodmethodpreviousSong ()isis 
 
methodmethodfastForward (time)isis 
 
methodmethodrewind(time)isis 
  Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Застосування
Якщо у вас є об ’єкт, пове дінка як ого кардинально змінює-
ться в зале жнос ті від вну трішнь ого стану, причому типів с та-
нів багат о, а їхній к од час тозмінюєть ся
Патерн пропону є виділити в окремі к ласи всі по ля й мет оди,
пов’язані з визначеним с таном Початк овий об ’єкт б уде пос ті-
йно посилатися на о дин з об ’єктів-с танів, де легуючи йому
частину своєї робо ти Д ля зміни с тану до к онтексту дос та-
тньо буде підс тавляти інший об ’єкт-стан
Якщо к од к ласу міс тить безліч ве ликих, с хожих один на
одног о умовних операт орів, які вибираю ть пове дінки в
зале жнос ті від по точних значень полів класу
Патерн пропону є переміс тити к ожну гілку так ого умовног о
операт ора до власног о класу Сюди ж мо жна пос елити й у сі
поля, пов ’язані з цим станом 
Якщо ви свідомо вик орис товуєте табличну машину с танів,
побудовану на умовних операт орах, але змушені миритис я
з дублюванням к оду д ля схожих с танів та пере ходів
Патерн С тан дозво ляє реалізувати ієрар хічну машину с танів,
що базу ється на нас лідуванні Ви мо жете успадкувати с хожі
стани від о дного батьківськ ого класу та вине сти ту ди ве сь
дублюючий код





 Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Кроки реалізації
Визначт еся з к ласом, який відіграватиме ро ль контексту Це
може бути як існуючий к лас, який вж е має зале жність від
стану, так і новий к лас, якщо к од станів «розмазаний» по
кільк охкласах 
Створіть загальний інт ерфейс с танів Він повинен опис увати
методи, спільні д ля всіх с танів, виявлених у к онтексті Зве-
рніть увагу , що не всю пове дінку к онтексту по трібно перено-
сити до с тану, а тільки ту , яка зале жить від станів 
Для кожног о фактичног о стану с творіть к лас, який реалізу є
інтерфейс с тану Переміс тіть к од, пов ’язаний з к онкретними
станами, до по трібних к ласів Зрешт ою, всі мет оди інт ерфе-
йсу стану повинні б ути реалізовані в у сіх к ласах станів 
При перене сенні пове дінки з к онтексту ви мо жете зіткнути-
ся з тим, що ця пове дінка зале жить від приватних по лів або
методів к онтексту, до яких немає дос тупу з об ’єкта с тану Є
кілька спос обів, щоб обійти цю проб лему 
Найпрос тіший — залишити пове дінку вс ередині к онтексту,
викликаючи йог о з об ’єкта с тану З іншог о боку , ви мо жете
зробити к ласи с танів вк ладеними до к ласу контексту, і тоді
вони о тримаю ть дос туп до всіх приватних час тин к онтексту
Останній спосіб , щоправда, дос тупний лише в деяких мовах
програмування (наприк лад, Java, C#) Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)Створіть в к онтексті по ле д ля зберігання об ’єктів-с танів, а
також пуб лічний мет од для зміни значення ць огополя
Старі мет оди контексту, в яких переб ував зале жний від с тану
код, замініть на вик лики відповідних мет одів об ’єкта-с тану
В зале жнос ті від бізне с-логіки, розміс тіть к од, який переми-
кає с тан к онтексту, або вс ередині к онтексту, або вс ередині
класів к онкретних станів 
Переваги та не доліки
Позбавляє від безлічі ве ликих умовних операт орів машини
станів 
Концентр ує в о дному місці к од, пов ’язаний з певним станом 
Спрощу є кодконтексту
Може невиправдано у складнити к од, якщо с танів мало , і
вони рідк озмінюю ться
Відносини з іншими пат ернами
•Міст,Стратегія таСтан(а так ож тро хи іАдапт ер) маю ть схожі
структури к ласів — усі вони поб удовані за принципом
«композиції», т обто де легування робо ти іншим об ’єктам
Проте вони відрізняю ться тим, що вирішую ть різні проб ле-
ми Пам ’ятайт е, що пат ерни — це не тільки рецепт поб удови
коду певним чином, але й опис ування проб лем, які призве-
ли до так огорішення 




 Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)•Станможна розг лядати як надб удову над Стратегією  Оби-
два пат ерни вик орис товую ть композицію , щоб змінювати
пове дінку г оловног о об’єкта, де легуючи робо ту вк ладеним
об’єктам-помічникам Про те вСтратегії ці об ’єкти не знаю-
ть один про о дного і ж одним чином не пов ’язані У Стані
конкретні с тани самос тійно мо жуть перемикати контекст Пове дінкові пат ерни проектування  С тан
#
krabatua@gmail com (#)СТРАТЕГІЯТакож відомий як: Strategy
Стратегія — це пове дінковий пат ерн проектування, який
визначає сімейс тво с хожих алг оритмів і розміщу є кожен з
них у власному к ласі Піс ля ць ого алг оритми мо жна заміняти
один на інший прямо під час вик онання програми  Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Проблема
Ви вирішили написати програму-навігат ор для по доро жую-
чих Вона повинна показувати гарну й зр учну кар ту, яка
дозво ляла б з легкіс тю орієнтуватися в незнайомому місті
Однією з найбільш очікуваних ф ункцій б ув пошук та про-
кладання маршр утів Переб уваючи в невідомому йому міс ті,
корис тувач повинен мати мо жливіс ть вказати початк ову
точку та пункт призначення, а навігат ор, в свою чергу , про-
кладе оптимальний шлях 
Перша версія вашог о навігат ора мог ла прок ладати маршр ут
лише авт омобільними шляхами, т ому чу дово підх одила д ля
подоро жей авт омобілем А ле, вочевидь, не всі їздять у від-
пустку авт омобілями Т ому нас тупним крок ом ви до дали до
навігат ора мо жливіс ть прок ладання піших маршр утів
Через деякий час з ’ясувалося, що час тина турис тів під час
пере сування міс том від дають перевагу громадськ ому транс-
порту Тому ви до дали ще й таку опцію прок ладання шлях у
Але й це ще не вс е У найб лижчій перспективі ви х отіли б
додати прок ладку маршр утів ве лодоріжками, а у від далено-
му майб утньому— маршр ути, пов ’язані з відвідуванням ціка-
вих та визначних місць  Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Код навігатора стає занадто роздутим 
Якщо з попу лярніс тю навігат ора не б уло жодних проб лем, т о
технічна час тина вик ликала запитання й періо дичний г оло-
вний біль З к ожним новим алг оритмом к од основног о класу
навігат ора збільшувався вдвічі В так ому ве ликому к ласі
стало важкуват о орієнтуватися
Будь-яка зміна алг оритмів пошуку , чи т о виправлення багів,
чи до давання новог о алг оритму , зачіпала основний к лас Ц е
підвищувало ризик с творення помилки шлях ом випадк ового
внесення змін до робочог окоду
Крім т ого, ускладнювалася к омандна робо та з іншими про-
граміс тами, яких ви найняли піс ля успішног о ре лізу наві-
гатора Ваші зміни нерідк о торкалися о дного і того самог о
коду, створюючи к онфлікти, які вимагали до даткового час у
на їхнє вирішення  Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Рішення
Патерн С тратегія пропону є визначити сімейс тво с хожих
алгоритмів, які час то змінюю ться або розширюю ться, й
вине сти їх до власних к ласів, які називаю тьстратегіями 
Заміс ть того, щоб початк овий к лас сам вик онував т ой чи
інший алг оритм, він відіграватиме ро ль контексту, посилаю-
чись на о дну зі с тратегій та де легуючи їй вик онання робо-
ти Щ об змінити алг оритм, вам б уде дос татнь о підс тавити в
контекст інший об ’єкт-стратегію
Важливо , щоб всі с тратегії мали єдиний інт ерфейс Вик о-
ристовуючи цей інт ерфейс, к онтекст буде незале жним від
конкретних к ласів с тратегій З іншог о боку , ви змо жете змі-
нювати та до давати нові види алг оритмів, не чіпаючи к од
контексту
Стратегії поб удови шлях у Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)У нашому прик ладі к ожен алг оритм пошуку шлях у переїде
до свог о власног о класу В цих к ласах б уде визначено лише
один мет од, що приймає в параметрах к оординати початку
та кінця маршр уту, а повер тає масив всіх т очок маршр уту
Хоча к ожен клас прок ладатиме маршр ут на свій розс уд, для
навігат ора це не б уде мати ж одного значення, оскільки йог о
робо та по лягає тільки у зображ енні маршр уту Навігат ору
достатнь о по дати до с тратегії дані про почат ок та кінець
маршр уту, щоб о тримати масив т очок маршр уту в об умовле-
ному форматі Клас навігат ора б уде мати мет од для вс танов-
лення с тратегії, що дозво лить змінювати с тратегію пошуку
шлях у «на ль оту» Ц ей мет од стане у наг оді клієнт ському
коду навігат ора, наприк лад, кнопкам-перемикачам типів
маршр утів в інт ерфейсі корис тувача 
Аналогія з жит тя
Різні стратегії потрапляння до аеропорту  Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Вам по трібно діс татися аеропор ту Можна доїхати авт обу-
сом, так сі або ве лосипе дом Т ут вид транспор ту є с тратегією 
Ви вибираєт е конкретну с тратегію в зале жнос ті від к онтекс-
ту— наявнос ті грошей або час у до відльоту
Структура
Контекстзберігає посилання на об ’єкт к онкретної с тратегії,
працюючи з ним через загальний інт ерфейс стратегій
Стратегія визначає інт ерфейс, спільний д ля всіх варіацій
алгоритму  Контекст вик орис товує цей інт ерфейс д ля вик ли-
куалгоритму  Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Для контексту неваж ливо , яка саме варіація алг оритму б уде
обрана, оскільки всі вони маю ть однак овий інтерфейс 
Конкретні с тратегіїреалізую ть різні варіації алгоритму 
Під час вик онання програми к онтекст отриму є вик лики від
клієнта й де легує їх об ’єкту к онкретної стратегії
Клієнт повинен с творити об ’єкт к онкретної с тратегії та пере-
дати йог о до к онструктора к онтексту Крім т ого, клієнт пови-
нен мати мо жливіс ть замінити с тратегію на ль оту,
викорис товуючи с етер по ля стратегії Завдяки ць ому, конте-
кст не знатиме про т е, яку саме с тратегію зараз обрано 
Псевдок од
У цьому прик ладі к онтекст вик орис товуєСтратегію для вик о-
нання тієї чи іншої арифметичної операції 
Загальний інтерфейс стратегій 
interfaceinterface StrategyStrategy isis 
methodmethodexecute(a,b) 

Кожнаконкретна стратегія реалізує загальний інтерфейс усвій 
власний спосіб 
classclassConcreteStrategyAddConcreteStrategyAdd implementsimplements Strategy isis 
methodmethodexecute(a,b)isis 
returnreturna+b 
 Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)classclassConcreteStrategySubtractConcreteStrategySubtract implementsimplements Strategy isis 
methodmethodexecute(a,b)isis 
returnreturna-b 

classclassConcreteStrategyMultiplyConcreteStrategyMultiply implementsimplements Strategy isis 
methodmethodexecute(a,b)isis 
returnreturna*b 

Контекст завждипрацюєзістратегіями череззагальний 
інтерфейс Віннезнає,якусаместратегію йомуподано 
classclassContextContext isis 
privateprivate strategy :Strategy 

methodmethodsetStrategy (Strategy strategy )isis 
thisthisstrategy =strategy 

methodmethodexecuteStrategy (inta,intb)isis 
returnreturnstrategy execute(a,b) 


Конкретна стратегія вибирається набільшвисокому рівні, 
наприклад, конфігуратором всієїпрограми Готовий об'єкт- 
стратегія подається доклієнтського об'єкта, апотімможе 
бутизамінений іншоюстратегією, вбудь-який момент, «на 
льоту» 
classclassExampleApplicationExampleApplication isis 
methodmethodmain()isis 
Створити об'єктконтексту 
Ввестипершечисло(n) 
Ввестидругечисло(n) 
Ввестибажануоперацію 
Потім,обратистратегію:  Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Застосування
Якщо вам по трібно вик орис товувати різні варіації як ого-
небудь алг оритму вс ередині одног о об’єкта
Стратегія дозво ляє варіювати пове дінку об ’єкта під час вик о-
нання програми, підс тавляючи до нь ого різні об ’єкти-пове-
дінки (наприк лад, що відрізняю ться баланс ом швидк ості та
споживання ресурсів )
Якщо у вас є безліч с хожих к ласів, які відрізняю ться лише
деяк оюпове дінкоюifif(action==addition )thenthen 
contextsetStrategy (newnewConcreteStrategyAdd ()) 

ifif(action==subtraction )thenthen 
contextsetStrategy (newnewConcreteStrategySubtract ()) 

ifif(action==multiplication )thenthen 
contextsetStrategy (newnewConcreteStrategyMultiply ()) 

Виконати операцію задопомогою стратегії: 
result=contextexecuteStrategy (n,n) 

NВивести результат наекран 



 Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Стратегія дозво ляє відокремити пове дінку , що відрізняєть ся,
у власну ієрар хію к ласів, а по тім зве сти початк ові к ласи до
одного, налашт овуючи йог о пове дінку стратегіями 
Якщо ви не х очет е оголювати деталі реалізації алг оритмів
для інших класів 
Стратегія дозво ляє ізо лювати к од, дані й зале жнос ті алг ори-
тмів від інших об ’єктів, прих овавши ці деталі вс ередині к ла-
сів-с тратегій
Якщо різні варіації алг оритмів реалізовано у виг ляді роз-
логого умовног о операт ора К ожна гілка так ого операт ора є
варіацією алгоритму 
Стратегія розміщу є кожну лапу так ого операт ора до окре-
мого класу-стратегії По тім к онтекст отриму є певний об ’єкт-
стратегію від к лієнта й де легує йому робо ту Якщо рапт ом
знадобить ся змінити алг оритм, до к онтексту мо жна по дати
іншу стратегію
Кроки реалізації
Визначт е алг оритм, що с хильний до час тих змін Т акож піді-
йде алг оритм, який має декілька варіацій, які обираю ться
під час вик онання програми 




 Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Створіть інт ерфейс с тратегій, що опис ує цей алг оритм Він
повинен б ути спільним д ля всіх варіантів алгоритму 
Поміс тіть варіації алг оритму до власних к ласів, які реалі-
зують цей інтерфейс 
У класі к онтексту створіть по ле для зберігання посилання на
поточний об ’єкт-стратегію, а так ож мет од для її зміни Пере-
конайт еся в т ому, що к онтекст працює з цим об ’єктом тільки
через загальний інт ерфейс стратегій
Клієнти к онтексту маю ть по давати до нь ого відповідний
об’єкт-стратегію, коли х очуть, щоб к онтекст пово дився
певним чином 
Переваги та не доліки
Гаряча заміна алг оритмів на льоту
Ізолює к од і дані алг оритмів від інших класів 
Заміна спадкування делегуванням 
Реалізу єпринцип відкритостізакритості 
Ускладнює програму внас лідок до даткових класів 
Клієнт повинен знати, в чому по лягає різниця між с тратегія-
ми, щоб вибрати потрібну 





 Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)Відносини з іншими пат ернами
•Міст,Стратегія таСтан(а так ож тро хи іАдапт ер) маю ть схожі
структури к ласів — усі вони поб удовані за принципом
«композиції», т обто де легування робо ти іншим об ’єктам
Проте вони відрізняю ться тим, що вирішую ть різні проб ле-
ми Пам ’ятайт е, що пат ерни — це не тільки рецепт поб удови
коду певним чином, але й опис ування проб лем, які призве-
ли до так огорішення 
•Команда таСтратегіясхожі за принципом, але відрізняю ться
масштабом та зас тосуванням:
◦Команд увикорис товую ть д ля перетворення б удь-яких
різнорідних дій на об ’єкти Параметри операції перетво-
рюються на по ля об ’єкта Ц ей об ’єкт тепер мо жна логувати,
зберігати в іс торії д ля скас ування, пере давати у зовнішні
сервіси тощо
◦З іншог о боку ,Стратегія опис ує різні спос оби т ого, як
зробити о дну і ту саму дію , дозво ляючи замінювати ці
способи в як омусь об ’єкті к онтексту прямо під час вик она-
нняпрограми 
•Стратегія змінює пове дінку об ’єкта «зс ередини», а Декора-
торзмінює йог о «ззовні»
•Шаблонний мет одвикорис товує спадкування, щоб розши-
рювати час тини алг оритму Стратегія викорис товує делегу-
вання, щоб змінювати «на ль оту» алг оритми, що Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)виконую тьсяШаблонний метод працює на рівні к ласів
Стратегія дозво ляє змінювати логіку окремих об ’єктів
•Станможна розг лядати як надб удову над Стратегією  Оби-
два пат ерни вик орис товую ть композицію , щоб змінювати
пове дінку г оловног о об’єкта, де легуючи робо ту вк ладеним
об’єктам-помічникам Про те вСтратегії ці об ’єкти не знаю-
ть один про о дного і ж одним чином не пов ’язані У Стані
конкретні с тани самос тійно мо жуть перемикати контекст Пове дінкові пат ерни проектування  С тратегія
#
krabatua@gmail com (#)ШАБЛОННИЙ
МЕТОДТакож відомий як: Template Me thod
Шаблонний мет од— це пове дінковий пат ерн проектування,
який визначає кіс тяк алг оритму , перек ладаючи
відповідальніс ть за деякі йог о кроки на підк ласи Пат ерн
дозво ляє підк ласам перевизначати кроки алг оритму , не
змінюючи йог о загальної структури  Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)Проблема
Ви пишет е програму д ля дата-майнінгу в офісних докуме-
нтах К орис тувачі завантажуватимуть до неї документи
різних форматів (PDF, DOC, CSV ), а програма повинна видо-
бути з них к орисну інформацію 
У першій версії ви обме жилися обробк ою тільки DOC фай-
лів У нас тупній версії до дали підтримку CSV  А через місяць
«прикр утили» робо ту з PDF документами 
Класи дата-майнінгу містять багато дублювань 
В якийсь момент ви помітили, що к од усіх трь ох класів
обробки документів х оч і відрізняєть ся в час тині робо ти
з файлами, але міс тить досить багат о спільног о в час ти- Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)ні самог о видоб ування даних Бу ло б добре позб утися від
повторної реалізації алг оритму видоб ування даних у к ожно-
му з класів 
До того ж інший к од, який працює з об ’єктами цих к ласів,
наповнений умовами, що перевіряю ть тип обробника пере д
початк ом робо ти Ве сь цей к од можна спрос тити, якщо злити
всі три к ласи в о дне ціле або зве сти їх до загальног о
інтерфейс у
Рішення
Патерн Шаб лонний мет од пропону є розбити алг оритм на
послідовніс ть кроків, описати ці кроки в окремих мет одах і
викликати їх в о дному шаблонному методі один за одним 
Це дозво лить підк ласам перевизначити деякі кроки алг ори-
тму, залишаючи без змін йог о структур у та інші кроки, які
для ць ого підк ласу не є важливими 
У нашому прик ладі з дата-майнінг ом ми мо жемо с твори-
ти загальний базовий к лас д ля всіх трь ох алг оритмів Ц ей
клас ск ладатиметь ся з шаб лонног о мет оду, який пос лідовно
викликає кроки розбор удокументів 
Для початку кроки шаб лонног о мет оду мо жна зробити
абстрактними З цієї причини у сі підк ласи повинні б удуть
реалізувати к ожен з кроків по-своєму  В нашому випадку Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)всі підк ласи вж е міс тять реалізацію к ожног о з кроків, т ому
додатково нічог о робити не потрібно 
Шаблонний метод розбиває алгоритм на кроки, дозво ляючи
підкласами перевизначити деякі зних
Справді важ ливим є нас тупний етап Т епер ми мо жемо
визначити спільну пове дінку д ля всіх трь ох класів і вине сти
її до с уперк ласу У нашому прик ладі кроки відкривання та
закривання документів відрізнятимуть ся для всіх підк ласів,
тому залишать ся абс трактними З іншог о боку , код оброб-
ки даних, о днак овий д ля всіх типів документів, переїде до
базовог окласу
Як бачит е, у нас з ’явилося два типа кроків: абстрактні , що
кожен підк лас обов ’язково має реалізувати, а так ож кроки з Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)типовою реалізацією , які мо жна перевизначити в підк ласах,
але це не обов ’язково
Але є ще й третій тип кроків —хуки Це опціональні кроки,
які виг лядаю ть як звичайні мет оди, але взагалі не міс тять
коду Шаб лонний мет од залишить ся робочим, навіть якщо
жоден підк лас не перевизначить такий х ук Підс умовуючи
сказане, х ук дає підк ласам до даткові т очки «вк линювання»
в хід шаб лонног ометоду
Аналогія з жит тя
Проект типового б удинку можуть тро хи змінити за
бажанням клієнта 
Під час б удівництва типових б удинків б удівельники вик о-
ристовую ть підхід, с хожий на шаб лонний мет од У них є
основний ар хітектурний проект , в як ому розписані кроки Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)будівництва: заливка ф ундаменту , витягування с тін, покри-
ття дах у, встановлення вік онтощо
Але, незважаючи на с тандар тизацію к ожног о етапу , будіве-
льники мо жуть робити неве ликі зміни на к ожному з етапів,
щоб зробити б удинок трішечки не с хожим наінші
Структура
Абстрактний к лас визначає кроки алг оритму й міс тить
шаблонний мет од, що ск ладаєть ся з вик ликів цих кроків
Кроки мо жуть б ути як абс трактними, так і міс тити реалізацію
за замовчуванням Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)Конкретний к лас перевизначає деякі або всі кроки алг о-
ритму  Конкретні к ласи не перевизначаю ть сам шаб ло-
нний метод
Псевдок од
У ць ому прик ладі Шаблонний мет одвикорис товується як
заготовка д ля стандар тного штучног о інт електу в прос тій
стратегічній грі Д ля вве дення в гр у нової раси дос татнь о
створити підк лас і реалізувати в нь ому відс утніметоди
Прик лад к ласів штучного інте лекту д ля простої гри
Всі раси гри матимуть приб лизно о днак ові типи юнітів та
будівель, т ому с труктура штучног о інт електу б уде о днак о-
вою Але різні раси мо жуть різним шлях ом реалізувати ці Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)кроки Т ак, наприк лад, орки б удуть агре сивнішими в атаці,
люди більш активними в захис ті, а дикі монс три взагалі не
будуть займатися будівництвом 
classclassGameAIGameAIisis 
Шаблонний методповинен бутизаданий убазовому класі 
Вінскладається звикликів методів упевному порядку 
Здебільшого, ціметодиєкроками якогось алгоритму 
methodmethodturn()isis 
collectResources () 
buildStructures () 
buildUnits () 
attack() 

Деякізцихметодів можутьбутиреалізовані безпосередньо 
убазовому класі 
methodmethodcollectResources ()isis 
foreachforeach (sinthisthisbuiltStructures )do 
scollect() 

Адеякіможутьбутиповністю абстрактними 
abstractabstract methodmethodbuildStructures () 
abstractabstract methodmethodbuildUnits () 

Доречі,класможематибільшеодногошаблонного методу 
methodmethodattack()isis 
enemy=closestEnemy () 
ifif(enemy==nullnull) 
sendScouts (mapcenter) 
elseelse 
sendWarriors (enemyposition )  Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)abstractabstract methodmethodsendScouts (position ) 
abstractabstract methodmethodsendWarriors (position ) 

Підкласи можутьнадавати своюреалізацію кроківалгоритму, не 
змінюючи самшаблонний метод 
classclassOrcsAIOrcsAIextendsextends GameAIisis 
methodmethodbuildStructures ()isis 
ifif(therearesomeresources )thenthen 
Будувати ферми,потімбараки, апотімцитадель 

methodmethodbuildUnits ()isis 
ifif(thereareplentyofresources )thenthen 
ifif(therearenoscouts) 
Побудувати раба,додатидогрупирозвідників 
elseelse 
Побудувати піхотинця, додатидогрупивоїнів 

 

methodmethodsendScouts (position )isis 
ifif(scoutslength>)thenthen 
Відправити розвідників напозицію 

methodmethodsendWarriors (position )isis 
ifif(warriors length>)thenthen 
Відправити воїнівнапозицію 

Підкласи можутьнетількиреалізовувати абстрактні кроки,але 
йперевизначати кроки,вжереалізовані вбазовому класі 
classclassMonstersAIMonstersAI extendsextends GameAIisis 
methodmethodcollectResources ()isis 
Нічогонеробити  Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)Застосування
Якщо підк ласи повинні розширювати базовий алг оритм, не
змінюючи йог оструктури
Шаблонний мет од дозво ляє підк ласами розширювати певні
кроки алг оритму через спадкування, не змінюючи при ць ому
структур у алг оритмів, ог олошену в базовому класі
Якщо у вас є кілька к ласів, які роблять одне й т е саме з
незначними відміннос тями Якщо ви ре дагуєте один к лас,
тоді доводить ся вносити такі ж виправлення до інших
класів 
Патерн шаб лонний мет од пропону є створити д ля схожих
класів спільний с уперк лас та оформити в нь ому г оловний
алгоритм у виг ляді кроків Кроки, які відрізняю ться, мо жна
перевизначити у підкласах 
Це дозво лить прибрати дуб лювання к оду в кільк ох класах,
які відрізняю ться деталями, але маю ть схожупове дінку methodmethodbuildStructures ()isis 
Нічогонеробити 

methodmethodbuildUnits ()isis 
Нічогонеробити 




 Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)Кроки реалізації
Вивчіть алг оритм і по думайт е, чи мо жна йог о розбити на
кроки Вирішіть, які кроки б удуть с тандар тними д ля всіх
варіацій алг оритму , а які мо жуть б утизмінюваними 
Створіть абс трактний базовий к лас Визначт е в нь ому
шаблонний мет од Цей мет од повинен ск ладатися з вик ли-
ків кроків алг оритму  Є сенс у т ому, щоб зробити шаб лонний
метод фінальним, аби підк ласи не мог ли перевизначити
його (якщо ваша мова програмування це дозво ляє)
Додайте до абс трактног о класу мет оди д ля кожног о з кро-
ків алг оритму  Ви мо жете зробити ці мет оди абс трактними
або до дати яку сь типову реалізацію  У першому випадку всі
підкласи повинні будуть реалізувати ці мет оди, а в др уго-
му— тільки якщо реалізація кроку в підк ласі відрізняєть ся
від с тандар тної версії 
Подумайт е про вве дення х уків в алг оритм Найчас тіше х уки
розташовую ть між основними кроками алг оритму , а так ож
до та піс ля всіх кроків 
Створіть к онкретні к ласи, у спадкувавши їх від абс трактног о
класу Реалізуйт е в них всі кроки та х уки, яких не вистачає 
Переваги та не доліки
Полегшу є повт орне вик орис тання коду

 Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)Ви ж орстко обме жені ск елетом існуючог оалгоритму 
Ви мо жете пор ушити принцип підстановки Барбари Ліск ов,
змінюючи базову пове дінку о дного з кроків алг оритму через
підклас
У мір у зрос тання кільк ості кроків шаб лонний мет од стає
занадт о складно підтримувати 
Відносини з іншими пат ернами
•Фабричний мет одможна розг лядати як окремий випадок
Шаблонног о мет оду Крім т ого,Фабричний метод нерідк о
буває час тиною ве ликого класу зШаблонними методами 
•Шаблонний мет одвикорис товує спадкування, щоб розши-
рювати час тини алг оритму Стратегія викорис товує делегу-
вання, щоб змінювати «на ль оту» алг оритми, що
виконую тьсяШаблонний метод працює на рівні к ласів
Стратегія дозво ляє змінювати логіку окремих об ’єктів


 Пове дінкові пат ерни проектування  Шаб лонний мет од
#
krabatua@gmail com (#)ВІДВІД УВАЧТакож відомий як: Visitor
Відвідувач — це пове дінковий пат ерн проектування, що дає
змогу до давати до програми нові операції, не змінюючи
класи об ’єктів, над якими ці операції мо жуть виконуватися  Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Проблема
Ваша к оманда розроб ляє програму , що працює з г еодани-
ми у виг ляді графа Вузлами графа мо жуть б ути як міс та,
так інші локації, такі, як пам ’ятки, ве ликі підприємс тва т ощо
Кожен вузо л має посилання на найб лижчі до нь ого вузли
Для кожног о типу вузла існу є свій власний к лас, а к ожен
вузол пре дставлений окремим об ’єктом
Експорт гео-вузлів доXML
Ваше завдання — зробити ек спор т цього графа до XML
Справа б ула б легк ою, якщо б ви мог ли ре дагувати к ласи
вузлів У ць ому випадку мо жна б уло б до дати мет од експо-
рту до к ожног о типу вузлів, а по тім, перебираючи всі вузли
графа, вик ликати цей мет од для кожног о вузла Завдяки
поліморфізму , рішення б уло б е легантним, оскільки ви мог ли
б не прив ’язуватися до к онкретних к ласів вузлів 
Але, на жаль, змінити к ласи вузлів у вас не вийшло  Сис те-
мний ар хітектор сказав, що к од класів вузлів зараз дуж е ста- Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)більний, і від нь ого багат о що зале жить, а т ому він не х оче
ризикувати, дозво ляючи б удь-кому чіпати цейкод
Код XML-ек спорту доведетьс я додати до всіх к ласів вузлів, а це
дуженевигідно 
До того ж він с умнівався в т ому, що ек спор т до XML взага-
лі є доречним в рамках цих к ласів Їхнє основне завдання
пов’язане з г еоданими, а ек спор т виг лядає в ме жах цих к ла-
сів, як біла ворона 
Була ще о дна причина заборони Нас тупног о тижня вам міг
знадобитися ек спор т в який-неб удь інший формат даних, а
це призве ло б до повт орних змін в класах 
Рішення
Патерн Відвідувач пропону є розміс тити нову пове дінку в
окремому к ласі, заміс ть того, щоб мно жити її відразу в декі-
лькох класах Об ’єкти, з якими повинна б ути пов ’язана пове- Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)дінка, не вик онуватимуть її самос тійно  Заміс ть ць ого ви
будете пере давати ці об ’єкти до мет одіввідвідувача 
Код пове дінки, імовірно , повинен відрізнятися д ля об ’єктів
різних к ласів, т ому й мет одів у відвідувача повинно б ути
декілька Назви та принцип дії цих мет одів б удуть по дібни-
ми, а основна відмінніс ть торкатиметь ся типу , що приймає-
ться в параметрах об ’єкта, наприк лад:
Тут виникає запитання, яким чином ми б удемо по давати
вузли до об ’єкта відвідувача Оскільки у сі мет оди відрізняю-
ться сигнатурою , викорис тати по ліморфізм при перебиранні
вузлів не вийде Д оведеться перевіряти тип вузлів д ля того,
щоб вибрати відповідний мет одвідвідувача classclassExportVisitorExportVisitor implementsimplements Visitor isis 
methodmethoddoForCity (Cityc){} 
methodmethoddoForIndustry (Industry f){} 
methodmethoddoForSightSeeing (SightSeeing ss){} 
 
foreachforeach (Nodenode:graph) 
ifif(nodeinstanceofinstanceof City) 
exportVisitor doForCity ((City)node); 
ifif(nodeinstanceofinstanceof Industry ) 
exportVisitor doForIndustry ((Industry )node); 
  Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Тут не допомо же навіть ме ханізм перевантаж ення мет одів
(доступний у Java і C#) Якщо назвати всі мет оди о днак о-
во, то невизначеніс ть реальног о типу вузла вс е одно не
дасть вик ликати правильний мет од Ме ханізм перевантаж е-
ння ве сь час вик ликатиме мет од відвідувача, відповідний
типу Node,а не реальног о класу поданог овузла 
Але пат ерн Відвідувач вирішу є і цю проб лему , вик орис то-
вуючи ме ханізм подвійної диспетчеризації  Заміс ть того,
щоб самим шукати по трібний мет од, ми мо жемо дор учи-
ти це об ’єктам, які пере даємо в параметрах відвідуваче-
ві, а вони вж е самос тійно вик личуть правильний мет од
відвідувача 
Clientcode 
foreachforeach (Nodenode:graph) 
nodeaccept(exportVisitor ); 

City
classclassCityCityisis 
methodmethodaccept(Visitor v)isis 
vdoForCity (thisthis); 
 

Industry 
classclassIndustryIndustry isis 
methodmethodaccept(Visitor v)isis 
vdoForIndustry (thisthis); 
  Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Як бачит е, змінити к ласи вузлів вс е-таки дове деться Про те
ця прос та зміна дозво лить зас тосувати до об ’єктів вузлів
й інші пове дінки, адж е класи вузлів б удуть прив ’язані не
до конкретног о класу відвідувачів, а до їхнь ого загально-
го інт ерфейс у Тому, якщо дове деться до дати до програми
нову пове дінку , ви с творит е новий к лас відвідувачів і б удете
пере давати йог о до мет одіввузлів 
Аналогія з жит тя
У страх ового агента приготовані по ліси д ля різних видів організацій 
Уявіть с обі с трахового агента-початківця, який прагне о три-
мати нових к лієнтів Він хао тично відвіду є всі б удинки
навколо, пропонуючи свої пос луги А ле д ля кожног отипу
будинків, які він відвіду є, у нь ого є ос облива пропозиція 
•Прийшовши до б удинку звичайної сім ’ї, він пропону є офо-
рмити ме дичну страховку Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)•Прийшовши до банку , він пропону є страховку на випадок
пограб ування 
•Прийшовши на фабрику , він пропону є страхування підприє-
мства на випадок по жежі чи повені 
Структура
Відвідувач опис ує спільний д ля всіх типів відвідувачів інт е-
рфейс Він ог олошу є набір мет одів, що відрізняю ться типом Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)вхідног о параметра К ожному к ласу конкретних е лементів
повинен підх одити свій мет од В мовах, які підтримую ть
перевантаж ення мет одів, ці мет оди мо жуть мати о днак ові
імена, але типи їхніх параметрів повинні відрізнятися 
Конкретні відвідувачі реалізую ть яку сь ос обливу пове дінку
для всіх типів е лементів, які мо жна по дати через мет оди
інтерфейс увідвідувача 
Елемент опис ує мет одприйому відвідувача Ц ей мет од пови-
нен мати лише о дин параметр , оголошений з типом зага-
льног о інтерфейс увідвідувачів 
Конкретні е лементи реалізую ть мет одиприймання відвіду-
вача Мета ць ого мет оду— вик ликати т ой мет од відвіду-
вання, який відповідає типу ць ого елемента Т ак відвідувач
дізнаєть ся, з яким типом е лементу він працює 
Клієнт омзазвичай вис тупає к олекція або ск ладний ск ладо-
вий об ’єкт, наприк лад, дерево Компонувальника  Здебільшо-
го, клієнт не прив ’язаний до к онкретних к ласів е лементів,
працюючи з ними через загальний інт ерфейс елементів 
Псевдок од
У цьому прик ладі Відвідувач додає до існуючої ієрар хії кла-
сів геометричних фігур мо жливіс ть ек спор тудоXML Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Прик лад організації ек спорту об ’єктів XML через
окремий клас-відвід увач
Складна ієрархія елементів 
interfaceinterface ShapeShapeisis 
methodmethodmove(x,y) 
methodmethoddraw() 
methodmethodaccept(v:Visitor) 

Методприйняття відвідувача повинен бутиреалізований у 
кожному елементі, анетількиубазовому класіЦедопоможе 
програмі визначити, якийметодвідвідувача потрібно викликати 
увипадку, якщовинезнаєтетипелемента 
classclassDotDotimplementsimplements Shapeisis  Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#) 
methodmethodaccept(v:Visitor)isis 
vvisitDot (thisthis) 

classclassCircleCircleimplementsimplements Shapeisis 
 
methodmethodaccept(v:Visitor)isis 
vvisitCircle (thisthis) 

classclassRectangleRectangle implementsimplements Shapeisis 
 
methodmethodaccept(v:Visitor)isis 
vvisitRectangle (thisthis) 

classclassCompoundShapeCompoundShape implementsimplements Shapeisis 
 
methodmethodaccept(v:Visitor)isis 
vvisitCompoundShape (thisthis) 


Інтерфейс відвідувачів повинен містити методивідвідування 
кожного елемента Важливо, щобієрархія елементів змінювалася 
рідко,оскільки придодаванні новогоелемента доведеться 
змінювати всіхіснуючих відвідувачів 
interfaceinterface VisitorVisitor isis 
methodmethodvisitDot (d:Dot) 
methodmethodvisitCircle (c:Circle) 
methodmethodvisitRectangle (r:Rectangle ) 
methodmethodvisitCompoundShape (cs:CompoundShape ) 

Конкретний відвідувач реалізує однуоперацію длявсієї 
ієрархії елементів Новаоперація =новийвідвідувач  Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Відвідувача вигідно застосовувати, колиновіелементи 
додаються дужезрідка, ановіоперації —часто 
classclassXMLExportVisitorXMLExportVisitor implementsimplements Visitor isis 
methodmethodvisitDot (d:Dot)isis 
Експорт idтакоординат центруточки 

methodmethodvisitCircle (c:Circle)isis 
Експорт id,координат центрутарадіусу кола 

methodmethodvisitRectangle (r:Rectangle )isis 
Експорт id,координат лівого-верхнього кута,висоти 
таширинипрямокутника 

methodmethodvisitCompoundShape (cs:CompoundShape )isis 
Експорт idскладової фігури, атакожспискуid 
підфігур, зякихвонаскладається 


Програма можезастосовувати відвідувача добудь-якого набору 
об'єктів елементів, навітьнеуточнюючи їхнітипиПотрібний 
методвідвідувача будеобранозавдяки проходу черезметод 
accept 
classclassApplicationApplication isis 
fieldfieldallShapes :arrayofShapes 

methodmethodexport()isis 
exportVisitor =newnewXMLExportVisitor () 

foreachforeach (shapeinallShapes )do 
shapeaccept(exportVisitor )  Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Вам не здаєть ся, що вик лик мет одуaccept — це зайва
ланка? Якщо так, т оді ще раз рек омендую вам ознайомитися
з проб лемою раннь ого та пізнь ого зв’язування в с таттіВідві-
дувач і Double Dispat ch
Застосування
Якщо вам по трібно вик онати як усь операцію над у сіма е ле-
ментами ск ладної с труктури об ’єктів, наприк лад, деревом 
Відвідувач дозво ляє зас тосовувати о дну і ту саму операцію
до об ’єктів різних класів 
Якщо над об ’єктами ск ладної с труктури об ’єктів по трібно
виконувати деякі не пов ’язані між с обою операції, але ви не
хочет е «засмічувати» к ласи такими операціями 
Відвідувач дозво ляє витяг ти споріднені операції з к ласів,
що ск ладаю ть структур у об’єктів, поміс тивши їх до о дного
класу-відвідувача Якщо с труктура об ’єктів вик орис товується
в декільк ох програмах, т о пат ерн дозво лить к ожній програ-
мі мати тільки по трібні в ній операції 
Якщо нова пове дінка має с енс тільки д ля деяких к ласів з
існуючої ієрар хії
Відвідувач дозво ляє визначити пове дінку тільки д ля цих
класів, залишивши її поро жньою д ля всіх інших 





 Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Кроки реалізації
Створіть інт ерфейс відвідувача й ог олосіть у нь ому мет о-
ди «відвідування» д ля кожног о класу елемента, який існу є в
програмі 
Опишіть інт ерфейс е лементів Якщо ви працюєт е з уж е
існуючими к ласами, ог олосіть абс трактний мет од прийнят тя
відвідувачів у базовому к ласі ієрар хіїелементів 
Реалізуйт е мет оди прийнят тя в у сіх к онкретних е лементах
Вони повинні переадре совувати вик лики т ому мет оду відві-
дувача, в як ому тип параметра збігаєть ся з по точним к ласом
елемента 
Ієрар хія елементів повинна знати тільки про загальний інт е-
рфейс відвідувачів З іншог о боку , відвідувачі знатимуть про
всі класи елементів 
Для кожної нової пове дінки с творіть свій власний к онкре-
тний к лас Прис тосуйте цю пове дінку д ля робо ти з у сіма
наявними типами е лементів, реалізувавши всі мет оди інт е-
рфейс увідвідувачів 
Ви мо жете зіткнутися з ситуацією , коли відвідувачу по трібен
доступ до приватних по лів е лементів У ць ому випадку ви
можете або розкрити дос туп до цих по лів, пор ушивши інка-
псуляцію е лементів, або зробити к лас відвідувача вк ладе-
ним в к лас е лемента, якщо вам пощас тило писати мовою ,
яка підтриму є механізм вк ладених класів  Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Клієнт с творюватиме об ’єкти відвідувачів, а по тім пере дава-
тиме їх е лементам через мет одприйнят тя
Переваги та не доліки
Спрощу є до давання операцій, працюючих зі ск ладними
структурами об ’єктів
Об’єдну є споріднені операції в о дному класі
Відвідувач мо же нак опичувати с тан при об ході структури
елементів 
Патерн невиправданий, якщо ієрар хія е лементів час то
змінюєть ся
Може призве сти до пор ушення інкапс уляції елементів 
Відносини з іншими пат ернами
•Відвідувач можна розг лядати як розширений аналог Кома-
нди, що здат ен працювати відразу з декільк ома видами
одержувачів 
•Ви мо жете вик онати яку сь дію над у сім деревом Компонува-
льника за допомог оюВідвідувача 
•Відвідувач можна вик орис товувати спільно з Ітерат ором 
Ітератор відповідатиме за об хід с труктури даних, а Відвід у-
вач— за вик онання дій над к ожним її компонент ом





 Пове дінкові пат ерни проектування  Відвідувач
#
krabatua@gmail com (#)Заключення
Вітаю! Ви дісталис я закінчення!
Але у світі існу є безліч інших пат ернів Спо діваюся, ця книга
стане вашою т очкою с тарту в по дальшому ово лодінні пат е-
рнами та розвитку надзвичайних здібнос тей у проектуванні
програм 
Ось декілька ідей д ля нас тупних кроків, якщо ви ще не
визначилися з тим, що робитимет едалі:
• Не заб увайт е, що разом з цією книг ою пос тавляєть ся
архів з реальними прик ладами к оду різними мовами про-
грамування
• Прочитайт е книгу Дж ошуа К ерієвські Рефакторинг з
використанням патернів проекту вання 
• Не розбираєт есь у ре факт орингу? У мене є х ороші мат е-
ріали д ля вас на R efact oringGuru 
• Роздр укуйт ешпаргалки по пат ернах та прикріпіть їх
десь на видному місці 
• Залишт е відг укпро цю книгу  Мені б уло б дуж е цікаво
почути вашу думку , навіть якщо це критика 
#
krabatua@gmail com (#)